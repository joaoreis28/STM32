
ch5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fac  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800513c  0800513c  0000613c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800532c  0800532c  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  0800532c  0800532c  0000632c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005334  08005334  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005334  08005334  00006334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005338  08005338  00006338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800533c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000068  080053a4  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  080053a4  00007264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b47e  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a72  00000000  00000000  00012516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000910  00000000  00000000  00013f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006e5  00000000  00000000  00014898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002693a  00000000  00000000  00014f7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b992  00000000  00000000  0003b8b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9a08  00000000  00000000  00047249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130c51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f7c  00000000  00000000  00130c94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00133c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005124 	.word	0x08005124

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005124 	.word	0x08005124

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
	uint8_t uTimes = 0;
 8000566:	2300      	movs	r3, #0
 8000568:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056a:	f000 faf9 	bl	8000b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056e:	f000 f831 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000572:	f000 f8b1 	bl	80006d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000576:	f000 f87f 	bl	8000678 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 800057a:	4811      	ldr	r0, [pc, #68]	@ (80005c0 <main+0x60>)
 800057c:	f000 f918 	bl	80007b0 <RetargetInit>
    /* USER CODE END 2 */

    printf("How many times to print the message?: ");
 8000580:	4810      	ldr	r0, [pc, #64]	@ (80005c4 <main+0x64>)
 8000582:	f003 f88b 	bl	800369c <iprintf>
    scanf("%hhu", &uTimes);
 8000586:	1dbb      	adds	r3, r7, #6
 8000588:	4619      	mov	r1, r3
 800058a:	480f      	ldr	r0, [pc, #60]	@ (80005c8 <main+0x68>)
 800058c:	f003 f8f6 	bl	800377c <iscanf>
    printf("\r\n");
 8000590:	480e      	ldr	r0, [pc, #56]	@ (80005cc <main+0x6c>)
 8000592:	f003 f8eb 	bl	800376c <puts>

    for(uint8_t i = 0; i < uTimes;) {
 8000596:	2300      	movs	r3, #0
 8000598:	71fb      	strb	r3, [r7, #7]
 800059a:	e00b      	b.n	80005b4 <main+0x54>
  	HAL_Delay(500);
 800059c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005a0:	f000 fb5a 	bl	8000c58 <HAL_Delay>
  	printf("Hello, Nucleo: %u \r\n", ++i);
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	3301      	adds	r3, #1
 80005a8:	71fb      	strb	r3, [r7, #7]
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	4619      	mov	r1, r3
 80005ae:	4808      	ldr	r0, [pc, #32]	@ (80005d0 <main+0x70>)
 80005b0:	f003 f874 	bl	800369c <iprintf>
    for(uint8_t i = 0; i < uTimes;) {
 80005b4:	79bb      	ldrb	r3, [r7, #6]
 80005b6:	79fa      	ldrb	r2, [r7, #7]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d3ef      	bcc.n	800059c <main+0x3c>
    }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1);
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <main+0x5c>
 80005c0:	20000084 	.word	0x20000084
 80005c4:	0800513c 	.word	0x0800513c
 80005c8:	08005164 	.word	0x08005164
 80005cc:	0800516c 	.word	0x0800516c
 80005d0:	08005170 	.word	0x08005170

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b096      	sub	sp, #88	@ 0x58
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0314 	add.w	r3, r7, #20
 80005de:	2244      	movs	r2, #68	@ 0x44
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 fa68 	bl	8003ab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	463b      	mov	r3, r7
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005f6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005fa:	f000 fe07 	bl	800120c <HAL_PWREx_ControlVoltageScaling>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000604:	f000 f8ce 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000608:	2302      	movs	r3, #2
 800060a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000610:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000612:	2310      	movs	r3, #16
 8000614:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000616:	2302      	movs	r3, #2
 8000618:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061a:	2302      	movs	r3, #2
 800061c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800061e:	2301      	movs	r3, #1
 8000620:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000622:	230a      	movs	r3, #10
 8000624:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000626:	2307      	movs	r3, #7
 8000628:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800062e:	2302      	movs	r3, #2
 8000630:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	4618      	mov	r0, r3
 8000638:	f000 fe3e 	bl	80012b8 <HAL_RCC_OscConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000642:	f000 f8af 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	230f      	movs	r3, #15
 8000648:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	2303      	movs	r3, #3
 800064c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800065a:	463b      	mov	r3, r7
 800065c:	2104      	movs	r1, #4
 800065e:	4618      	mov	r0, r3
 8000660:	f001 fa06 	bl	8001a70 <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800066a:	f000 f89b 	bl	80007a4 <Error_Handler>
  }
}
 800066e:	bf00      	nop
 8000670:	3758      	adds	r7, #88	@ 0x58
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800067c:	4b14      	ldr	r3, [pc, #80]	@ (80006d0 <MX_USART2_UART_Init+0x58>)
 800067e:	4a15      	ldr	r2, [pc, #84]	@ (80006d4 <MX_USART2_UART_Init+0x5c>)
 8000680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000682:	4b13      	ldr	r3, [pc, #76]	@ (80006d0 <MX_USART2_UART_Init+0x58>)
 8000684:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b11      	ldr	r3, [pc, #68]	@ (80006d0 <MX_USART2_UART_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <MX_USART2_UART_Init+0x58>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0e      	ldr	r3, [pc, #56]	@ (80006d0 <MX_USART2_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <MX_USART2_UART_Init+0x58>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	@ (80006d0 <MX_USART2_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <MX_USART2_UART_Init+0x58>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ae:	4b08      	ldr	r3, [pc, #32]	@ (80006d0 <MX_USART2_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b4:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <MX_USART2_UART_Init+0x58>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	@ (80006d0 <MX_USART2_UART_Init+0x58>)
 80006bc:	f002 f8b8 	bl	8002830 <HAL_UART_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006c6:	f000 f86d 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000084 	.word	0x20000084
 80006d4:	40004400 	.word	0x40004400

080006d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	@ 0x28
 80006dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ee:	4b2b      	ldr	r3, [pc, #172]	@ (800079c <MX_GPIO_Init+0xc4>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f2:	4a2a      	ldr	r2, [pc, #168]	@ (800079c <MX_GPIO_Init+0xc4>)
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006fa:	4b28      	ldr	r3, [pc, #160]	@ (800079c <MX_GPIO_Init+0xc4>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fe:	f003 0304 	and.w	r3, r3, #4
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000706:	4b25      	ldr	r3, [pc, #148]	@ (800079c <MX_GPIO_Init+0xc4>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070a:	4a24      	ldr	r2, [pc, #144]	@ (800079c <MX_GPIO_Init+0xc4>)
 800070c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000710:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000712:	4b22      	ldr	r3, [pc, #136]	@ (800079c <MX_GPIO_Init+0xc4>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	4b1f      	ldr	r3, [pc, #124]	@ (800079c <MX_GPIO_Init+0xc4>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000722:	4a1e      	ldr	r2, [pc, #120]	@ (800079c <MX_GPIO_Init+0xc4>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072a:	4b1c      	ldr	r3, [pc, #112]	@ (800079c <MX_GPIO_Init+0xc4>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	4b19      	ldr	r3, [pc, #100]	@ (800079c <MX_GPIO_Init+0xc4>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073a:	4a18      	ldr	r2, [pc, #96]	@ (800079c <MX_GPIO_Init+0xc4>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000742:	4b16      	ldr	r3, [pc, #88]	@ (800079c <MX_GPIO_Init+0xc4>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2120      	movs	r1, #32
 8000752:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000756:	f000 fd33 	bl	80011c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800075a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800075e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000760:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4619      	mov	r1, r3
 8000770:	480b      	ldr	r0, [pc, #44]	@ (80007a0 <MX_GPIO_Init+0xc8>)
 8000772:	f000 fb7b 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000776:	2320      	movs	r3, #32
 8000778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	2301      	movs	r3, #1
 800077c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4619      	mov	r1, r3
 800078c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000790:	f000 fb6c 	bl	8000e6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000794:	bf00      	nop
 8000796:	3728      	adds	r7, #40	@ 0x28
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40021000 	.word	0x40021000
 80007a0:	48000800 	.word	0x48000800

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <Error_Handler+0x8>

080007b0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80007b8:	4a07      	ldr	r2, [pc, #28]	@ (80007d8 <RetargetInit+0x28>)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80007be:	4b07      	ldr	r3, [pc, #28]	@ (80007dc <RetargetInit+0x2c>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	6898      	ldr	r0, [r3, #8]
 80007c4:	2300      	movs	r3, #0
 80007c6:	2202      	movs	r2, #2
 80007c8:	2100      	movs	r1, #0
 80007ca:	f002 ffe9 	bl	80037a0 <setvbuf>
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	2000010c 	.word	0x2000010c
 80007dc:	20000018 	.word	0x20000018

080007e0 <_isatty>:

int _isatty(int fd) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	db04      	blt.n	80007f8 <_isatty+0x18>
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2b02      	cmp	r3, #2
 80007f2:	dc01      	bgt.n	80007f8 <_isatty+0x18>
    return 1;
 80007f4:	2301      	movs	r3, #1
 80007f6:	e005      	b.n	8000804 <_isatty+0x24>

  errno = EBADF;
 80007f8:	f003 f9ac 	bl	8003b54 <__errno>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2209      	movs	r2, #9
 8000800:	601a      	str	r2, [r3, #0]
  return 0;
 8000802:	2300      	movs	r3, #0
}
 8000804:	4618      	mov	r0, r3
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <_write>:

int _write(int fd, char* ptr, int len) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	2b01      	cmp	r3, #1
 800081c:	d002      	beq.n	8000824 <_write+0x18>
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	2b02      	cmp	r3, #2
 8000822:	d111      	bne.n	8000848 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000824:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <_write+0x54>)
 8000826:	6818      	ldr	r0, [r3, #0]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	b29a      	uxth	r2, r3
 800082c:	f04f 33ff 	mov.w	r3, #4294967295
 8000830:	68b9      	ldr	r1, [r7, #8]
 8000832:	f002 f84b 	bl	80028cc <HAL_UART_Transmit>
 8000836:	4603      	mov	r3, r0
 8000838:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800083a:	7dfb      	ldrb	r3, [r7, #23]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d101      	bne.n	8000844 <_write+0x38>
      return len;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	e008      	b.n	8000856 <_write+0x4a>
    else
      return EIO;
 8000844:	2305      	movs	r3, #5
 8000846:	e006      	b.n	8000856 <_write+0x4a>
  }
  errno = EBADF;
 8000848:	f003 f984 	bl	8003b54 <__errno>
 800084c:	4603      	mov	r3, r0
 800084e:	2209      	movs	r2, #9
 8000850:	601a      	str	r2, [r3, #0]
  return -1;
 8000852:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000856:	4618      	mov	r0, r3
 8000858:	3718      	adds	r7, #24
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	2000010c 	.word	0x2000010c

08000864 <_close>:

int _close(int fd) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b00      	cmp	r3, #0
 8000870:	db04      	blt.n	800087c <_close+0x18>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b02      	cmp	r3, #2
 8000876:	dc01      	bgt.n	800087c <_close+0x18>
    return 0;
 8000878:	2300      	movs	r3, #0
 800087a:	e006      	b.n	800088a <_close+0x26>

  errno = EBADF;
 800087c:	f003 f96a 	bl	8003b54 <__errno>
 8000880:	4603      	mov	r3, r0
 8000882:	2209      	movs	r2, #9
 8000884:	601a      	str	r2, [r3, #0]
  return -1;
 8000886:	f04f 33ff 	mov.w	r3, #4294967295
}
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <_read>:

int _read(int fd, char* ptr, int len) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d110      	bne.n	80008c8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80008a6:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <_read+0x4c>)
 80008a8:	6818      	ldr	r0, [r3, #0]
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295
 80008ae:	2201      	movs	r2, #1
 80008b0:	68b9      	ldr	r1, [r7, #8]
 80008b2:	f002 f894 	bl	80029de <HAL_UART_Receive>
 80008b6:	4603      	mov	r3, r0
 80008b8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80008ba:	7dfb      	ldrb	r3, [r7, #23]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d101      	bne.n	80008c4 <_read+0x30>
      return 1;
 80008c0:	2301      	movs	r3, #1
 80008c2:	e008      	b.n	80008d6 <_read+0x42>
    else
      return EIO;
 80008c4:	2305      	movs	r3, #5
 80008c6:	e006      	b.n	80008d6 <_read+0x42>
  }
  errno = EBADF;
 80008c8:	f003 f944 	bl	8003b54 <__errno>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2209      	movs	r2, #9
 80008d0:	601a      	str	r2, [r3, #0]
  return -1;
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3718      	adds	r7, #24
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	2000010c 	.word	0x2000010c

080008e4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	db08      	blt.n	8000906 <_fstat+0x22>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	dc05      	bgt.n	8000906 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000900:	605a      	str	r2, [r3, #4]
    return 0;
 8000902:	2300      	movs	r3, #0
 8000904:	e005      	b.n	8000912 <_fstat+0x2e>
  }

  errno = EBADF;
 8000906:	f003 f925 	bl	8003b54 <__errno>
 800090a:	4603      	mov	r3, r0
 800090c:	2209      	movs	r2, #9
 800090e:	601a      	str	r2, [r3, #0]
  return 0;
 8000910:	2300      	movs	r3, #0
}
 8000912:	4618      	mov	r0, r3
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <HAL_MspInit+0x44>)
 8000924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000926:	4a0e      	ldr	r2, [pc, #56]	@ (8000960 <HAL_MspInit+0x44>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6613      	str	r3, [r2, #96]	@ 0x60
 800092e:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <HAL_MspInit+0x44>)
 8000930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093a:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <HAL_MspInit+0x44>)
 800093c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800093e:	4a08      	ldr	r2, [pc, #32]	@ (8000960 <HAL_MspInit+0x44>)
 8000940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000944:	6593      	str	r3, [r2, #88]	@ 0x58
 8000946:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <HAL_MspInit+0x44>)
 8000948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800094a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40021000 	.word	0x40021000

08000964 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b0ac      	sub	sp, #176	@ 0xb0
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2288      	movs	r2, #136	@ 0x88
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f003 f897 	bl	8003ab8 <memset>
  if(huart->Instance==USART2)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a21      	ldr	r2, [pc, #132]	@ (8000a14 <HAL_UART_MspInit+0xb0>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d13b      	bne.n	8000a0c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000994:	2302      	movs	r3, #2
 8000996:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000998:	2300      	movs	r3, #0
 800099a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4618      	mov	r0, r3
 80009a2:	f001 fa89 	bl	8001eb8 <HAL_RCCEx_PeriphCLKConfig>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009ac:	f7ff fefa 	bl	80007a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b0:	4b19      	ldr	r3, [pc, #100]	@ (8000a18 <HAL_UART_MspInit+0xb4>)
 80009b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009b4:	4a18      	ldr	r2, [pc, #96]	@ (8000a18 <HAL_UART_MspInit+0xb4>)
 80009b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80009bc:	4b16      	ldr	r3, [pc, #88]	@ (8000a18 <HAL_UART_MspInit+0xb4>)
 80009be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c8:	4b13      	ldr	r3, [pc, #76]	@ (8000a18 <HAL_UART_MspInit+0xb4>)
 80009ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009cc:	4a12      	ldr	r2, [pc, #72]	@ (8000a18 <HAL_UART_MspInit+0xb4>)
 80009ce:	f043 0301 	orr.w	r3, r3, #1
 80009d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d4:	4b10      	ldr	r3, [pc, #64]	@ (8000a18 <HAL_UART_MspInit+0xb4>)
 80009d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009e0:	230c      	movs	r3, #12
 80009e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009f8:	2307      	movs	r3, #7
 80009fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a02:	4619      	mov	r1, r3
 8000a04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a08:	f000 fa30 	bl	8000e6c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a0c:	bf00      	nop
 8000a0e:	37b0      	adds	r7, #176	@ 0xb0
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40004400 	.word	0x40004400
 8000a18:	40021000 	.word	0x40021000

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <NMI_Handler+0x4>

08000a24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <MemManage_Handler+0x4>

08000a34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <BusFault_Handler+0x4>

08000a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <UsageFault_Handler+0x4>

08000a44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a72:	f000 f8d1 	bl	8000c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a84:	4a14      	ldr	r2, [pc, #80]	@ (8000ad8 <_sbrk+0x5c>)
 8000a86:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <_sbrk+0x60>)
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a90:	4b13      	ldr	r3, [pc, #76]	@ (8000ae0 <_sbrk+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d102      	bne.n	8000a9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a98:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <_sbrk+0x64>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	@ (8000ae4 <_sbrk+0x68>)
 8000a9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ae0 <_sbrk+0x64>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d207      	bcs.n	8000abc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aac:	f003 f852 	bl	8003b54 <__errno>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aba:	e009      	b.n	8000ad0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000abc:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ac2:	4b07      	ldr	r3, [pc, #28]	@ (8000ae0 <_sbrk+0x64>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	4a05      	ldr	r2, [pc, #20]	@ (8000ae0 <_sbrk+0x64>)
 8000acc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ace:	68fb      	ldr	r3, [r7, #12]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3718      	adds	r7, #24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20018000 	.word	0x20018000
 8000adc:	00000400 	.word	0x00000400
 8000ae0:	20000110 	.word	0x20000110
 8000ae4:	20000268 	.word	0x20000268

08000ae8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <SystemInit+0x20>)
 8000aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000af2:	4a05      	ldr	r2, [pc, #20]	@ (8000b08 <SystemInit+0x20>)
 8000af4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000af8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b10:	f7ff ffea 	bl	8000ae8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b14:	480c      	ldr	r0, [pc, #48]	@ (8000b48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b16:	490d      	ldr	r1, [pc, #52]	@ (8000b4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b18:	4a0d      	ldr	r2, [pc, #52]	@ (8000b50 <LoopForever+0xe>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b1c:	e002      	b.n	8000b24 <LoopCopyDataInit>

08000b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b22:	3304      	adds	r3, #4

08000b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b28:	d3f9      	bcc.n	8000b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b58 <LoopForever+0x16>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b30:	e001      	b.n	8000b36 <LoopFillZerobss>

08000b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b34:	3204      	adds	r2, #4

08000b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b38:	d3fb      	bcc.n	8000b32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b3a:	f003 f811 	bl	8003b60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b3e:	f7ff fd0f 	bl	8000560 <main>

08000b42 <LoopForever>:

LoopForever:
    b LoopForever
 8000b42:	e7fe      	b.n	8000b42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b4c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b50:	0800533c 	.word	0x0800533c
  ldr r2, =_sbss
 8000b54:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b58:	20000264 	.word	0x20000264

08000b5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b5c:	e7fe      	b.n	8000b5c <ADC1_2_IRQHandler>
	...

08000b60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b66:	2300      	movs	r3, #0
 8000b68:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b9c <HAL_Init+0x3c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000b9c <HAL_Init+0x3c>)
 8000b70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b74:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b76:	2003      	movs	r0, #3
 8000b78:	f000 f944 	bl	8000e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f000 f80f 	bl	8000ba0 <HAL_InitTick>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d002      	beq.n	8000b8e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	71fb      	strb	r3, [r7, #7]
 8000b8c:	e001      	b.n	8000b92 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b8e:	f7ff fec5 	bl	800091c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b92:	79fb      	ldrb	r3, [r7, #7]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40022000 	.word	0x40022000

08000ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bac:	4b17      	ldr	r3, [pc, #92]	@ (8000c0c <HAL_InitTick+0x6c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d023      	beq.n	8000bfc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bb4:	4b16      	ldr	r3, [pc, #88]	@ (8000c10 <HAL_InitTick+0x70>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <HAL_InitTick+0x6c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 f941 	bl	8000e52 <HAL_SYSTICK_Config>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d10f      	bne.n	8000bf6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2b0f      	cmp	r3, #15
 8000bda:	d809      	bhi.n	8000bf0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	6879      	ldr	r1, [r7, #4]
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	f000 f919 	bl	8000e1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be8:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <HAL_InitTick+0x74>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6013      	str	r3, [r2, #0]
 8000bee:	e007      	b.n	8000c00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	73fb      	strb	r3, [r7, #15]
 8000bf4:	e004      	b.n	8000c00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	73fb      	strb	r3, [r7, #15]
 8000bfa:	e001      	b.n	8000c00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	20000000 	.word	0x20000000
 8000c14:	20000004 	.word	0x20000004

08000c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <HAL_IncTick+0x20>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <HAL_IncTick+0x24>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4413      	add	r3, r2
 8000c28:	4a04      	ldr	r2, [pc, #16]	@ (8000c3c <HAL_IncTick+0x24>)
 8000c2a:	6013      	str	r3, [r2, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	20000008 	.word	0x20000008
 8000c3c:	20000114 	.word	0x20000114

08000c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return uwTick;
 8000c44:	4b03      	ldr	r3, [pc, #12]	@ (8000c54 <HAL_GetTick+0x14>)
 8000c46:	681b      	ldr	r3, [r3, #0]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000114 	.word	0x20000114

08000c58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c60:	f7ff ffee 	bl	8000c40 <HAL_GetTick>
 8000c64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c70:	d005      	beq.n	8000c7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c72:	4b0a      	ldr	r3, [pc, #40]	@ (8000c9c <HAL_Delay+0x44>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	461a      	mov	r2, r3
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c7e:	bf00      	nop
 8000c80:	f7ff ffde 	bl	8000c40 <HAL_GetTick>
 8000c84:	4602      	mov	r2, r0
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d8f7      	bhi.n	8000c80 <HAL_Delay+0x28>
  {
  }
}
 8000c90:	bf00      	nop
 8000c92:	bf00      	nop
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000008 	.word	0x20000008

08000ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ccc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd2:	4a04      	ldr	r2, [pc, #16]	@ (8000ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	60d3      	str	r3, [r2, #12]
}
 8000cd8:	bf00      	nop
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cec:	4b04      	ldr	r3, [pc, #16]	@ (8000d00 <__NVIC_GetPriorityGrouping+0x18>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	0a1b      	lsrs	r3, r3, #8
 8000cf2:	f003 0307 	and.w	r3, r3, #7
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	db0a      	blt.n	8000d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	490c      	ldr	r1, [pc, #48]	@ (8000d50 <__NVIC_SetPriority+0x4c>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	0112      	lsls	r2, r2, #4
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	440b      	add	r3, r1
 8000d28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d2c:	e00a      	b.n	8000d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4908      	ldr	r1, [pc, #32]	@ (8000d54 <__NVIC_SetPriority+0x50>)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	f003 030f 	and.w	r3, r3, #15
 8000d3a:	3b04      	subs	r3, #4
 8000d3c:	0112      	lsls	r2, r2, #4
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	440b      	add	r3, r1
 8000d42:	761a      	strb	r2, [r3, #24]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000e100 	.word	0xe000e100
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b089      	sub	sp, #36	@ 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f1c3 0307 	rsb	r3, r3, #7
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	bf28      	it	cs
 8000d76:	2304      	movcs	r3, #4
 8000d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	2b06      	cmp	r3, #6
 8000d80:	d902      	bls.n	8000d88 <NVIC_EncodePriority+0x30>
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3b03      	subs	r3, #3
 8000d86:	e000      	b.n	8000d8a <NVIC_EncodePriority+0x32>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43da      	mvns	r2, r3
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da0:	f04f 31ff 	mov.w	r1, #4294967295
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	43d9      	mvns	r1, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	4313      	orrs	r3, r2
         );
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3724      	adds	r7, #36	@ 0x24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dd0:	d301      	bcc.n	8000dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e00f      	b.n	8000df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e00 <SysTick_Config+0x40>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dde:	210f      	movs	r1, #15
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	f7ff ff8e 	bl	8000d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de8:	4b05      	ldr	r3, [pc, #20]	@ (8000e00 <SysTick_Config+0x40>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dee:	4b04      	ldr	r3, [pc, #16]	@ (8000e00 <SysTick_Config+0x40>)
 8000df0:	2207      	movs	r2, #7
 8000df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	e000e010 	.word	0xe000e010

08000e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff ff47 	bl	8000ca0 <__NVIC_SetPriorityGrouping>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
 8000e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2c:	f7ff ff5c 	bl	8000ce8 <__NVIC_GetPriorityGrouping>
 8000e30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	68b9      	ldr	r1, [r7, #8]
 8000e36:	6978      	ldr	r0, [r7, #20]
 8000e38:	f7ff ff8e 	bl	8000d58 <NVIC_EncodePriority>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff5d 	bl	8000d04 <__NVIC_SetPriority>
}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff ffb0 	bl	8000dc0 <SysTick_Config>
 8000e60:	4603      	mov	r3, r0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b087      	sub	sp, #28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e7a:	e17f      	b.n	800117c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	2101      	movs	r1, #1
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	fa01 f303 	lsl.w	r3, r1, r3
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f000 8171 	beq.w	8001176 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 0303 	and.w	r3, r3, #3
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d005      	beq.n	8000eac <HAL_GPIO_Init+0x40>
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d130      	bne.n	8000f0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	68da      	ldr	r2, [r3, #12]
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	091b      	lsrs	r3, r3, #4
 8000ef8:	f003 0201 	and.w	r2, r3, #1
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	2b03      	cmp	r3, #3
 8000f18:	d118      	bne.n	8000f4c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f20:	2201      	movs	r2, #1
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	08db      	lsrs	r3, r3, #3
 8000f36:	f003 0201 	and.w	r2, r3, #1
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d017      	beq.n	8000f88 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d123      	bne.n	8000fdc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	08da      	lsrs	r2, r3, #3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3208      	adds	r2, #8
 8000f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	220f      	movs	r2, #15
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	691a      	ldr	r2, [r3, #16]
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	08da      	lsrs	r2, r3, #3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3208      	adds	r2, #8
 8000fd6:	6939      	ldr	r1, [r7, #16]
 8000fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0203 	and.w	r2, r3, #3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001018:	2b00      	cmp	r3, #0
 800101a:	f000 80ac 	beq.w	8001176 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	4b5f      	ldr	r3, [pc, #380]	@ (800119c <HAL_GPIO_Init+0x330>)
 8001020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001022:	4a5e      	ldr	r2, [pc, #376]	@ (800119c <HAL_GPIO_Init+0x330>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6613      	str	r3, [r2, #96]	@ 0x60
 800102a:	4b5c      	ldr	r3, [pc, #368]	@ (800119c <HAL_GPIO_Init+0x330>)
 800102c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001036:	4a5a      	ldr	r2, [pc, #360]	@ (80011a0 <HAL_GPIO_Init+0x334>)
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	089b      	lsrs	r3, r3, #2
 800103c:	3302      	adds	r3, #2
 800103e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001042:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	220f      	movs	r2, #15
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4013      	ands	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001060:	d025      	beq.n	80010ae <HAL_GPIO_Init+0x242>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4f      	ldr	r2, [pc, #316]	@ (80011a4 <HAL_GPIO_Init+0x338>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d01f      	beq.n	80010aa <HAL_GPIO_Init+0x23e>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4e      	ldr	r2, [pc, #312]	@ (80011a8 <HAL_GPIO_Init+0x33c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d019      	beq.n	80010a6 <HAL_GPIO_Init+0x23a>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4d      	ldr	r2, [pc, #308]	@ (80011ac <HAL_GPIO_Init+0x340>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d013      	beq.n	80010a2 <HAL_GPIO_Init+0x236>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4c      	ldr	r2, [pc, #304]	@ (80011b0 <HAL_GPIO_Init+0x344>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d00d      	beq.n	800109e <HAL_GPIO_Init+0x232>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4b      	ldr	r2, [pc, #300]	@ (80011b4 <HAL_GPIO_Init+0x348>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d007      	beq.n	800109a <HAL_GPIO_Init+0x22e>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4a      	ldr	r2, [pc, #296]	@ (80011b8 <HAL_GPIO_Init+0x34c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d101      	bne.n	8001096 <HAL_GPIO_Init+0x22a>
 8001092:	2306      	movs	r3, #6
 8001094:	e00c      	b.n	80010b0 <HAL_GPIO_Init+0x244>
 8001096:	2307      	movs	r3, #7
 8001098:	e00a      	b.n	80010b0 <HAL_GPIO_Init+0x244>
 800109a:	2305      	movs	r3, #5
 800109c:	e008      	b.n	80010b0 <HAL_GPIO_Init+0x244>
 800109e:	2304      	movs	r3, #4
 80010a0:	e006      	b.n	80010b0 <HAL_GPIO_Init+0x244>
 80010a2:	2303      	movs	r3, #3
 80010a4:	e004      	b.n	80010b0 <HAL_GPIO_Init+0x244>
 80010a6:	2302      	movs	r3, #2
 80010a8:	e002      	b.n	80010b0 <HAL_GPIO_Init+0x244>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <HAL_GPIO_Init+0x244>
 80010ae:	2300      	movs	r3, #0
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	f002 0203 	and.w	r2, r2, #3
 80010b6:	0092      	lsls	r2, r2, #2
 80010b8:	4093      	lsls	r3, r2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010c0:	4937      	ldr	r1, [pc, #220]	@ (80011a0 <HAL_GPIO_Init+0x334>)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	3302      	adds	r3, #2
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010ce:	4b3b      	ldr	r3, [pc, #236]	@ (80011bc <HAL_GPIO_Init+0x350>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010f2:	4a32      	ldr	r2, [pc, #200]	@ (80011bc <HAL_GPIO_Init+0x350>)
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010f8:	4b30      	ldr	r3, [pc, #192]	@ (80011bc <HAL_GPIO_Init+0x350>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	43db      	mvns	r3, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800111c:	4a27      	ldr	r2, [pc, #156]	@ (80011bc <HAL_GPIO_Init+0x350>)
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001122:	4b26      	ldr	r3, [pc, #152]	@ (80011bc <HAL_GPIO_Init+0x350>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	43db      	mvns	r3, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4313      	orrs	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001146:	4a1d      	ldr	r2, [pc, #116]	@ (80011bc <HAL_GPIO_Init+0x350>)
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800114c:	4b1b      	ldr	r3, [pc, #108]	@ (80011bc <HAL_GPIO_Init+0x350>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	43db      	mvns	r3, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001170:	4a12      	ldr	r2, [pc, #72]	@ (80011bc <HAL_GPIO_Init+0x350>)
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	3301      	adds	r3, #1
 800117a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	fa22 f303 	lsr.w	r3, r2, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	f47f ae78 	bne.w	8000e7c <HAL_GPIO_Init+0x10>
  }
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	371c      	adds	r7, #28
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	40021000 	.word	0x40021000
 80011a0:	40010000 	.word	0x40010000
 80011a4:	48000400 	.word	0x48000400
 80011a8:	48000800 	.word	0x48000800
 80011ac:	48000c00 	.word	0x48000c00
 80011b0:	48001000 	.word	0x48001000
 80011b4:	48001400 	.word	0x48001400
 80011b8:	48001800 	.word	0x48001800
 80011bc:	40010400 	.word	0x40010400

080011c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
 80011cc:	4613      	mov	r3, r2
 80011ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011d0:	787b      	ldrb	r3, [r7, #1]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011d6:	887a      	ldrh	r2, [r7, #2]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011dc:	e002      	b.n	80011e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011de:	887a      	ldrh	r2, [r7, #2]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011f4:	4b04      	ldr	r3, [pc, #16]	@ (8001208 <HAL_PWREx_GetVoltageRange+0x18>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40007000 	.word	0x40007000

0800120c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800121a:	d130      	bne.n	800127e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800121c:	4b23      	ldr	r3, [pc, #140]	@ (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001224:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001228:	d038      	beq.n	800129c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800122a:	4b20      	ldr	r3, [pc, #128]	@ (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001232:	4a1e      	ldr	r2, [pc, #120]	@ (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001234:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001238:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800123a:	4b1d      	ldr	r3, [pc, #116]	@ (80012b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2232      	movs	r2, #50	@ 0x32
 8001240:	fb02 f303 	mul.w	r3, r2, r3
 8001244:	4a1b      	ldr	r2, [pc, #108]	@ (80012b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001246:	fba2 2303 	umull	r2, r3, r2, r3
 800124a:	0c9b      	lsrs	r3, r3, #18
 800124c:	3301      	adds	r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001250:	e002      	b.n	8001258 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	3b01      	subs	r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001258:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001260:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001264:	d102      	bne.n	800126c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1f2      	bne.n	8001252 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800126c:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001274:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001278:	d110      	bne.n	800129c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e00f      	b.n	800129e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800127e:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800128a:	d007      	beq.n	800129c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800128c:	4b07      	ldr	r3, [pc, #28]	@ (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001294:	4a05      	ldr	r2, [pc, #20]	@ (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001296:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800129a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40007000 	.word	0x40007000
 80012b0:	20000000 	.word	0x20000000
 80012b4:	431bde83 	.word	0x431bde83

080012b8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e3ca      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012ca:	4b97      	ldr	r3, [pc, #604]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012d4:	4b94      	ldr	r3, [pc, #592]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0310 	and.w	r3, r3, #16
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 80e4 	beq.w	80014b4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d007      	beq.n	8001302 <HAL_RCC_OscConfig+0x4a>
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	2b0c      	cmp	r3, #12
 80012f6:	f040 808b 	bne.w	8001410 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	f040 8087 	bne.w	8001410 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001302:	4b89      	ldr	r3, [pc, #548]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d005      	beq.n	800131a <HAL_RCC_OscConfig+0x62>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e3a2      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a1a      	ldr	r2, [r3, #32]
 800131e:	4b82      	ldr	r3, [pc, #520]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	2b00      	cmp	r3, #0
 8001328:	d004      	beq.n	8001334 <HAL_RCC_OscConfig+0x7c>
 800132a:	4b7f      	ldr	r3, [pc, #508]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001332:	e005      	b.n	8001340 <HAL_RCC_OscConfig+0x88>
 8001334:	4b7c      	ldr	r3, [pc, #496]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001336:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800133a:	091b      	lsrs	r3, r3, #4
 800133c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001340:	4293      	cmp	r3, r2
 8001342:	d223      	bcs.n	800138c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	4618      	mov	r0, r3
 800134a:	f000 fd55 	bl	8001df8 <RCC_SetFlashLatencyFromMSIRange>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e383      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001358:	4b73      	ldr	r3, [pc, #460]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a72      	ldr	r2, [pc, #456]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800135e:	f043 0308 	orr.w	r3, r3, #8
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	4b70      	ldr	r3, [pc, #448]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a1b      	ldr	r3, [r3, #32]
 8001370:	496d      	ldr	r1, [pc, #436]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001372:	4313      	orrs	r3, r2
 8001374:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001376:	4b6c      	ldr	r3, [pc, #432]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	4968      	ldr	r1, [pc, #416]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001386:	4313      	orrs	r3, r2
 8001388:	604b      	str	r3, [r1, #4]
 800138a:	e025      	b.n	80013d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800138c:	4b66      	ldr	r3, [pc, #408]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a65      	ldr	r2, [pc, #404]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001392:	f043 0308 	orr.w	r3, r3, #8
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b63      	ldr	r3, [pc, #396]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	4960      	ldr	r1, [pc, #384]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	495b      	ldr	r1, [pc, #364]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d109      	bne.n	80013d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 fd15 	bl	8001df8 <RCC_SetFlashLatencyFromMSIRange>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e343      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013d8:	f000 fc4a 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 80013dc:	4602      	mov	r2, r0
 80013de:	4b52      	ldr	r3, [pc, #328]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	091b      	lsrs	r3, r3, #4
 80013e4:	f003 030f 	and.w	r3, r3, #15
 80013e8:	4950      	ldr	r1, [pc, #320]	@ (800152c <HAL_RCC_OscConfig+0x274>)
 80013ea:	5ccb      	ldrb	r3, [r1, r3]
 80013ec:	f003 031f 	and.w	r3, r3, #31
 80013f0:	fa22 f303 	lsr.w	r3, r2, r3
 80013f4:	4a4e      	ldr	r2, [pc, #312]	@ (8001530 <HAL_RCC_OscConfig+0x278>)
 80013f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013f8:	4b4e      	ldr	r3, [pc, #312]	@ (8001534 <HAL_RCC_OscConfig+0x27c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fbcf 	bl	8000ba0 <HAL_InitTick>
 8001402:	4603      	mov	r3, r0
 8001404:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d052      	beq.n	80014b2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	e327      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d032      	beq.n	800147e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001418:	4b43      	ldr	r3, [pc, #268]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a42      	ldr	r2, [pc, #264]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001424:	f7ff fc0c 	bl	8000c40 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800142c:	f7ff fc08 	bl	8000c40 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e310      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800143e:	4b3a      	ldr	r3, [pc, #232]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800144a:	4b37      	ldr	r3, [pc, #220]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a36      	ldr	r2, [pc, #216]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001450:	f043 0308 	orr.w	r3, r3, #8
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	4b34      	ldr	r3, [pc, #208]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	4931      	ldr	r1, [pc, #196]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001464:	4313      	orrs	r3, r2
 8001466:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001468:	4b2f      	ldr	r3, [pc, #188]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	021b      	lsls	r3, r3, #8
 8001476:	492c      	ldr	r1, [pc, #176]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001478:	4313      	orrs	r3, r2
 800147a:	604b      	str	r3, [r1, #4]
 800147c:	e01a      	b.n	80014b4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800147e:	4b2a      	ldr	r3, [pc, #168]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a29      	ldr	r2, [pc, #164]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001484:	f023 0301 	bic.w	r3, r3, #1
 8001488:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800148a:	f7ff fbd9 	bl	8000c40 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001492:	f7ff fbd5 	bl	8000c40 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e2dd      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014a4:	4b20      	ldr	r3, [pc, #128]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1f0      	bne.n	8001492 <HAL_RCC_OscConfig+0x1da>
 80014b0:	e000      	b.n	80014b4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d074      	beq.n	80015aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	2b08      	cmp	r3, #8
 80014c4:	d005      	beq.n	80014d2 <HAL_RCC_OscConfig+0x21a>
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	2b0c      	cmp	r3, #12
 80014ca:	d10e      	bne.n	80014ea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	d10b      	bne.n	80014ea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d2:	4b15      	ldr	r3, [pc, #84]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d064      	beq.n	80015a8 <HAL_RCC_OscConfig+0x2f0>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d160      	bne.n	80015a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e2ba      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014f2:	d106      	bne.n	8001502 <HAL_RCC_OscConfig+0x24a>
 80014f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 80014fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	e026      	b.n	8001550 <HAL_RCC_OscConfig+0x298>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800150a:	d115      	bne.n	8001538 <HAL_RCC_OscConfig+0x280>
 800150c:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a05      	ldr	r2, [pc, #20]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001512:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	4b03      	ldr	r3, [pc, #12]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a02      	ldr	r2, [pc, #8]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800151e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	e014      	b.n	8001550 <HAL_RCC_OscConfig+0x298>
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000
 800152c:	08005194 	.word	0x08005194
 8001530:	20000000 	.word	0x20000000
 8001534:	20000004 	.word	0x20000004
 8001538:	4ba0      	ldr	r3, [pc, #640]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a9f      	ldr	r2, [pc, #636]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 800153e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	4b9d      	ldr	r3, [pc, #628]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a9c      	ldr	r2, [pc, #624]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 800154a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800154e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d013      	beq.n	8001580 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff fb72 	bl	8000c40 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001560:	f7ff fb6e 	bl	8000c40 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b64      	cmp	r3, #100	@ 0x64
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e276      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001572:	4b92      	ldr	r3, [pc, #584]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0x2a8>
 800157e:	e014      	b.n	80015aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff fb5e 	bl	8000c40 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001588:	f7ff fb5a 	bl	8000c40 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	@ 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e262      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800159a:	4b88      	ldr	r3, [pc, #544]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0x2d0>
 80015a6:	e000      	b.n	80015aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d060      	beq.n	8001678 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	2b04      	cmp	r3, #4
 80015ba:	d005      	beq.n	80015c8 <HAL_RCC_OscConfig+0x310>
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	2b0c      	cmp	r3, #12
 80015c0:	d119      	bne.n	80015f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d116      	bne.n	80015f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015c8:	4b7c      	ldr	r3, [pc, #496]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <HAL_RCC_OscConfig+0x328>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e23f      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e0:	4b76      	ldr	r3, [pc, #472]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	061b      	lsls	r3, r3, #24
 80015ee:	4973      	ldr	r1, [pc, #460]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015f4:	e040      	b.n	8001678 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d023      	beq.n	8001646 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015fe:	4b6f      	ldr	r3, [pc, #444]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a6e      	ldr	r2, [pc, #440]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001604:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160a:	f7ff fb19 	bl	8000c40 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001612:	f7ff fb15 	bl	8000c40 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e21d      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001624:	4b65      	ldr	r3, [pc, #404]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001630:	4b62      	ldr	r3, [pc, #392]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	061b      	lsls	r3, r3, #24
 800163e:	495f      	ldr	r1, [pc, #380]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
 8001644:	e018      	b.n	8001678 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001646:	4b5d      	ldr	r3, [pc, #372]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a5c      	ldr	r2, [pc, #368]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 800164c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001652:	f7ff faf5 	bl	8000c40 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800165a:	f7ff faf1 	bl	8000c40 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e1f9      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800166c:	4b53      	ldr	r3, [pc, #332]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f0      	bne.n	800165a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	2b00      	cmp	r3, #0
 8001682:	d03c      	beq.n	80016fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	695b      	ldr	r3, [r3, #20]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d01c      	beq.n	80016c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800168c:	4b4b      	ldr	r3, [pc, #300]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 800168e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001692:	4a4a      	ldr	r2, [pc, #296]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169c:	f7ff fad0 	bl	8000c40 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a4:	f7ff facc 	bl	8000c40 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e1d4      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016b6:	4b41      	ldr	r3, [pc, #260]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 80016b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0ef      	beq.n	80016a4 <HAL_RCC_OscConfig+0x3ec>
 80016c4:	e01b      	b.n	80016fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c6:	4b3d      	ldr	r3, [pc, #244]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 80016c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016cc:	4a3b      	ldr	r2, [pc, #236]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 80016ce:	f023 0301 	bic.w	r3, r3, #1
 80016d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d6:	f7ff fab3 	bl	8000c40 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016de:	f7ff faaf 	bl	8000c40 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e1b7      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016f0:	4b32      	ldr	r3, [pc, #200]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 80016f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1ef      	bne.n	80016de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 80a6 	beq.w	8001858 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800170c:	2300      	movs	r3, #0
 800170e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001710:	4b2a      	ldr	r3, [pc, #168]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d10d      	bne.n	8001738 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800171c:	4b27      	ldr	r3, [pc, #156]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 800171e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001720:	4a26      	ldr	r2, [pc, #152]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001726:	6593      	str	r3, [r2, #88]	@ 0x58
 8001728:	4b24      	ldr	r3, [pc, #144]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 800172a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800172c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001734:	2301      	movs	r3, #1
 8001736:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001738:	4b21      	ldr	r3, [pc, #132]	@ (80017c0 <HAL_RCC_OscConfig+0x508>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001740:	2b00      	cmp	r3, #0
 8001742:	d118      	bne.n	8001776 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001744:	4b1e      	ldr	r3, [pc, #120]	@ (80017c0 <HAL_RCC_OscConfig+0x508>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a1d      	ldr	r2, [pc, #116]	@ (80017c0 <HAL_RCC_OscConfig+0x508>)
 800174a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800174e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001750:	f7ff fa76 	bl	8000c40 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001758:	f7ff fa72 	bl	8000c40 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e17a      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800176a:	4b15      	ldr	r3, [pc, #84]	@ (80017c0 <HAL_RCC_OscConfig+0x508>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d108      	bne.n	8001790 <HAL_RCC_OscConfig+0x4d8>
 800177e:	4b0f      	ldr	r3, [pc, #60]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001784:	4a0d      	ldr	r2, [pc, #52]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800178e:	e029      	b.n	80017e4 <HAL_RCC_OscConfig+0x52c>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2b05      	cmp	r3, #5
 8001796:	d115      	bne.n	80017c4 <HAL_RCC_OscConfig+0x50c>
 8001798:	4b08      	ldr	r3, [pc, #32]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 800179a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800179e:	4a07      	ldr	r2, [pc, #28]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017a8:	4b04      	ldr	r3, [pc, #16]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 80017aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ae:	4a03      	ldr	r2, [pc, #12]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017b8:	e014      	b.n	80017e4 <HAL_RCC_OscConfig+0x52c>
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40007000 	.word	0x40007000
 80017c4:	4b9c      	ldr	r3, [pc, #624]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80017c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ca:	4a9b      	ldr	r2, [pc, #620]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80017cc:	f023 0301 	bic.w	r3, r3, #1
 80017d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017d4:	4b98      	ldr	r3, [pc, #608]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80017d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017da:	4a97      	ldr	r2, [pc, #604]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80017dc:	f023 0304 	bic.w	r3, r3, #4
 80017e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d016      	beq.n	800181a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ec:	f7ff fa28 	bl	8000c40 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017f2:	e00a      	b.n	800180a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f4:	f7ff fa24 	bl	8000c40 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001802:	4293      	cmp	r3, r2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e12a      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800180a:	4b8b      	ldr	r3, [pc, #556]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 800180c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d0ed      	beq.n	80017f4 <HAL_RCC_OscConfig+0x53c>
 8001818:	e015      	b.n	8001846 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181a:	f7ff fa11 	bl	8000c40 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001820:	e00a      	b.n	8001838 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001822:	f7ff fa0d 	bl	8000c40 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001830:	4293      	cmp	r3, r2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e113      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001838:	4b7f      	ldr	r3, [pc, #508]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 800183a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1ed      	bne.n	8001822 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001846:	7ffb      	ldrb	r3, [r7, #31]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d105      	bne.n	8001858 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800184c:	4b7a      	ldr	r3, [pc, #488]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 800184e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001850:	4a79      	ldr	r2, [pc, #484]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 8001852:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001856:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 80fe 	beq.w	8001a5e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001866:	2b02      	cmp	r3, #2
 8001868:	f040 80d0 	bne.w	8001a0c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800186c:	4b72      	ldr	r3, [pc, #456]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f003 0203 	and.w	r2, r3, #3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800187c:	429a      	cmp	r2, r3
 800187e:	d130      	bne.n	80018e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	3b01      	subs	r3, #1
 800188c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800188e:	429a      	cmp	r2, r3
 8001890:	d127      	bne.n	80018e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800189c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800189e:	429a      	cmp	r2, r3
 80018a0:	d11f      	bne.n	80018e2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80018ac:	2a07      	cmp	r2, #7
 80018ae:	bf14      	ite	ne
 80018b0:	2201      	movne	r2, #1
 80018b2:	2200      	moveq	r2, #0
 80018b4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d113      	bne.n	80018e2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018c4:	085b      	lsrs	r3, r3, #1
 80018c6:	3b01      	subs	r3, #1
 80018c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d109      	bne.n	80018e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d8:	085b      	lsrs	r3, r3, #1
 80018da:	3b01      	subs	r3, #1
 80018dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d06e      	beq.n	80019c0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	2b0c      	cmp	r3, #12
 80018e6:	d069      	beq.n	80019bc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018e8:	4b53      	ldr	r3, [pc, #332]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d105      	bne.n	8001900 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018f4:	4b50      	ldr	r3, [pc, #320]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e0ad      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001904:	4b4c      	ldr	r3, [pc, #304]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a4b      	ldr	r2, [pc, #300]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 800190a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800190e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001910:	f7ff f996 	bl	8000c40 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001918:	f7ff f992 	bl	8000c40 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e09a      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800192a:	4b43      	ldr	r3, [pc, #268]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001936:	4b40      	ldr	r3, [pc, #256]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	4b40      	ldr	r3, [pc, #256]	@ (8001a3c <HAL_RCC_OscConfig+0x784>)
 800193c:	4013      	ands	r3, r2
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001946:	3a01      	subs	r2, #1
 8001948:	0112      	lsls	r2, r2, #4
 800194a:	4311      	orrs	r1, r2
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001950:	0212      	lsls	r2, r2, #8
 8001952:	4311      	orrs	r1, r2
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001958:	0852      	lsrs	r2, r2, #1
 800195a:	3a01      	subs	r2, #1
 800195c:	0552      	lsls	r2, r2, #21
 800195e:	4311      	orrs	r1, r2
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001964:	0852      	lsrs	r2, r2, #1
 8001966:	3a01      	subs	r2, #1
 8001968:	0652      	lsls	r2, r2, #25
 800196a:	4311      	orrs	r1, r2
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001970:	0912      	lsrs	r2, r2, #4
 8001972:	0452      	lsls	r2, r2, #17
 8001974:	430a      	orrs	r2, r1
 8001976:	4930      	ldr	r1, [pc, #192]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 8001978:	4313      	orrs	r3, r2
 800197a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800197c:	4b2e      	ldr	r3, [pc, #184]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a2d      	ldr	r2, [pc, #180]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 8001982:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001986:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001988:	4b2b      	ldr	r3, [pc, #172]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	4a2a      	ldr	r2, [pc, #168]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 800198e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001992:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001994:	f7ff f954 	bl	8000c40 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199c:	f7ff f950 	bl	8000c40 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e058      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ae:	4b22      	ldr	r3, [pc, #136]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ba:	e050      	b.n	8001a5e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e04f      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d148      	bne.n	8001a5e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a19      	ldr	r2, [pc, #100]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80019d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019d8:	4b17      	ldr	r3, [pc, #92]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	4a16      	ldr	r2, [pc, #88]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80019de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019e4:	f7ff f92c 	bl	8000c40 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ec:	f7ff f928 	bl	8000c40 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e030      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0x734>
 8001a0a:	e028      	b.n	8001a5e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	2b0c      	cmp	r3, #12
 8001a10:	d023      	beq.n	8001a5a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a12:	4b09      	ldr	r3, [pc, #36]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a08      	ldr	r2, [pc, #32]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 8001a18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1e:	f7ff f90f 	bl	8000c40 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a24:	e00c      	b.n	8001a40 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a26:	f7ff f90b 	bl	8000c40 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d905      	bls.n	8001a40 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e013      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a40:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <HAL_RCC_OscConfig+0x7b0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1ec      	bne.n	8001a26 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a4c:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <HAL_RCC_OscConfig+0x7b0>)
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	4905      	ldr	r1, [pc, #20]	@ (8001a68 <HAL_RCC_OscConfig+0x7b0>)
 8001a52:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <HAL_RCC_OscConfig+0x7b4>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	60cb      	str	r3, [r1, #12]
 8001a58:	e001      	b.n	8001a5e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3720      	adds	r7, #32
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	feeefffc 	.word	0xfeeefffc

08001a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0e7      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a84:	4b75      	ldr	r3, [pc, #468]	@ (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d910      	bls.n	8001ab4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a92:	4b72      	ldr	r3, [pc, #456]	@ (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 0207 	bic.w	r2, r3, #7
 8001a9a:	4970      	ldr	r1, [pc, #448]	@ (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa2:	4b6e      	ldr	r3, [pc, #440]	@ (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d001      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0cf      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d010      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	4b66      	ldr	r3, [pc, #408]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d908      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad0:	4b63      	ldr	r3, [pc, #396]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	4960      	ldr	r1, [pc, #384]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d04c      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d107      	bne.n	8001b06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af6:	4b5a      	ldr	r3, [pc, #360]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d121      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e0a6      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d107      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b0e:	4b54      	ldr	r3, [pc, #336]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d115      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e09a      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d107      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b26:	4b4e      	ldr	r3, [pc, #312]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d109      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e08e      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b36:	4b4a      	ldr	r3, [pc, #296]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e086      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b46:	4b46      	ldr	r3, [pc, #280]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f023 0203 	bic.w	r2, r3, #3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	4943      	ldr	r1, [pc, #268]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b58:	f7ff f872 	bl	8000c40 <HAL_GetTick>
 8001b5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5e:	e00a      	b.n	8001b76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b60:	f7ff f86e 	bl	8000c40 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e06e      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b76:	4b3a      	ldr	r3, [pc, #232]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 020c 	and.w	r2, r3, #12
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d1eb      	bne.n	8001b60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d010      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	4b31      	ldr	r3, [pc, #196]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d208      	bcs.n	8001bb6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba4:	4b2e      	ldr	r3, [pc, #184]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	492b      	ldr	r1, [pc, #172]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb6:	4b29      	ldr	r3, [pc, #164]	@ (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d210      	bcs.n	8001be6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc4:	4b25      	ldr	r3, [pc, #148]	@ (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f023 0207 	bic.w	r2, r3, #7
 8001bcc:	4923      	ldr	r1, [pc, #140]	@ (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd4:	4b21      	ldr	r3, [pc, #132]	@ (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d001      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e036      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d008      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	4918      	ldr	r1, [pc, #96]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d009      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c10:	4b13      	ldr	r3, [pc, #76]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4910      	ldr	r1, [pc, #64]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c24:	f000 f824 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	091b      	lsrs	r3, r3, #4
 8001c30:	f003 030f 	and.w	r3, r3, #15
 8001c34:	490b      	ldr	r1, [pc, #44]	@ (8001c64 <HAL_RCC_ClockConfig+0x1f4>)
 8001c36:	5ccb      	ldrb	r3, [r1, r3]
 8001c38:	f003 031f 	and.w	r3, r3, #31
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c40:	4a09      	ldr	r2, [pc, #36]	@ (8001c68 <HAL_RCC_ClockConfig+0x1f8>)
 8001c42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c44:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <HAL_RCC_ClockConfig+0x1fc>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe ffa9 	bl	8000ba0 <HAL_InitTick>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c52:	7afb      	ldrb	r3, [r7, #11]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40022000 	.word	0x40022000
 8001c60:	40021000 	.word	0x40021000
 8001c64:	08005194 	.word	0x08005194
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	20000004 	.word	0x20000004

08001c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	@ 0x24
 8001c74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c7e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c88:	4b3b      	ldr	r3, [pc, #236]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x34>
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	2b0c      	cmp	r3, #12
 8001c9c:	d121      	bne.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d11e      	bne.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ca4:	4b34      	ldr	r3, [pc, #208]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d107      	bne.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cb0:	4b31      	ldr	r3, [pc, #196]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cb6:	0a1b      	lsrs	r3, r3, #8
 8001cb8:	f003 030f 	and.w	r3, r3, #15
 8001cbc:	61fb      	str	r3, [r7, #28]
 8001cbe:	e005      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cc0:	4b2d      	ldr	r3, [pc, #180]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ccc:	4a2b      	ldr	r2, [pc, #172]	@ (8001d7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d10d      	bne.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ce0:	e00a      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	d102      	bne.n	8001cee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ce8:	4b25      	ldr	r3, [pc, #148]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cea:	61bb      	str	r3, [r7, #24]
 8001cec:	e004      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d101      	bne.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cf4:	4b23      	ldr	r3, [pc, #140]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cf6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	2b0c      	cmp	r3, #12
 8001cfc:	d134      	bne.n	8001d68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d003      	beq.n	8001d16 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	2b03      	cmp	r3, #3
 8001d12:	d003      	beq.n	8001d1c <HAL_RCC_GetSysClockFreq+0xac>
 8001d14:	e005      	b.n	8001d22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d16:	4b1a      	ldr	r3, [pc, #104]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d18:	617b      	str	r3, [r7, #20]
      break;
 8001d1a:	e005      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d1c:	4b19      	ldr	r3, [pc, #100]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d1e:	617b      	str	r3, [r7, #20]
      break;
 8001d20:	e002      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	617b      	str	r3, [r7, #20]
      break;
 8001d26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d28:	4b13      	ldr	r3, [pc, #76]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	091b      	lsrs	r3, r3, #4
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	3301      	adds	r3, #1
 8001d34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d36:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	0a1b      	lsrs	r3, r3, #8
 8001d3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	fb03 f202 	mul.w	r2, r3, r2
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	0e5b      	lsrs	r3, r3, #25
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	3301      	adds	r3, #1
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d68:	69bb      	ldr	r3, [r7, #24]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3724      	adds	r7, #36	@ 0x24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	080051ac 	.word	0x080051ac
 8001d80:	00f42400 	.word	0x00f42400
 8001d84:	007a1200 	.word	0x007a1200

08001d88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d8c:	4b03      	ldr	r3, [pc, #12]	@ (8001d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000000 	.word	0x20000000

08001da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001da4:	f7ff fff0 	bl	8001d88 <HAL_RCC_GetHCLKFreq>
 8001da8:	4602      	mov	r2, r0
 8001daa:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	0a1b      	lsrs	r3, r3, #8
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	4904      	ldr	r1, [pc, #16]	@ (8001dc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001db6:	5ccb      	ldrb	r3, [r1, r3]
 8001db8:	f003 031f 	and.w	r3, r3, #31
 8001dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	080051a4 	.word	0x080051a4

08001dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001dd0:	f7ff ffda 	bl	8001d88 <HAL_RCC_GetHCLKFreq>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	0adb      	lsrs	r3, r3, #11
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	4904      	ldr	r1, [pc, #16]	@ (8001df4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001de2:	5ccb      	ldrb	r3, [r1, r3]
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40021000 	.word	0x40021000
 8001df4:	080051a4 	.word	0x080051a4

08001df8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e00:	2300      	movs	r3, #0
 8001e02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e04:	4b2a      	ldr	r3, [pc, #168]	@ (8001eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e10:	f7ff f9ee 	bl	80011f0 <HAL_PWREx_GetVoltageRange>
 8001e14:	6178      	str	r0, [r7, #20]
 8001e16:	e014      	b.n	8001e42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e18:	4b25      	ldr	r3, [pc, #148]	@ (8001eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e1c:	4a24      	ldr	r2, [pc, #144]	@ (8001eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e22:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e24:	4b22      	ldr	r3, [pc, #136]	@ (8001eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e30:	f7ff f9de 	bl	80011f0 <HAL_PWREx_GetVoltageRange>
 8001e34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e36:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3a:	4a1d      	ldr	r2, [pc, #116]	@ (8001eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e40:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e48:	d10b      	bne.n	8001e62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b80      	cmp	r3, #128	@ 0x80
 8001e4e:	d919      	bls.n	8001e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e54:	d902      	bls.n	8001e5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e56:	2302      	movs	r3, #2
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	e013      	b.n	8001e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	e010      	b.n	8001e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b80      	cmp	r3, #128	@ 0x80
 8001e66:	d902      	bls.n	8001e6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e68:	2303      	movs	r3, #3
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	e00a      	b.n	8001e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b80      	cmp	r3, #128	@ 0x80
 8001e72:	d102      	bne.n	8001e7a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e74:	2302      	movs	r3, #2
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	e004      	b.n	8001e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b70      	cmp	r3, #112	@ 0x70
 8001e7e:	d101      	bne.n	8001e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e80:	2301      	movs	r3, #1
 8001e82:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e84:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f023 0207 	bic.w	r2, r3, #7
 8001e8c:	4909      	ldr	r1, [pc, #36]	@ (8001eb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e94:	4b07      	ldr	r3, [pc, #28]	@ (8001eb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d001      	beq.n	8001ea6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40022000 	.word	0x40022000

08001eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d041      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ed8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001edc:	d02a      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001ede:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001ee2:	d824      	bhi.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ee4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001ee8:	d008      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001eea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001eee:	d81e      	bhi.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00a      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001ef4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ef8:	d010      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001efa:	e018      	b.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001efc:	4b86      	ldr	r3, [pc, #536]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	4a85      	ldr	r2, [pc, #532]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f06:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f08:	e015      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f000 fabb 	bl	800248c <RCCEx_PLLSAI1_Config>
 8001f16:	4603      	mov	r3, r0
 8001f18:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f1a:	e00c      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3320      	adds	r3, #32
 8001f20:	2100      	movs	r1, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 fba6 	bl	8002674 <RCCEx_PLLSAI2_Config>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f2c:	e003      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	74fb      	strb	r3, [r7, #19]
      break;
 8001f32:	e000      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f36:	7cfb      	ldrb	r3, [r7, #19]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10b      	bne.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f3c:	4b76      	ldr	r3, [pc, #472]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f42:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f4a:	4973      	ldr	r1, [pc, #460]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f52:	e001      	b.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f54:	7cfb      	ldrb	r3, [r7, #19]
 8001f56:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d041      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f68:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f6c:	d02a      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f6e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f72:	d824      	bhi.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f78:	d008      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f7e:	d81e      	bhi.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00a      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f88:	d010      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f8a:	e018      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f8c:	4b62      	ldr	r3, [pc, #392]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	4a61      	ldr	r2, [pc, #388]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f96:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f98:	e015      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 fa73 	bl	800248c <RCCEx_PLLSAI1_Config>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001faa:	e00c      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3320      	adds	r3, #32
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 fb5e 	bl	8002674 <RCCEx_PLLSAI2_Config>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fbc:	e003      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	74fb      	strb	r3, [r7, #19]
      break;
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fc6:	7cfb      	ldrb	r3, [r7, #19]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10b      	bne.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fcc:	4b52      	ldr	r3, [pc, #328]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fd2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fda:	494f      	ldr	r1, [pc, #316]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001fe2:	e001      	b.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fe4:	7cfb      	ldrb	r3, [r7, #19]
 8001fe6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 80a0 	beq.w	8002136 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ffa:	4b47      	ldr	r3, [pc, #284]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800200a:	2300      	movs	r3, #0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00d      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002010:	4b41      	ldr	r3, [pc, #260]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002014:	4a40      	ldr	r2, [pc, #256]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002016:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800201a:	6593      	str	r3, [r2, #88]	@ 0x58
 800201c:	4b3e      	ldr	r3, [pc, #248]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800201e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002020:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002028:	2301      	movs	r3, #1
 800202a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800202c:	4b3b      	ldr	r3, [pc, #236]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a3a      	ldr	r2, [pc, #232]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002032:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002036:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002038:	f7fe fe02 	bl	8000c40 <HAL_GetTick>
 800203c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800203e:	e009      	b.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002040:	f7fe fdfe 	bl	8000c40 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d902      	bls.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	74fb      	strb	r3, [r7, #19]
        break;
 8002052:	e005      	b.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002054:	4b31      	ldr	r3, [pc, #196]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0ef      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002060:	7cfb      	ldrb	r3, [r7, #19]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d15c      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002066:	4b2c      	ldr	r3, [pc, #176]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800206c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002070:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d01f      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	429a      	cmp	r2, r3
 8002082:	d019      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002084:	4b24      	ldr	r3, [pc, #144]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800208a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800208e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002090:	4b21      	ldr	r3, [pc, #132]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002096:	4a20      	ldr	r2, [pc, #128]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002098:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800209c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020b0:	4a19      	ldr	r2, [pc, #100]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d016      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c2:	f7fe fdbd 	bl	8000c40 <HAL_GetTick>
 80020c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c8:	e00b      	b.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ca:	f7fe fdb9 	bl	8000c40 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020d8:	4293      	cmp	r3, r2
 80020da:	d902      	bls.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	74fb      	strb	r3, [r7, #19]
            break;
 80020e0:	e006      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0ec      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80020f0:	7cfb      	ldrb	r3, [r7, #19]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10c      	bne.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020f6:	4b08      	ldr	r3, [pc, #32]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002106:	4904      	ldr	r1, [pc, #16]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002108:	4313      	orrs	r3, r2
 800210a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800210e:	e009      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002110:	7cfb      	ldrb	r3, [r7, #19]
 8002112:	74bb      	strb	r3, [r7, #18]
 8002114:	e006      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002120:	7cfb      	ldrb	r3, [r7, #19]
 8002122:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002124:	7c7b      	ldrb	r3, [r7, #17]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d105      	bne.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800212a:	4b9e      	ldr	r3, [pc, #632]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800212c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212e:	4a9d      	ldr	r2, [pc, #628]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002130:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002134:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00a      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002142:	4b98      	ldr	r3, [pc, #608]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002148:	f023 0203 	bic.w	r2, r3, #3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002150:	4994      	ldr	r1, [pc, #592]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002152:	4313      	orrs	r3, r2
 8002154:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00a      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002164:	4b8f      	ldr	r3, [pc, #572]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800216a:	f023 020c 	bic.w	r2, r3, #12
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002172:	498c      	ldr	r1, [pc, #560]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002174:	4313      	orrs	r3, r2
 8002176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00a      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002186:	4b87      	ldr	r3, [pc, #540]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800218c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002194:	4983      	ldr	r1, [pc, #524]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002196:	4313      	orrs	r3, r2
 8002198:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00a      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021a8:	4b7e      	ldr	r3, [pc, #504]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b6:	497b      	ldr	r1, [pc, #492]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00a      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021ca:	4b76      	ldr	r3, [pc, #472]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021d8:	4972      	ldr	r1, [pc, #456]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0320 	and.w	r3, r3, #32
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00a      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021ec:	4b6d      	ldr	r3, [pc, #436]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021fa:	496a      	ldr	r1, [pc, #424]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00a      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800220e:	4b65      	ldr	r3, [pc, #404]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002214:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800221c:	4961      	ldr	r1, [pc, #388]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221e:	4313      	orrs	r3, r2
 8002220:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00a      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002230:	4b5c      	ldr	r3, [pc, #368]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002236:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800223e:	4959      	ldr	r1, [pc, #356]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00a      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002252:	4b54      	ldr	r3, [pc, #336]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002258:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002260:	4950      	ldr	r1, [pc, #320]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002262:	4313      	orrs	r3, r2
 8002264:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00a      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002274:	4b4b      	ldr	r3, [pc, #300]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800227a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002282:	4948      	ldr	r1, [pc, #288]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00a      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002296:	4b43      	ldr	r3, [pc, #268]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a4:	493f      	ldr	r1, [pc, #252]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d028      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022b8:	4b3a      	ldr	r3, [pc, #232]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022c6:	4937      	ldr	r1, [pc, #220]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022d6:	d106      	bne.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022d8:	4b32      	ldr	r3, [pc, #200]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4a31      	ldr	r2, [pc, #196]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022e2:	60d3      	str	r3, [r2, #12]
 80022e4:	e011      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022ee:	d10c      	bne.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3304      	adds	r3, #4
 80022f4:	2101      	movs	r1, #1
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f8c8 	bl	800248c <RCCEx_PLLSAI1_Config>
 80022fc:	4603      	mov	r3, r0
 80022fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002300:	7cfb      	ldrb	r3, [r7, #19]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002306:	7cfb      	ldrb	r3, [r7, #19]
 8002308:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d028      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002316:	4b23      	ldr	r3, [pc, #140]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800231c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002324:	491f      	ldr	r1, [pc, #124]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002330:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002334:	d106      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002336:	4b1b      	ldr	r3, [pc, #108]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	4a1a      	ldr	r2, [pc, #104]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002340:	60d3      	str	r3, [r2, #12]
 8002342:	e011      	b.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002348:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800234c:	d10c      	bne.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3304      	adds	r3, #4
 8002352:	2101      	movs	r1, #1
 8002354:	4618      	mov	r0, r3
 8002356:	f000 f899 	bl	800248c <RCCEx_PLLSAI1_Config>
 800235a:	4603      	mov	r3, r0
 800235c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800235e:	7cfb      	ldrb	r3, [r7, #19]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002364:	7cfb      	ldrb	r3, [r7, #19]
 8002366:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d02b      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002374:	4b0b      	ldr	r3, [pc, #44]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800237a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002382:	4908      	ldr	r1, [pc, #32]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800238e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002392:	d109      	bne.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002394:	4b03      	ldr	r3, [pc, #12]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	4a02      	ldr	r2, [pc, #8]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800239e:	60d3      	str	r3, [r2, #12]
 80023a0:	e014      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80023a2:	bf00      	nop
 80023a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023b0:	d10c      	bne.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3304      	adds	r3, #4
 80023b6:	2101      	movs	r1, #1
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 f867 	bl	800248c <RCCEx_PLLSAI1_Config>
 80023be:	4603      	mov	r3, r0
 80023c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023c2:	7cfb      	ldrb	r3, [r7, #19]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80023c8:	7cfb      	ldrb	r3, [r7, #19]
 80023ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d02f      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023e6:	4928      	ldr	r1, [pc, #160]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023f6:	d10d      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3304      	adds	r3, #4
 80023fc:	2102      	movs	r1, #2
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 f844 	bl	800248c <RCCEx_PLLSAI1_Config>
 8002404:	4603      	mov	r3, r0
 8002406:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002408:	7cfb      	ldrb	r3, [r7, #19]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d014      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800240e:	7cfb      	ldrb	r3, [r7, #19]
 8002410:	74bb      	strb	r3, [r7, #18]
 8002412:	e011      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002418:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800241c:	d10c      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3320      	adds	r3, #32
 8002422:	2102      	movs	r1, #2
 8002424:	4618      	mov	r0, r3
 8002426:	f000 f925 	bl	8002674 <RCCEx_PLLSAI2_Config>
 800242a:	4603      	mov	r3, r0
 800242c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800242e:	7cfb      	ldrb	r3, [r7, #19]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002434:	7cfb      	ldrb	r3, [r7, #19]
 8002436:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00a      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002444:	4b10      	ldr	r3, [pc, #64]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800244a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002452:	490d      	ldr	r1, [pc, #52]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00b      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002466:	4b08      	ldr	r3, [pc, #32]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800246c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002476:	4904      	ldr	r1, [pc, #16]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800247e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40021000 	.word	0x40021000

0800248c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800249a:	4b75      	ldr	r3, [pc, #468]	@ (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d018      	beq.n	80024d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024a6:	4b72      	ldr	r3, [pc, #456]	@ (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f003 0203 	and.w	r2, r3, #3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d10d      	bne.n	80024d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
       ||
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d009      	beq.n	80024d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024be:	4b6c      	ldr	r3, [pc, #432]	@ (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	091b      	lsrs	r3, r3, #4
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
       ||
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d047      	beq.n	8002562 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	73fb      	strb	r3, [r7, #15]
 80024d6:	e044      	b.n	8002562 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d018      	beq.n	8002512 <RCCEx_PLLSAI1_Config+0x86>
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d825      	bhi.n	8002530 <RCCEx_PLLSAI1_Config+0xa4>
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d002      	beq.n	80024ee <RCCEx_PLLSAI1_Config+0x62>
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d009      	beq.n	8002500 <RCCEx_PLLSAI1_Config+0x74>
 80024ec:	e020      	b.n	8002530 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024ee:	4b60      	ldr	r3, [pc, #384]	@ (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d11d      	bne.n	8002536 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024fe:	e01a      	b.n	8002536 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002500:	4b5b      	ldr	r3, [pc, #364]	@ (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002508:	2b00      	cmp	r3, #0
 800250a:	d116      	bne.n	800253a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002510:	e013      	b.n	800253a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002512:	4b57      	ldr	r3, [pc, #348]	@ (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10f      	bne.n	800253e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800251e:	4b54      	ldr	r3, [pc, #336]	@ (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d109      	bne.n	800253e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800252e:	e006      	b.n	800253e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	73fb      	strb	r3, [r7, #15]
      break;
 8002534:	e004      	b.n	8002540 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002536:	bf00      	nop
 8002538:	e002      	b.n	8002540 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800253a:	bf00      	nop
 800253c:	e000      	b.n	8002540 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800253e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10d      	bne.n	8002562 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002546:	4b4a      	ldr	r3, [pc, #296]	@ (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6819      	ldr	r1, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	3b01      	subs	r3, #1
 8002558:	011b      	lsls	r3, r3, #4
 800255a:	430b      	orrs	r3, r1
 800255c:	4944      	ldr	r1, [pc, #272]	@ (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 800255e:	4313      	orrs	r3, r2
 8002560:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002562:	7bfb      	ldrb	r3, [r7, #15]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d17d      	bne.n	8002664 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002568:	4b41      	ldr	r3, [pc, #260]	@ (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a40      	ldr	r2, [pc, #256]	@ (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 800256e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002572:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002574:	f7fe fb64 	bl	8000c40 <HAL_GetTick>
 8002578:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800257a:	e009      	b.n	8002590 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800257c:	f7fe fb60 	bl	8000c40 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d902      	bls.n	8002590 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	73fb      	strb	r3, [r7, #15]
        break;
 800258e:	e005      	b.n	800259c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002590:	4b37      	ldr	r3, [pc, #220]	@ (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1ef      	bne.n	800257c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d160      	bne.n	8002664 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d111      	bne.n	80025cc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025a8:	4b31      	ldr	r3, [pc, #196]	@ (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80025b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6892      	ldr	r2, [r2, #8]
 80025b8:	0211      	lsls	r1, r2, #8
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	68d2      	ldr	r2, [r2, #12]
 80025be:	0912      	lsrs	r2, r2, #4
 80025c0:	0452      	lsls	r2, r2, #17
 80025c2:	430a      	orrs	r2, r1
 80025c4:	492a      	ldr	r1, [pc, #168]	@ (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	610b      	str	r3, [r1, #16]
 80025ca:	e027      	b.n	800261c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d112      	bne.n	80025f8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025d2:	4b27      	ldr	r3, [pc, #156]	@ (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80025da:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6892      	ldr	r2, [r2, #8]
 80025e2:	0211      	lsls	r1, r2, #8
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6912      	ldr	r2, [r2, #16]
 80025e8:	0852      	lsrs	r2, r2, #1
 80025ea:	3a01      	subs	r2, #1
 80025ec:	0552      	lsls	r2, r2, #21
 80025ee:	430a      	orrs	r2, r1
 80025f0:	491f      	ldr	r1, [pc, #124]	@ (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	610b      	str	r3, [r1, #16]
 80025f6:	e011      	b.n	800261c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002600:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6892      	ldr	r2, [r2, #8]
 8002608:	0211      	lsls	r1, r2, #8
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6952      	ldr	r2, [r2, #20]
 800260e:	0852      	lsrs	r2, r2, #1
 8002610:	3a01      	subs	r2, #1
 8002612:	0652      	lsls	r2, r2, #25
 8002614:	430a      	orrs	r2, r1
 8002616:	4916      	ldr	r1, [pc, #88]	@ (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002618:	4313      	orrs	r3, r2
 800261a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800261c:	4b14      	ldr	r3, [pc, #80]	@ (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a13      	ldr	r2, [pc, #76]	@ (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002622:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002626:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002628:	f7fe fb0a 	bl	8000c40 <HAL_GetTick>
 800262c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800262e:	e009      	b.n	8002644 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002630:	f7fe fb06 	bl	8000c40 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d902      	bls.n	8002644 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	73fb      	strb	r3, [r7, #15]
          break;
 8002642:	e005      	b.n	8002650 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002644:	4b0a      	ldr	r3, [pc, #40]	@ (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0ef      	beq.n	8002630 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d106      	bne.n	8002664 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002656:	4b06      	ldr	r3, [pc, #24]	@ (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	4904      	ldr	r1, [pc, #16]	@ (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002660:	4313      	orrs	r3, r2
 8002662:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002664:	7bfb      	ldrb	r3, [r7, #15]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40021000 	.word	0x40021000

08002674 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002682:	4b6a      	ldr	r3, [pc, #424]	@ (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d018      	beq.n	80026c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800268e:	4b67      	ldr	r3, [pc, #412]	@ (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f003 0203 	and.w	r2, r3, #3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d10d      	bne.n	80026ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
       ||
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d009      	beq.n	80026ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026a6:	4b61      	ldr	r3, [pc, #388]	@ (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	091b      	lsrs	r3, r3, #4
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
       ||
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d047      	beq.n	800274a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	73fb      	strb	r3, [r7, #15]
 80026be:	e044      	b.n	800274a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d018      	beq.n	80026fa <RCCEx_PLLSAI2_Config+0x86>
 80026c8:	2b03      	cmp	r3, #3
 80026ca:	d825      	bhi.n	8002718 <RCCEx_PLLSAI2_Config+0xa4>
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d002      	beq.n	80026d6 <RCCEx_PLLSAI2_Config+0x62>
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d009      	beq.n	80026e8 <RCCEx_PLLSAI2_Config+0x74>
 80026d4:	e020      	b.n	8002718 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026d6:	4b55      	ldr	r3, [pc, #340]	@ (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d11d      	bne.n	800271e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026e6:	e01a      	b.n	800271e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026e8:	4b50      	ldr	r3, [pc, #320]	@ (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d116      	bne.n	8002722 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026f8:	e013      	b.n	8002722 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026fa:	4b4c      	ldr	r3, [pc, #304]	@ (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10f      	bne.n	8002726 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002706:	4b49      	ldr	r3, [pc, #292]	@ (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d109      	bne.n	8002726 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002716:	e006      	b.n	8002726 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
      break;
 800271c:	e004      	b.n	8002728 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800271e:	bf00      	nop
 8002720:	e002      	b.n	8002728 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002722:	bf00      	nop
 8002724:	e000      	b.n	8002728 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002726:	bf00      	nop
    }

    if(status == HAL_OK)
 8002728:	7bfb      	ldrb	r3, [r7, #15]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10d      	bne.n	800274a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800272e:	4b3f      	ldr	r3, [pc, #252]	@ (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6819      	ldr	r1, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	3b01      	subs	r3, #1
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	430b      	orrs	r3, r1
 8002744:	4939      	ldr	r1, [pc, #228]	@ (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002746:	4313      	orrs	r3, r2
 8002748:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d167      	bne.n	8002820 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002750:	4b36      	ldr	r3, [pc, #216]	@ (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a35      	ldr	r2, [pc, #212]	@ (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002756:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800275a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800275c:	f7fe fa70 	bl	8000c40 <HAL_GetTick>
 8002760:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002762:	e009      	b.n	8002778 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002764:	f7fe fa6c 	bl	8000c40 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d902      	bls.n	8002778 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	73fb      	strb	r3, [r7, #15]
        break;
 8002776:	e005      	b.n	8002784 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002778:	4b2c      	ldr	r3, [pc, #176]	@ (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1ef      	bne.n	8002764 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002784:	7bfb      	ldrb	r3, [r7, #15]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d14a      	bne.n	8002820 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d111      	bne.n	80027b4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002790:	4b26      	ldr	r3, [pc, #152]	@ (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002798:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6892      	ldr	r2, [r2, #8]
 80027a0:	0211      	lsls	r1, r2, #8
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68d2      	ldr	r2, [r2, #12]
 80027a6:	0912      	lsrs	r2, r2, #4
 80027a8:	0452      	lsls	r2, r2, #17
 80027aa:	430a      	orrs	r2, r1
 80027ac:	491f      	ldr	r1, [pc, #124]	@ (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	614b      	str	r3, [r1, #20]
 80027b2:	e011      	b.n	80027d8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027b4:	4b1d      	ldr	r3, [pc, #116]	@ (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80027bc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6892      	ldr	r2, [r2, #8]
 80027c4:	0211      	lsls	r1, r2, #8
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6912      	ldr	r2, [r2, #16]
 80027ca:	0852      	lsrs	r2, r2, #1
 80027cc:	3a01      	subs	r2, #1
 80027ce:	0652      	lsls	r2, r2, #25
 80027d0:	430a      	orrs	r2, r1
 80027d2:	4916      	ldr	r1, [pc, #88]	@ (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80027d8:	4b14      	ldr	r3, [pc, #80]	@ (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a13      	ldr	r2, [pc, #76]	@ (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e4:	f7fe fa2c 	bl	8000c40 <HAL_GetTick>
 80027e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027ea:	e009      	b.n	8002800 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027ec:	f7fe fa28 	bl	8000c40 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d902      	bls.n	8002800 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	73fb      	strb	r3, [r7, #15]
          break;
 80027fe:	e005      	b.n	800280c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002800:	4b0a      	ldr	r3, [pc, #40]	@ (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0ef      	beq.n	80027ec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d106      	bne.n	8002820 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002812:	4b06      	ldr	r3, [pc, #24]	@ (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	4904      	ldr	r1, [pc, #16]	@ (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 800281c:	4313      	orrs	r3, r2
 800281e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002820:	7bfb      	ldrb	r3, [r7, #15]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40021000 	.word	0x40021000

08002830 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e040      	b.n	80028c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7fe f886 	bl	8000964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2224      	movs	r2, #36	@ 0x24
 800285c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0201 	bic.w	r2, r2, #1
 800286c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 fc32 	bl	80030e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 f977 	bl	8002b70 <UART_SetConfig>
 8002882:	4603      	mov	r3, r0
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e01b      	b.n	80028c4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800289a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80028aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 fcb1 	bl	8003224 <UART_CheckIdleState>
 80028c2:	4603      	mov	r3, r0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08a      	sub	sp, #40	@ 0x28
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	603b      	str	r3, [r7, #0]
 80028d8:	4613      	mov	r3, r2
 80028da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028e0:	2b20      	cmp	r3, #32
 80028e2:	d177      	bne.n	80029d4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d002      	beq.n	80028f0 <HAL_UART_Transmit+0x24>
 80028ea:	88fb      	ldrh	r3, [r7, #6]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e070      	b.n	80029d6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2221      	movs	r2, #33	@ 0x21
 8002900:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002902:	f7fe f99d 	bl	8000c40 <HAL_GetTick>
 8002906:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	88fa      	ldrh	r2, [r7, #6]
 800290c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	88fa      	ldrh	r2, [r7, #6]
 8002914:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002920:	d108      	bne.n	8002934 <HAL_UART_Transmit+0x68>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d104      	bne.n	8002934 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800292a:	2300      	movs	r3, #0
 800292c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	61bb      	str	r3, [r7, #24]
 8002932:	e003      	b.n	800293c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002938:	2300      	movs	r3, #0
 800293a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800293c:	e02f      	b.n	800299e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	2200      	movs	r2, #0
 8002946:	2180      	movs	r1, #128	@ 0x80
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 fd13 	bl	8003374 <UART_WaitOnFlagUntilTimeout>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d004      	beq.n	800295e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2220      	movs	r2, #32
 8002958:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e03b      	b.n	80029d6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10b      	bne.n	800297c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	881a      	ldrh	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002970:	b292      	uxth	r2, r2
 8002972:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	3302      	adds	r3, #2
 8002978:	61bb      	str	r3, [r7, #24]
 800297a:	e007      	b.n	800298c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	781a      	ldrb	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	3301      	adds	r3, #1
 800298a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002992:	b29b      	uxth	r3, r3
 8002994:	3b01      	subs	r3, #1
 8002996:	b29a      	uxth	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1c9      	bne.n	800293e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	2200      	movs	r2, #0
 80029b2:	2140      	movs	r1, #64	@ 0x40
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 fcdd 	bl	8003374 <UART_WaitOnFlagUntilTimeout>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d004      	beq.n	80029ca <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2220      	movs	r2, #32
 80029c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e005      	b.n	80029d6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2220      	movs	r2, #32
 80029ce:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	e000      	b.n	80029d6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80029d4:	2302      	movs	r3, #2
  }
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3720      	adds	r7, #32
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b08a      	sub	sp, #40	@ 0x28
 80029e2:	af02      	add	r7, sp, #8
 80029e4:	60f8      	str	r0, [r7, #12]
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	603b      	str	r3, [r7, #0]
 80029ea:	4613      	mov	r3, r2
 80029ec:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029f4:	2b20      	cmp	r3, #32
 80029f6:	f040 80b6 	bne.w	8002b66 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d002      	beq.n	8002a06 <HAL_UART_Receive+0x28>
 8002a00:	88fb      	ldrh	r3, [r7, #6]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e0ae      	b.n	8002b68 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2222      	movs	r2, #34	@ 0x22
 8002a16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a20:	f7fe f90e 	bl	8000c40 <HAL_GetTick>
 8002a24:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	88fa      	ldrh	r2, [r7, #6]
 8002a2a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	88fa      	ldrh	r2, [r7, #6]
 8002a32:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a3e:	d10e      	bne.n	8002a5e <HAL_UART_Receive+0x80>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d105      	bne.n	8002a54 <HAL_UART_Receive+0x76>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002a4e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002a52:	e02d      	b.n	8002ab0 <HAL_UART_Receive+0xd2>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	22ff      	movs	r2, #255	@ 0xff
 8002a58:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002a5c:	e028      	b.n	8002ab0 <HAL_UART_Receive+0xd2>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10d      	bne.n	8002a82 <HAL_UART_Receive+0xa4>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d104      	bne.n	8002a78 <HAL_UART_Receive+0x9a>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	22ff      	movs	r2, #255	@ 0xff
 8002a72:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002a76:	e01b      	b.n	8002ab0 <HAL_UART_Receive+0xd2>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	227f      	movs	r2, #127	@ 0x7f
 8002a7c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002a80:	e016      	b.n	8002ab0 <HAL_UART_Receive+0xd2>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a8a:	d10d      	bne.n	8002aa8 <HAL_UART_Receive+0xca>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d104      	bne.n	8002a9e <HAL_UART_Receive+0xc0>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	227f      	movs	r2, #127	@ 0x7f
 8002a98:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002a9c:	e008      	b.n	8002ab0 <HAL_UART_Receive+0xd2>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	223f      	movs	r2, #63	@ 0x3f
 8002aa2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002aa6:	e003      	b.n	8002ab0 <HAL_UART_Receive+0xd2>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002ab6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ac0:	d108      	bne.n	8002ad4 <HAL_UART_Receive+0xf6>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d104      	bne.n	8002ad4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	61bb      	str	r3, [r7, #24]
 8002ad2:	e003      	b.n	8002adc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002adc:	e037      	b.n	8002b4e <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2120      	movs	r1, #32
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 fc43 	bl	8003374 <UART_WaitOnFlagUntilTimeout>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2220      	movs	r2, #32
 8002af8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e033      	b.n	8002b68 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10c      	bne.n	8002b20 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	8a7b      	ldrh	r3, [r7, #18]
 8002b10:	4013      	ands	r3, r2
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	3302      	adds	r3, #2
 8002b1c:	61bb      	str	r3, [r7, #24]
 8002b1e:	e00d      	b.n	8002b3c <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	8a7b      	ldrh	r3, [r7, #18]
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	4013      	ands	r3, r2
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1c1      	bne.n	8002ade <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	e000      	b.n	8002b68 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002b66:	2302      	movs	r3, #2
  }
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3720      	adds	r7, #32
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b74:	b08a      	sub	sp, #40	@ 0x28
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	4ba4      	ldr	r3, [pc, #656]	@ (8002e30 <UART_SetConfig+0x2c0>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	6812      	ldr	r2, [r2, #0]
 8002ba6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ba8:	430b      	orrs	r3, r1
 8002baa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a99      	ldr	r2, [pc, #612]	@ (8002e34 <UART_SetConfig+0x2c4>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d004      	beq.n	8002bdc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bec:	430a      	orrs	r2, r1
 8002bee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a90      	ldr	r2, [pc, #576]	@ (8002e38 <UART_SetConfig+0x2c8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d126      	bne.n	8002c48 <UART_SetConfig+0xd8>
 8002bfa:	4b90      	ldr	r3, [pc, #576]	@ (8002e3c <UART_SetConfig+0x2cc>)
 8002bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	2b03      	cmp	r3, #3
 8002c06:	d81b      	bhi.n	8002c40 <UART_SetConfig+0xd0>
 8002c08:	a201      	add	r2, pc, #4	@ (adr r2, 8002c10 <UART_SetConfig+0xa0>)
 8002c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0e:	bf00      	nop
 8002c10:	08002c21 	.word	0x08002c21
 8002c14:	08002c31 	.word	0x08002c31
 8002c18:	08002c29 	.word	0x08002c29
 8002c1c:	08002c39 	.word	0x08002c39
 8002c20:	2301      	movs	r3, #1
 8002c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c26:	e116      	b.n	8002e56 <UART_SetConfig+0x2e6>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c2e:	e112      	b.n	8002e56 <UART_SetConfig+0x2e6>
 8002c30:	2304      	movs	r3, #4
 8002c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c36:	e10e      	b.n	8002e56 <UART_SetConfig+0x2e6>
 8002c38:	2308      	movs	r3, #8
 8002c3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c3e:	e10a      	b.n	8002e56 <UART_SetConfig+0x2e6>
 8002c40:	2310      	movs	r3, #16
 8002c42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c46:	e106      	b.n	8002e56 <UART_SetConfig+0x2e6>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a7c      	ldr	r2, [pc, #496]	@ (8002e40 <UART_SetConfig+0x2d0>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d138      	bne.n	8002cc4 <UART_SetConfig+0x154>
 8002c52:	4b7a      	ldr	r3, [pc, #488]	@ (8002e3c <UART_SetConfig+0x2cc>)
 8002c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c58:	f003 030c 	and.w	r3, r3, #12
 8002c5c:	2b0c      	cmp	r3, #12
 8002c5e:	d82d      	bhi.n	8002cbc <UART_SetConfig+0x14c>
 8002c60:	a201      	add	r2, pc, #4	@ (adr r2, 8002c68 <UART_SetConfig+0xf8>)
 8002c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c66:	bf00      	nop
 8002c68:	08002c9d 	.word	0x08002c9d
 8002c6c:	08002cbd 	.word	0x08002cbd
 8002c70:	08002cbd 	.word	0x08002cbd
 8002c74:	08002cbd 	.word	0x08002cbd
 8002c78:	08002cad 	.word	0x08002cad
 8002c7c:	08002cbd 	.word	0x08002cbd
 8002c80:	08002cbd 	.word	0x08002cbd
 8002c84:	08002cbd 	.word	0x08002cbd
 8002c88:	08002ca5 	.word	0x08002ca5
 8002c8c:	08002cbd 	.word	0x08002cbd
 8002c90:	08002cbd 	.word	0x08002cbd
 8002c94:	08002cbd 	.word	0x08002cbd
 8002c98:	08002cb5 	.word	0x08002cb5
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ca2:	e0d8      	b.n	8002e56 <UART_SetConfig+0x2e6>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002caa:	e0d4      	b.n	8002e56 <UART_SetConfig+0x2e6>
 8002cac:	2304      	movs	r3, #4
 8002cae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cb2:	e0d0      	b.n	8002e56 <UART_SetConfig+0x2e6>
 8002cb4:	2308      	movs	r3, #8
 8002cb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cba:	e0cc      	b.n	8002e56 <UART_SetConfig+0x2e6>
 8002cbc:	2310      	movs	r3, #16
 8002cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cc2:	e0c8      	b.n	8002e56 <UART_SetConfig+0x2e6>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a5e      	ldr	r2, [pc, #376]	@ (8002e44 <UART_SetConfig+0x2d4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d125      	bne.n	8002d1a <UART_SetConfig+0x1aa>
 8002cce:	4b5b      	ldr	r3, [pc, #364]	@ (8002e3c <UART_SetConfig+0x2cc>)
 8002cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002cd8:	2b30      	cmp	r3, #48	@ 0x30
 8002cda:	d016      	beq.n	8002d0a <UART_SetConfig+0x19a>
 8002cdc:	2b30      	cmp	r3, #48	@ 0x30
 8002cde:	d818      	bhi.n	8002d12 <UART_SetConfig+0x1a2>
 8002ce0:	2b20      	cmp	r3, #32
 8002ce2:	d00a      	beq.n	8002cfa <UART_SetConfig+0x18a>
 8002ce4:	2b20      	cmp	r3, #32
 8002ce6:	d814      	bhi.n	8002d12 <UART_SetConfig+0x1a2>
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <UART_SetConfig+0x182>
 8002cec:	2b10      	cmp	r3, #16
 8002cee:	d008      	beq.n	8002d02 <UART_SetConfig+0x192>
 8002cf0:	e00f      	b.n	8002d12 <UART_SetConfig+0x1a2>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cf8:	e0ad      	b.n	8002e56 <UART_SetConfig+0x2e6>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d00:	e0a9      	b.n	8002e56 <UART_SetConfig+0x2e6>
 8002d02:	2304      	movs	r3, #4
 8002d04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d08:	e0a5      	b.n	8002e56 <UART_SetConfig+0x2e6>
 8002d0a:	2308      	movs	r3, #8
 8002d0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d10:	e0a1      	b.n	8002e56 <UART_SetConfig+0x2e6>
 8002d12:	2310      	movs	r3, #16
 8002d14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d18:	e09d      	b.n	8002e56 <UART_SetConfig+0x2e6>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a4a      	ldr	r2, [pc, #296]	@ (8002e48 <UART_SetConfig+0x2d8>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d125      	bne.n	8002d70 <UART_SetConfig+0x200>
 8002d24:	4b45      	ldr	r3, [pc, #276]	@ (8002e3c <UART_SetConfig+0x2cc>)
 8002d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002d2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d30:	d016      	beq.n	8002d60 <UART_SetConfig+0x1f0>
 8002d32:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d34:	d818      	bhi.n	8002d68 <UART_SetConfig+0x1f8>
 8002d36:	2b80      	cmp	r3, #128	@ 0x80
 8002d38:	d00a      	beq.n	8002d50 <UART_SetConfig+0x1e0>
 8002d3a:	2b80      	cmp	r3, #128	@ 0x80
 8002d3c:	d814      	bhi.n	8002d68 <UART_SetConfig+0x1f8>
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <UART_SetConfig+0x1d8>
 8002d42:	2b40      	cmp	r3, #64	@ 0x40
 8002d44:	d008      	beq.n	8002d58 <UART_SetConfig+0x1e8>
 8002d46:	e00f      	b.n	8002d68 <UART_SetConfig+0x1f8>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d4e:	e082      	b.n	8002e56 <UART_SetConfig+0x2e6>
 8002d50:	2302      	movs	r3, #2
 8002d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d56:	e07e      	b.n	8002e56 <UART_SetConfig+0x2e6>
 8002d58:	2304      	movs	r3, #4
 8002d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d5e:	e07a      	b.n	8002e56 <UART_SetConfig+0x2e6>
 8002d60:	2308      	movs	r3, #8
 8002d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d66:	e076      	b.n	8002e56 <UART_SetConfig+0x2e6>
 8002d68:	2310      	movs	r3, #16
 8002d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d6e:	e072      	b.n	8002e56 <UART_SetConfig+0x2e6>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a35      	ldr	r2, [pc, #212]	@ (8002e4c <UART_SetConfig+0x2dc>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d12a      	bne.n	8002dd0 <UART_SetConfig+0x260>
 8002d7a:	4b30      	ldr	r3, [pc, #192]	@ (8002e3c <UART_SetConfig+0x2cc>)
 8002d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d88:	d01a      	beq.n	8002dc0 <UART_SetConfig+0x250>
 8002d8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d8e:	d81b      	bhi.n	8002dc8 <UART_SetConfig+0x258>
 8002d90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d94:	d00c      	beq.n	8002db0 <UART_SetConfig+0x240>
 8002d96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d9a:	d815      	bhi.n	8002dc8 <UART_SetConfig+0x258>
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <UART_SetConfig+0x238>
 8002da0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002da4:	d008      	beq.n	8002db8 <UART_SetConfig+0x248>
 8002da6:	e00f      	b.n	8002dc8 <UART_SetConfig+0x258>
 8002da8:	2300      	movs	r3, #0
 8002daa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dae:	e052      	b.n	8002e56 <UART_SetConfig+0x2e6>
 8002db0:	2302      	movs	r3, #2
 8002db2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002db6:	e04e      	b.n	8002e56 <UART_SetConfig+0x2e6>
 8002db8:	2304      	movs	r3, #4
 8002dba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dbe:	e04a      	b.n	8002e56 <UART_SetConfig+0x2e6>
 8002dc0:	2308      	movs	r3, #8
 8002dc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dc6:	e046      	b.n	8002e56 <UART_SetConfig+0x2e6>
 8002dc8:	2310      	movs	r3, #16
 8002dca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dce:	e042      	b.n	8002e56 <UART_SetConfig+0x2e6>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a17      	ldr	r2, [pc, #92]	@ (8002e34 <UART_SetConfig+0x2c4>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d13a      	bne.n	8002e50 <UART_SetConfig+0x2e0>
 8002dda:	4b18      	ldr	r3, [pc, #96]	@ (8002e3c <UART_SetConfig+0x2cc>)
 8002ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002de0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002de4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002de8:	d01a      	beq.n	8002e20 <UART_SetConfig+0x2b0>
 8002dea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002dee:	d81b      	bhi.n	8002e28 <UART_SetConfig+0x2b8>
 8002df0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002df4:	d00c      	beq.n	8002e10 <UART_SetConfig+0x2a0>
 8002df6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dfa:	d815      	bhi.n	8002e28 <UART_SetConfig+0x2b8>
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <UART_SetConfig+0x298>
 8002e00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e04:	d008      	beq.n	8002e18 <UART_SetConfig+0x2a8>
 8002e06:	e00f      	b.n	8002e28 <UART_SetConfig+0x2b8>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e0e:	e022      	b.n	8002e56 <UART_SetConfig+0x2e6>
 8002e10:	2302      	movs	r3, #2
 8002e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e16:	e01e      	b.n	8002e56 <UART_SetConfig+0x2e6>
 8002e18:	2304      	movs	r3, #4
 8002e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e1e:	e01a      	b.n	8002e56 <UART_SetConfig+0x2e6>
 8002e20:	2308      	movs	r3, #8
 8002e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e26:	e016      	b.n	8002e56 <UART_SetConfig+0x2e6>
 8002e28:	2310      	movs	r3, #16
 8002e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e2e:	e012      	b.n	8002e56 <UART_SetConfig+0x2e6>
 8002e30:	efff69f3 	.word	0xefff69f3
 8002e34:	40008000 	.word	0x40008000
 8002e38:	40013800 	.word	0x40013800
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	40004400 	.word	0x40004400
 8002e44:	40004800 	.word	0x40004800
 8002e48:	40004c00 	.word	0x40004c00
 8002e4c:	40005000 	.word	0x40005000
 8002e50:	2310      	movs	r3, #16
 8002e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a9f      	ldr	r2, [pc, #636]	@ (80030d8 <UART_SetConfig+0x568>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d17a      	bne.n	8002f56 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d824      	bhi.n	8002eb2 <UART_SetConfig+0x342>
 8002e68:	a201      	add	r2, pc, #4	@ (adr r2, 8002e70 <UART_SetConfig+0x300>)
 8002e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6e:	bf00      	nop
 8002e70:	08002e95 	.word	0x08002e95
 8002e74:	08002eb3 	.word	0x08002eb3
 8002e78:	08002e9d 	.word	0x08002e9d
 8002e7c:	08002eb3 	.word	0x08002eb3
 8002e80:	08002ea3 	.word	0x08002ea3
 8002e84:	08002eb3 	.word	0x08002eb3
 8002e88:	08002eb3 	.word	0x08002eb3
 8002e8c:	08002eb3 	.word	0x08002eb3
 8002e90:	08002eab 	.word	0x08002eab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e94:	f7fe ff84 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 8002e98:	61f8      	str	r0, [r7, #28]
        break;
 8002e9a:	e010      	b.n	8002ebe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e9c:	4b8f      	ldr	r3, [pc, #572]	@ (80030dc <UART_SetConfig+0x56c>)
 8002e9e:	61fb      	str	r3, [r7, #28]
        break;
 8002ea0:	e00d      	b.n	8002ebe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ea2:	f7fe fee5 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8002ea6:	61f8      	str	r0, [r7, #28]
        break;
 8002ea8:	e009      	b.n	8002ebe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002eaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002eae:	61fb      	str	r3, [r7, #28]
        break;
 8002eb0:	e005      	b.n	8002ebe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002ebc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 80fb 	beq.w	80030bc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	4413      	add	r3, r2
 8002ed0:	69fa      	ldr	r2, [r7, #28]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d305      	bcc.n	8002ee2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002edc:	69fa      	ldr	r2, [r7, #28]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d903      	bls.n	8002eea <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002ee8:	e0e8      	b.n	80030bc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	2200      	movs	r2, #0
 8002eee:	461c      	mov	r4, r3
 8002ef0:	4615      	mov	r5, r2
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	f04f 0300 	mov.w	r3, #0
 8002efa:	022b      	lsls	r3, r5, #8
 8002efc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002f00:	0222      	lsls	r2, r4, #8
 8002f02:	68f9      	ldr	r1, [r7, #12]
 8002f04:	6849      	ldr	r1, [r1, #4]
 8002f06:	0849      	lsrs	r1, r1, #1
 8002f08:	2000      	movs	r0, #0
 8002f0a:	4688      	mov	r8, r1
 8002f0c:	4681      	mov	r9, r0
 8002f0e:	eb12 0a08 	adds.w	sl, r2, r8
 8002f12:	eb43 0b09 	adc.w	fp, r3, r9
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	603b      	str	r3, [r7, #0]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f24:	4650      	mov	r0, sl
 8002f26:	4659      	mov	r1, fp
 8002f28:	f7fd f9a2 	bl	8000270 <__aeabi_uldivmod>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	4613      	mov	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f3a:	d308      	bcc.n	8002f4e <UART_SetConfig+0x3de>
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f42:	d204      	bcs.n	8002f4e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	60da      	str	r2, [r3, #12]
 8002f4c:	e0b6      	b.n	80030bc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002f54:	e0b2      	b.n	80030bc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f5e:	d15e      	bne.n	800301e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002f60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d828      	bhi.n	8002fba <UART_SetConfig+0x44a>
 8002f68:	a201      	add	r2, pc, #4	@ (adr r2, 8002f70 <UART_SetConfig+0x400>)
 8002f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6e:	bf00      	nop
 8002f70:	08002f95 	.word	0x08002f95
 8002f74:	08002f9d 	.word	0x08002f9d
 8002f78:	08002fa5 	.word	0x08002fa5
 8002f7c:	08002fbb 	.word	0x08002fbb
 8002f80:	08002fab 	.word	0x08002fab
 8002f84:	08002fbb 	.word	0x08002fbb
 8002f88:	08002fbb 	.word	0x08002fbb
 8002f8c:	08002fbb 	.word	0x08002fbb
 8002f90:	08002fb3 	.word	0x08002fb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f94:	f7fe ff04 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 8002f98:	61f8      	str	r0, [r7, #28]
        break;
 8002f9a:	e014      	b.n	8002fc6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f9c:	f7fe ff16 	bl	8001dcc <HAL_RCC_GetPCLK2Freq>
 8002fa0:	61f8      	str	r0, [r7, #28]
        break;
 8002fa2:	e010      	b.n	8002fc6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fa4:	4b4d      	ldr	r3, [pc, #308]	@ (80030dc <UART_SetConfig+0x56c>)
 8002fa6:	61fb      	str	r3, [r7, #28]
        break;
 8002fa8:	e00d      	b.n	8002fc6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002faa:	f7fe fe61 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8002fae:	61f8      	str	r0, [r7, #28]
        break;
 8002fb0:	e009      	b.n	8002fc6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fb6:	61fb      	str	r3, [r7, #28]
        break;
 8002fb8:	e005      	b.n	8002fc6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002fc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d077      	beq.n	80030bc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	005a      	lsls	r2, r3, #1
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	085b      	lsrs	r3, r3, #1
 8002fd6:	441a      	add	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	2b0f      	cmp	r3, #15
 8002fe6:	d916      	bls.n	8003016 <UART_SetConfig+0x4a6>
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fee:	d212      	bcs.n	8003016 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	f023 030f 	bic.w	r3, r3, #15
 8002ff8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	085b      	lsrs	r3, r3, #1
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	b29a      	uxth	r2, r3
 8003006:	8afb      	ldrh	r3, [r7, #22]
 8003008:	4313      	orrs	r3, r2
 800300a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	8afa      	ldrh	r2, [r7, #22]
 8003012:	60da      	str	r2, [r3, #12]
 8003014:	e052      	b.n	80030bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800301c:	e04e      	b.n	80030bc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800301e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003022:	2b08      	cmp	r3, #8
 8003024:	d827      	bhi.n	8003076 <UART_SetConfig+0x506>
 8003026:	a201      	add	r2, pc, #4	@ (adr r2, 800302c <UART_SetConfig+0x4bc>)
 8003028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302c:	08003051 	.word	0x08003051
 8003030:	08003059 	.word	0x08003059
 8003034:	08003061 	.word	0x08003061
 8003038:	08003077 	.word	0x08003077
 800303c:	08003067 	.word	0x08003067
 8003040:	08003077 	.word	0x08003077
 8003044:	08003077 	.word	0x08003077
 8003048:	08003077 	.word	0x08003077
 800304c:	0800306f 	.word	0x0800306f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003050:	f7fe fea6 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 8003054:	61f8      	str	r0, [r7, #28]
        break;
 8003056:	e014      	b.n	8003082 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003058:	f7fe feb8 	bl	8001dcc <HAL_RCC_GetPCLK2Freq>
 800305c:	61f8      	str	r0, [r7, #28]
        break;
 800305e:	e010      	b.n	8003082 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003060:	4b1e      	ldr	r3, [pc, #120]	@ (80030dc <UART_SetConfig+0x56c>)
 8003062:	61fb      	str	r3, [r7, #28]
        break;
 8003064:	e00d      	b.n	8003082 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003066:	f7fe fe03 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 800306a:	61f8      	str	r0, [r7, #28]
        break;
 800306c:	e009      	b.n	8003082 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800306e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003072:	61fb      	str	r3, [r7, #28]
        break;
 8003074:	e005      	b.n	8003082 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003080:	bf00      	nop
    }

    if (pclk != 0U)
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d019      	beq.n	80030bc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	085a      	lsrs	r2, r3, #1
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	441a      	add	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	fbb2 f3f3 	udiv	r3, r2, r3
 800309a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	2b0f      	cmp	r3, #15
 80030a0:	d909      	bls.n	80030b6 <UART_SetConfig+0x546>
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030a8:	d205      	bcs.n	80030b6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	60da      	str	r2, [r3, #12]
 80030b4:	e002      	b.n	80030bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80030c8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3728      	adds	r7, #40	@ 0x28
 80030d0:	46bd      	mov	sp, r7
 80030d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030d6:	bf00      	nop
 80030d8:	40008000 	.word	0x40008000
 80030dc:	00f42400 	.word	0x00f42400

080030e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ec:	f003 0308 	and.w	r3, r3, #8
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003152:	f003 0304 	and.w	r3, r3, #4
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003174:	f003 0310 	and.w	r3, r3, #16
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00a      	beq.n	8003192 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003196:	f003 0320 	and.w	r3, r3, #32
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d01a      	beq.n	80031f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031de:	d10a      	bne.n	80031f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	605a      	str	r2, [r3, #4]
  }
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b098      	sub	sp, #96	@ 0x60
 8003228:	af02      	add	r7, sp, #8
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003234:	f7fd fd04 	bl	8000c40 <HAL_GetTick>
 8003238:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b08      	cmp	r3, #8
 8003246:	d12e      	bne.n	80032a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003248:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003250:	2200      	movs	r2, #0
 8003252:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f88c 	bl	8003374 <UART_WaitOnFlagUntilTimeout>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d021      	beq.n	80032a6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800326a:	e853 3f00 	ldrex	r3, [r3]
 800326e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003272:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003276:	653b      	str	r3, [r7, #80]	@ 0x50
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	461a      	mov	r2, r3
 800327e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003280:	647b      	str	r3, [r7, #68]	@ 0x44
 8003282:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003284:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003286:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003288:	e841 2300 	strex	r3, r2, [r1]
 800328c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800328e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1e6      	bne.n	8003262 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2220      	movs	r2, #32
 8003298:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e062      	b.n	800336c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d149      	bne.n	8003348 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032bc:	2200      	movs	r2, #0
 80032be:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f856 	bl	8003374 <UART_WaitOnFlagUntilTimeout>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d03c      	beq.n	8003348 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d6:	e853 3f00 	ldrex	r3, [r3]
 80032da:	623b      	str	r3, [r7, #32]
   return(result);
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	461a      	mov	r2, r3
 80032ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80032ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032f4:	e841 2300 	strex	r3, r2, [r1]
 80032f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80032fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1e6      	bne.n	80032ce <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	3308      	adds	r3, #8
 8003306:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	e853 3f00 	ldrex	r3, [r3]
 800330e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f023 0301 	bic.w	r3, r3, #1
 8003316:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	3308      	adds	r3, #8
 800331e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003320:	61fa      	str	r2, [r7, #28]
 8003322:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003324:	69b9      	ldr	r1, [r7, #24]
 8003326:	69fa      	ldr	r2, [r7, #28]
 8003328:	e841 2300 	strex	r3, r2, [r1]
 800332c:	617b      	str	r3, [r7, #20]
   return(result);
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1e5      	bne.n	8003300 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2220      	movs	r2, #32
 8003338:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e011      	b.n	800336c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2220      	movs	r2, #32
 800334c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2220      	movs	r2, #32
 8003352:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3758      	adds	r7, #88	@ 0x58
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	4613      	mov	r3, r2
 8003382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003384:	e04f      	b.n	8003426 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338c:	d04b      	beq.n	8003426 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800338e:	f7fd fc57 	bl	8000c40 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	429a      	cmp	r2, r3
 800339c:	d302      	bcc.n	80033a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e04e      	b.n	8003446 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0304 	and.w	r3, r3, #4
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d037      	beq.n	8003426 <UART_WaitOnFlagUntilTimeout+0xb2>
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2b80      	cmp	r3, #128	@ 0x80
 80033ba:	d034      	beq.n	8003426 <UART_WaitOnFlagUntilTimeout+0xb2>
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b40      	cmp	r3, #64	@ 0x40
 80033c0:	d031      	beq.n	8003426 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	f003 0308 	and.w	r3, r3, #8
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d110      	bne.n	80033f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2208      	movs	r2, #8
 80033d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 f838 	bl	800344e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2208      	movs	r2, #8
 80033e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e029      	b.n	8003446 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003400:	d111      	bne.n	8003426 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800340a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 f81e 	bl	800344e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2220      	movs	r2, #32
 8003416:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e00f      	b.n	8003446 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69da      	ldr	r2, [r3, #28]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	4013      	ands	r3, r2
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	429a      	cmp	r2, r3
 8003434:	bf0c      	ite	eq
 8003436:	2301      	moveq	r3, #1
 8003438:	2300      	movne	r3, #0
 800343a:	b2db      	uxtb	r3, r3
 800343c:	461a      	mov	r2, r3
 800343e:	79fb      	ldrb	r3, [r7, #7]
 8003440:	429a      	cmp	r2, r3
 8003442:	d0a0      	beq.n	8003386 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800344e:	b480      	push	{r7}
 8003450:	b095      	sub	sp, #84	@ 0x54
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800345e:	e853 3f00 	ldrex	r3, [r3]
 8003462:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003466:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800346a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	461a      	mov	r2, r3
 8003472:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003474:	643b      	str	r3, [r7, #64]	@ 0x40
 8003476:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003478:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800347a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800347c:	e841 2300 	strex	r3, r2, [r1]
 8003480:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1e6      	bne.n	8003456 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	3308      	adds	r3, #8
 800348e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	e853 3f00 	ldrex	r3, [r3]
 8003496:	61fb      	str	r3, [r7, #28]
   return(result);
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f023 0301 	bic.w	r3, r3, #1
 800349e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	3308      	adds	r3, #8
 80034a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034b0:	e841 2300 	strex	r3, r2, [r1]
 80034b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80034b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1e5      	bne.n	8003488 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d118      	bne.n	80034f6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	e853 3f00 	ldrex	r3, [r3]
 80034d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f023 0310 	bic.w	r3, r3, #16
 80034d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034e2:	61bb      	str	r3, [r7, #24]
 80034e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e6:	6979      	ldr	r1, [r7, #20]
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	e841 2300 	strex	r3, r2, [r1]
 80034ee:	613b      	str	r3, [r7, #16]
   return(result);
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1e6      	bne.n	80034c4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800350a:	bf00      	nop
 800350c:	3754      	adds	r7, #84	@ 0x54
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
	...

08003518 <std>:
 8003518:	2300      	movs	r3, #0
 800351a:	b510      	push	{r4, lr}
 800351c:	4604      	mov	r4, r0
 800351e:	e9c0 3300 	strd	r3, r3, [r0]
 8003522:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003526:	6083      	str	r3, [r0, #8]
 8003528:	8181      	strh	r1, [r0, #12]
 800352a:	6643      	str	r3, [r0, #100]	@ 0x64
 800352c:	81c2      	strh	r2, [r0, #14]
 800352e:	6183      	str	r3, [r0, #24]
 8003530:	4619      	mov	r1, r3
 8003532:	2208      	movs	r2, #8
 8003534:	305c      	adds	r0, #92	@ 0x5c
 8003536:	f000 fabf 	bl	8003ab8 <memset>
 800353a:	4b0d      	ldr	r3, [pc, #52]	@ (8003570 <std+0x58>)
 800353c:	6263      	str	r3, [r4, #36]	@ 0x24
 800353e:	4b0d      	ldr	r3, [pc, #52]	@ (8003574 <std+0x5c>)
 8003540:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003542:	4b0d      	ldr	r3, [pc, #52]	@ (8003578 <std+0x60>)
 8003544:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003546:	4b0d      	ldr	r3, [pc, #52]	@ (800357c <std+0x64>)
 8003548:	6323      	str	r3, [r4, #48]	@ 0x30
 800354a:	4b0d      	ldr	r3, [pc, #52]	@ (8003580 <std+0x68>)
 800354c:	6224      	str	r4, [r4, #32]
 800354e:	429c      	cmp	r4, r3
 8003550:	d006      	beq.n	8003560 <std+0x48>
 8003552:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003556:	4294      	cmp	r4, r2
 8003558:	d002      	beq.n	8003560 <std+0x48>
 800355a:	33d0      	adds	r3, #208	@ 0xd0
 800355c:	429c      	cmp	r4, r3
 800355e:	d105      	bne.n	800356c <std+0x54>
 8003560:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003568:	f000 bb1e 	b.w	8003ba8 <__retarget_lock_init_recursive>
 800356c:	bd10      	pop	{r4, pc}
 800356e:	bf00      	nop
 8003570:	08003909 	.word	0x08003909
 8003574:	0800392b 	.word	0x0800392b
 8003578:	08003963 	.word	0x08003963
 800357c:	08003987 	.word	0x08003987
 8003580:	20000118 	.word	0x20000118

08003584 <stdio_exit_handler>:
 8003584:	4a02      	ldr	r2, [pc, #8]	@ (8003590 <stdio_exit_handler+0xc>)
 8003586:	4903      	ldr	r1, [pc, #12]	@ (8003594 <stdio_exit_handler+0x10>)
 8003588:	4803      	ldr	r0, [pc, #12]	@ (8003598 <stdio_exit_handler+0x14>)
 800358a:	f000 b869 	b.w	8003660 <_fwalk_sglue>
 800358e:	bf00      	nop
 8003590:	2000000c 	.word	0x2000000c
 8003594:	08004a55 	.word	0x08004a55
 8003598:	2000001c 	.word	0x2000001c

0800359c <cleanup_stdio>:
 800359c:	6841      	ldr	r1, [r0, #4]
 800359e:	4b0c      	ldr	r3, [pc, #48]	@ (80035d0 <cleanup_stdio+0x34>)
 80035a0:	4299      	cmp	r1, r3
 80035a2:	b510      	push	{r4, lr}
 80035a4:	4604      	mov	r4, r0
 80035a6:	d001      	beq.n	80035ac <cleanup_stdio+0x10>
 80035a8:	f001 fa54 	bl	8004a54 <_fflush_r>
 80035ac:	68a1      	ldr	r1, [r4, #8]
 80035ae:	4b09      	ldr	r3, [pc, #36]	@ (80035d4 <cleanup_stdio+0x38>)
 80035b0:	4299      	cmp	r1, r3
 80035b2:	d002      	beq.n	80035ba <cleanup_stdio+0x1e>
 80035b4:	4620      	mov	r0, r4
 80035b6:	f001 fa4d 	bl	8004a54 <_fflush_r>
 80035ba:	68e1      	ldr	r1, [r4, #12]
 80035bc:	4b06      	ldr	r3, [pc, #24]	@ (80035d8 <cleanup_stdio+0x3c>)
 80035be:	4299      	cmp	r1, r3
 80035c0:	d004      	beq.n	80035cc <cleanup_stdio+0x30>
 80035c2:	4620      	mov	r0, r4
 80035c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035c8:	f001 ba44 	b.w	8004a54 <_fflush_r>
 80035cc:	bd10      	pop	{r4, pc}
 80035ce:	bf00      	nop
 80035d0:	20000118 	.word	0x20000118
 80035d4:	20000180 	.word	0x20000180
 80035d8:	200001e8 	.word	0x200001e8

080035dc <global_stdio_init.part.0>:
 80035dc:	b510      	push	{r4, lr}
 80035de:	4b0b      	ldr	r3, [pc, #44]	@ (800360c <global_stdio_init.part.0+0x30>)
 80035e0:	4c0b      	ldr	r4, [pc, #44]	@ (8003610 <global_stdio_init.part.0+0x34>)
 80035e2:	4a0c      	ldr	r2, [pc, #48]	@ (8003614 <global_stdio_init.part.0+0x38>)
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	4620      	mov	r0, r4
 80035e8:	2200      	movs	r2, #0
 80035ea:	2104      	movs	r1, #4
 80035ec:	f7ff ff94 	bl	8003518 <std>
 80035f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80035f4:	2201      	movs	r2, #1
 80035f6:	2109      	movs	r1, #9
 80035f8:	f7ff ff8e 	bl	8003518 <std>
 80035fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003600:	2202      	movs	r2, #2
 8003602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003606:	2112      	movs	r1, #18
 8003608:	f7ff bf86 	b.w	8003518 <std>
 800360c:	20000250 	.word	0x20000250
 8003610:	20000118 	.word	0x20000118
 8003614:	08003585 	.word	0x08003585

08003618 <__sfp_lock_acquire>:
 8003618:	4801      	ldr	r0, [pc, #4]	@ (8003620 <__sfp_lock_acquire+0x8>)
 800361a:	f000 bac6 	b.w	8003baa <__retarget_lock_acquire_recursive>
 800361e:	bf00      	nop
 8003620:	20000259 	.word	0x20000259

08003624 <__sfp_lock_release>:
 8003624:	4801      	ldr	r0, [pc, #4]	@ (800362c <__sfp_lock_release+0x8>)
 8003626:	f000 bac1 	b.w	8003bac <__retarget_lock_release_recursive>
 800362a:	bf00      	nop
 800362c:	20000259 	.word	0x20000259

08003630 <__sinit>:
 8003630:	b510      	push	{r4, lr}
 8003632:	4604      	mov	r4, r0
 8003634:	f7ff fff0 	bl	8003618 <__sfp_lock_acquire>
 8003638:	6a23      	ldr	r3, [r4, #32]
 800363a:	b11b      	cbz	r3, 8003644 <__sinit+0x14>
 800363c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003640:	f7ff bff0 	b.w	8003624 <__sfp_lock_release>
 8003644:	4b04      	ldr	r3, [pc, #16]	@ (8003658 <__sinit+0x28>)
 8003646:	6223      	str	r3, [r4, #32]
 8003648:	4b04      	ldr	r3, [pc, #16]	@ (800365c <__sinit+0x2c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1f5      	bne.n	800363c <__sinit+0xc>
 8003650:	f7ff ffc4 	bl	80035dc <global_stdio_init.part.0>
 8003654:	e7f2      	b.n	800363c <__sinit+0xc>
 8003656:	bf00      	nop
 8003658:	0800359d 	.word	0x0800359d
 800365c:	20000250 	.word	0x20000250

08003660 <_fwalk_sglue>:
 8003660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003664:	4607      	mov	r7, r0
 8003666:	4688      	mov	r8, r1
 8003668:	4614      	mov	r4, r2
 800366a:	2600      	movs	r6, #0
 800366c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003670:	f1b9 0901 	subs.w	r9, r9, #1
 8003674:	d505      	bpl.n	8003682 <_fwalk_sglue+0x22>
 8003676:	6824      	ldr	r4, [r4, #0]
 8003678:	2c00      	cmp	r4, #0
 800367a:	d1f7      	bne.n	800366c <_fwalk_sglue+0xc>
 800367c:	4630      	mov	r0, r6
 800367e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003682:	89ab      	ldrh	r3, [r5, #12]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d907      	bls.n	8003698 <_fwalk_sglue+0x38>
 8003688:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800368c:	3301      	adds	r3, #1
 800368e:	d003      	beq.n	8003698 <_fwalk_sglue+0x38>
 8003690:	4629      	mov	r1, r5
 8003692:	4638      	mov	r0, r7
 8003694:	47c0      	blx	r8
 8003696:	4306      	orrs	r6, r0
 8003698:	3568      	adds	r5, #104	@ 0x68
 800369a:	e7e9      	b.n	8003670 <_fwalk_sglue+0x10>

0800369c <iprintf>:
 800369c:	b40f      	push	{r0, r1, r2, r3}
 800369e:	b507      	push	{r0, r1, r2, lr}
 80036a0:	4906      	ldr	r1, [pc, #24]	@ (80036bc <iprintf+0x20>)
 80036a2:	ab04      	add	r3, sp, #16
 80036a4:	6808      	ldr	r0, [r1, #0]
 80036a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80036aa:	6881      	ldr	r1, [r0, #8]
 80036ac:	9301      	str	r3, [sp, #4]
 80036ae:	f000 fba9 	bl	8003e04 <_vfiprintf_r>
 80036b2:	b003      	add	sp, #12
 80036b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80036b8:	b004      	add	sp, #16
 80036ba:	4770      	bx	lr
 80036bc:	20000018 	.word	0x20000018

080036c0 <_puts_r>:
 80036c0:	6a03      	ldr	r3, [r0, #32]
 80036c2:	b570      	push	{r4, r5, r6, lr}
 80036c4:	6884      	ldr	r4, [r0, #8]
 80036c6:	4605      	mov	r5, r0
 80036c8:	460e      	mov	r6, r1
 80036ca:	b90b      	cbnz	r3, 80036d0 <_puts_r+0x10>
 80036cc:	f7ff ffb0 	bl	8003630 <__sinit>
 80036d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80036d2:	07db      	lsls	r3, r3, #31
 80036d4:	d405      	bmi.n	80036e2 <_puts_r+0x22>
 80036d6:	89a3      	ldrh	r3, [r4, #12]
 80036d8:	0598      	lsls	r0, r3, #22
 80036da:	d402      	bmi.n	80036e2 <_puts_r+0x22>
 80036dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036de:	f000 fa64 	bl	8003baa <__retarget_lock_acquire_recursive>
 80036e2:	89a3      	ldrh	r3, [r4, #12]
 80036e4:	0719      	lsls	r1, r3, #28
 80036e6:	d502      	bpl.n	80036ee <_puts_r+0x2e>
 80036e8:	6923      	ldr	r3, [r4, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d135      	bne.n	800375a <_puts_r+0x9a>
 80036ee:	4621      	mov	r1, r4
 80036f0:	4628      	mov	r0, r5
 80036f2:	f000 f98b 	bl	8003a0c <__swsetup_r>
 80036f6:	b380      	cbz	r0, 800375a <_puts_r+0x9a>
 80036f8:	f04f 35ff 	mov.w	r5, #4294967295
 80036fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80036fe:	07da      	lsls	r2, r3, #31
 8003700:	d405      	bmi.n	800370e <_puts_r+0x4e>
 8003702:	89a3      	ldrh	r3, [r4, #12]
 8003704:	059b      	lsls	r3, r3, #22
 8003706:	d402      	bmi.n	800370e <_puts_r+0x4e>
 8003708:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800370a:	f000 fa4f 	bl	8003bac <__retarget_lock_release_recursive>
 800370e:	4628      	mov	r0, r5
 8003710:	bd70      	pop	{r4, r5, r6, pc}
 8003712:	2b00      	cmp	r3, #0
 8003714:	da04      	bge.n	8003720 <_puts_r+0x60>
 8003716:	69a2      	ldr	r2, [r4, #24]
 8003718:	429a      	cmp	r2, r3
 800371a:	dc17      	bgt.n	800374c <_puts_r+0x8c>
 800371c:	290a      	cmp	r1, #10
 800371e:	d015      	beq.n	800374c <_puts_r+0x8c>
 8003720:	6823      	ldr	r3, [r4, #0]
 8003722:	1c5a      	adds	r2, r3, #1
 8003724:	6022      	str	r2, [r4, #0]
 8003726:	7019      	strb	r1, [r3, #0]
 8003728:	68a3      	ldr	r3, [r4, #8]
 800372a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800372e:	3b01      	subs	r3, #1
 8003730:	60a3      	str	r3, [r4, #8]
 8003732:	2900      	cmp	r1, #0
 8003734:	d1ed      	bne.n	8003712 <_puts_r+0x52>
 8003736:	2b00      	cmp	r3, #0
 8003738:	da11      	bge.n	800375e <_puts_r+0x9e>
 800373a:	4622      	mov	r2, r4
 800373c:	210a      	movs	r1, #10
 800373e:	4628      	mov	r0, r5
 8003740:	f000 f925 	bl	800398e <__swbuf_r>
 8003744:	3001      	adds	r0, #1
 8003746:	d0d7      	beq.n	80036f8 <_puts_r+0x38>
 8003748:	250a      	movs	r5, #10
 800374a:	e7d7      	b.n	80036fc <_puts_r+0x3c>
 800374c:	4622      	mov	r2, r4
 800374e:	4628      	mov	r0, r5
 8003750:	f000 f91d 	bl	800398e <__swbuf_r>
 8003754:	3001      	adds	r0, #1
 8003756:	d1e7      	bne.n	8003728 <_puts_r+0x68>
 8003758:	e7ce      	b.n	80036f8 <_puts_r+0x38>
 800375a:	3e01      	subs	r6, #1
 800375c:	e7e4      	b.n	8003728 <_puts_r+0x68>
 800375e:	6823      	ldr	r3, [r4, #0]
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	6022      	str	r2, [r4, #0]
 8003764:	220a      	movs	r2, #10
 8003766:	701a      	strb	r2, [r3, #0]
 8003768:	e7ee      	b.n	8003748 <_puts_r+0x88>
	...

0800376c <puts>:
 800376c:	4b02      	ldr	r3, [pc, #8]	@ (8003778 <puts+0xc>)
 800376e:	4601      	mov	r1, r0
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	f7ff bfa5 	b.w	80036c0 <_puts_r>
 8003776:	bf00      	nop
 8003778:	20000018 	.word	0x20000018

0800377c <iscanf>:
 800377c:	b40f      	push	{r0, r1, r2, r3}
 800377e:	b507      	push	{r0, r1, r2, lr}
 8003780:	4906      	ldr	r1, [pc, #24]	@ (800379c <iscanf+0x20>)
 8003782:	ab04      	add	r3, sp, #16
 8003784:	6808      	ldr	r0, [r1, #0]
 8003786:	f853 2b04 	ldr.w	r2, [r3], #4
 800378a:	6841      	ldr	r1, [r0, #4]
 800378c:	9301      	str	r3, [sp, #4]
 800378e:	f000 ff7b 	bl	8004688 <_vfiscanf_r>
 8003792:	b003      	add	sp, #12
 8003794:	f85d eb04 	ldr.w	lr, [sp], #4
 8003798:	b004      	add	sp, #16
 800379a:	4770      	bx	lr
 800379c:	20000018 	.word	0x20000018

080037a0 <setvbuf>:
 80037a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80037a4:	461d      	mov	r5, r3
 80037a6:	4b57      	ldr	r3, [pc, #348]	@ (8003904 <setvbuf+0x164>)
 80037a8:	681f      	ldr	r7, [r3, #0]
 80037aa:	4604      	mov	r4, r0
 80037ac:	460e      	mov	r6, r1
 80037ae:	4690      	mov	r8, r2
 80037b0:	b127      	cbz	r7, 80037bc <setvbuf+0x1c>
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	b913      	cbnz	r3, 80037bc <setvbuf+0x1c>
 80037b6:	4638      	mov	r0, r7
 80037b8:	f7ff ff3a 	bl	8003630 <__sinit>
 80037bc:	f1b8 0f02 	cmp.w	r8, #2
 80037c0:	d006      	beq.n	80037d0 <setvbuf+0x30>
 80037c2:	f1b8 0f01 	cmp.w	r8, #1
 80037c6:	f200 809a 	bhi.w	80038fe <setvbuf+0x15e>
 80037ca:	2d00      	cmp	r5, #0
 80037cc:	f2c0 8097 	blt.w	80038fe <setvbuf+0x15e>
 80037d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80037d2:	07d9      	lsls	r1, r3, #31
 80037d4:	d405      	bmi.n	80037e2 <setvbuf+0x42>
 80037d6:	89a3      	ldrh	r3, [r4, #12]
 80037d8:	059a      	lsls	r2, r3, #22
 80037da:	d402      	bmi.n	80037e2 <setvbuf+0x42>
 80037dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80037de:	f000 f9e4 	bl	8003baa <__retarget_lock_acquire_recursive>
 80037e2:	4621      	mov	r1, r4
 80037e4:	4638      	mov	r0, r7
 80037e6:	f001 f935 	bl	8004a54 <_fflush_r>
 80037ea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80037ec:	b141      	cbz	r1, 8003800 <setvbuf+0x60>
 80037ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80037f2:	4299      	cmp	r1, r3
 80037f4:	d002      	beq.n	80037fc <setvbuf+0x5c>
 80037f6:	4638      	mov	r0, r7
 80037f8:	f000 f9da 	bl	8003bb0 <_free_r>
 80037fc:	2300      	movs	r3, #0
 80037fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8003800:	2300      	movs	r3, #0
 8003802:	61a3      	str	r3, [r4, #24]
 8003804:	6063      	str	r3, [r4, #4]
 8003806:	89a3      	ldrh	r3, [r4, #12]
 8003808:	061b      	lsls	r3, r3, #24
 800380a:	d503      	bpl.n	8003814 <setvbuf+0x74>
 800380c:	6921      	ldr	r1, [r4, #16]
 800380e:	4638      	mov	r0, r7
 8003810:	f000 f9ce 	bl	8003bb0 <_free_r>
 8003814:	89a3      	ldrh	r3, [r4, #12]
 8003816:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800381a:	f023 0303 	bic.w	r3, r3, #3
 800381e:	f1b8 0f02 	cmp.w	r8, #2
 8003822:	81a3      	strh	r3, [r4, #12]
 8003824:	d061      	beq.n	80038ea <setvbuf+0x14a>
 8003826:	ab01      	add	r3, sp, #4
 8003828:	466a      	mov	r2, sp
 800382a:	4621      	mov	r1, r4
 800382c:	4638      	mov	r0, r7
 800382e:	f001 f939 	bl	8004aa4 <__swhatbuf_r>
 8003832:	89a3      	ldrh	r3, [r4, #12]
 8003834:	4318      	orrs	r0, r3
 8003836:	81a0      	strh	r0, [r4, #12]
 8003838:	bb2d      	cbnz	r5, 8003886 <setvbuf+0xe6>
 800383a:	9d00      	ldr	r5, [sp, #0]
 800383c:	4628      	mov	r0, r5
 800383e:	f000 fa01 	bl	8003c44 <malloc>
 8003842:	4606      	mov	r6, r0
 8003844:	2800      	cmp	r0, #0
 8003846:	d152      	bne.n	80038ee <setvbuf+0x14e>
 8003848:	f8dd 9000 	ldr.w	r9, [sp]
 800384c:	45a9      	cmp	r9, r5
 800384e:	d140      	bne.n	80038d2 <setvbuf+0x132>
 8003850:	f04f 35ff 	mov.w	r5, #4294967295
 8003854:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003858:	f043 0202 	orr.w	r2, r3, #2
 800385c:	81a2      	strh	r2, [r4, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	60a2      	str	r2, [r4, #8]
 8003862:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8003866:	6022      	str	r2, [r4, #0]
 8003868:	6122      	str	r2, [r4, #16]
 800386a:	2201      	movs	r2, #1
 800386c:	6162      	str	r2, [r4, #20]
 800386e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003870:	07d6      	lsls	r6, r2, #31
 8003872:	d404      	bmi.n	800387e <setvbuf+0xde>
 8003874:	0598      	lsls	r0, r3, #22
 8003876:	d402      	bmi.n	800387e <setvbuf+0xde>
 8003878:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800387a:	f000 f997 	bl	8003bac <__retarget_lock_release_recursive>
 800387e:	4628      	mov	r0, r5
 8003880:	b003      	add	sp, #12
 8003882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003886:	2e00      	cmp	r6, #0
 8003888:	d0d8      	beq.n	800383c <setvbuf+0x9c>
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	b913      	cbnz	r3, 8003894 <setvbuf+0xf4>
 800388e:	4638      	mov	r0, r7
 8003890:	f7ff fece 	bl	8003630 <__sinit>
 8003894:	f1b8 0f01 	cmp.w	r8, #1
 8003898:	bf08      	it	eq
 800389a:	89a3      	ldrheq	r3, [r4, #12]
 800389c:	6026      	str	r6, [r4, #0]
 800389e:	bf04      	itt	eq
 80038a0:	f043 0301 	orreq.w	r3, r3, #1
 80038a4:	81a3      	strheq	r3, [r4, #12]
 80038a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038aa:	f013 0208 	ands.w	r2, r3, #8
 80038ae:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80038b2:	d01e      	beq.n	80038f2 <setvbuf+0x152>
 80038b4:	07d9      	lsls	r1, r3, #31
 80038b6:	bf41      	itttt	mi
 80038b8:	2200      	movmi	r2, #0
 80038ba:	426d      	negmi	r5, r5
 80038bc:	60a2      	strmi	r2, [r4, #8]
 80038be:	61a5      	strmi	r5, [r4, #24]
 80038c0:	bf58      	it	pl
 80038c2:	60a5      	strpl	r5, [r4, #8]
 80038c4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80038c6:	07d2      	lsls	r2, r2, #31
 80038c8:	d401      	bmi.n	80038ce <setvbuf+0x12e>
 80038ca:	059b      	lsls	r3, r3, #22
 80038cc:	d513      	bpl.n	80038f6 <setvbuf+0x156>
 80038ce:	2500      	movs	r5, #0
 80038d0:	e7d5      	b.n	800387e <setvbuf+0xde>
 80038d2:	4648      	mov	r0, r9
 80038d4:	f000 f9b6 	bl	8003c44 <malloc>
 80038d8:	4606      	mov	r6, r0
 80038da:	2800      	cmp	r0, #0
 80038dc:	d0b8      	beq.n	8003850 <setvbuf+0xb0>
 80038de:	89a3      	ldrh	r3, [r4, #12]
 80038e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038e4:	81a3      	strh	r3, [r4, #12]
 80038e6:	464d      	mov	r5, r9
 80038e8:	e7cf      	b.n	800388a <setvbuf+0xea>
 80038ea:	2500      	movs	r5, #0
 80038ec:	e7b2      	b.n	8003854 <setvbuf+0xb4>
 80038ee:	46a9      	mov	r9, r5
 80038f0:	e7f5      	b.n	80038de <setvbuf+0x13e>
 80038f2:	60a2      	str	r2, [r4, #8]
 80038f4:	e7e6      	b.n	80038c4 <setvbuf+0x124>
 80038f6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038f8:	f000 f958 	bl	8003bac <__retarget_lock_release_recursive>
 80038fc:	e7e7      	b.n	80038ce <setvbuf+0x12e>
 80038fe:	f04f 35ff 	mov.w	r5, #4294967295
 8003902:	e7bc      	b.n	800387e <setvbuf+0xde>
 8003904:	20000018 	.word	0x20000018

08003908 <__sread>:
 8003908:	b510      	push	{r4, lr}
 800390a:	460c      	mov	r4, r1
 800390c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003910:	f000 f8fc 	bl	8003b0c <_read_r>
 8003914:	2800      	cmp	r0, #0
 8003916:	bfab      	itete	ge
 8003918:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800391a:	89a3      	ldrhlt	r3, [r4, #12]
 800391c:	181b      	addge	r3, r3, r0
 800391e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003922:	bfac      	ite	ge
 8003924:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003926:	81a3      	strhlt	r3, [r4, #12]
 8003928:	bd10      	pop	{r4, pc}

0800392a <__swrite>:
 800392a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800392e:	461f      	mov	r7, r3
 8003930:	898b      	ldrh	r3, [r1, #12]
 8003932:	05db      	lsls	r3, r3, #23
 8003934:	4605      	mov	r5, r0
 8003936:	460c      	mov	r4, r1
 8003938:	4616      	mov	r6, r2
 800393a:	d505      	bpl.n	8003948 <__swrite+0x1e>
 800393c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003940:	2302      	movs	r3, #2
 8003942:	2200      	movs	r2, #0
 8003944:	f000 f8d0 	bl	8003ae8 <_lseek_r>
 8003948:	89a3      	ldrh	r3, [r4, #12]
 800394a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800394e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003952:	81a3      	strh	r3, [r4, #12]
 8003954:	4632      	mov	r2, r6
 8003956:	463b      	mov	r3, r7
 8003958:	4628      	mov	r0, r5
 800395a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800395e:	f000 b8e7 	b.w	8003b30 <_write_r>

08003962 <__sseek>:
 8003962:	b510      	push	{r4, lr}
 8003964:	460c      	mov	r4, r1
 8003966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800396a:	f000 f8bd 	bl	8003ae8 <_lseek_r>
 800396e:	1c43      	adds	r3, r0, #1
 8003970:	89a3      	ldrh	r3, [r4, #12]
 8003972:	bf15      	itete	ne
 8003974:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003976:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800397a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800397e:	81a3      	strheq	r3, [r4, #12]
 8003980:	bf18      	it	ne
 8003982:	81a3      	strhne	r3, [r4, #12]
 8003984:	bd10      	pop	{r4, pc}

08003986 <__sclose>:
 8003986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800398a:	f000 b89d 	b.w	8003ac8 <_close_r>

0800398e <__swbuf_r>:
 800398e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003990:	460e      	mov	r6, r1
 8003992:	4614      	mov	r4, r2
 8003994:	4605      	mov	r5, r0
 8003996:	b118      	cbz	r0, 80039a0 <__swbuf_r+0x12>
 8003998:	6a03      	ldr	r3, [r0, #32]
 800399a:	b90b      	cbnz	r3, 80039a0 <__swbuf_r+0x12>
 800399c:	f7ff fe48 	bl	8003630 <__sinit>
 80039a0:	69a3      	ldr	r3, [r4, #24]
 80039a2:	60a3      	str	r3, [r4, #8]
 80039a4:	89a3      	ldrh	r3, [r4, #12]
 80039a6:	071a      	lsls	r2, r3, #28
 80039a8:	d501      	bpl.n	80039ae <__swbuf_r+0x20>
 80039aa:	6923      	ldr	r3, [r4, #16]
 80039ac:	b943      	cbnz	r3, 80039c0 <__swbuf_r+0x32>
 80039ae:	4621      	mov	r1, r4
 80039b0:	4628      	mov	r0, r5
 80039b2:	f000 f82b 	bl	8003a0c <__swsetup_r>
 80039b6:	b118      	cbz	r0, 80039c0 <__swbuf_r+0x32>
 80039b8:	f04f 37ff 	mov.w	r7, #4294967295
 80039bc:	4638      	mov	r0, r7
 80039be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039c0:	6823      	ldr	r3, [r4, #0]
 80039c2:	6922      	ldr	r2, [r4, #16]
 80039c4:	1a98      	subs	r0, r3, r2
 80039c6:	6963      	ldr	r3, [r4, #20]
 80039c8:	b2f6      	uxtb	r6, r6
 80039ca:	4283      	cmp	r3, r0
 80039cc:	4637      	mov	r7, r6
 80039ce:	dc05      	bgt.n	80039dc <__swbuf_r+0x4e>
 80039d0:	4621      	mov	r1, r4
 80039d2:	4628      	mov	r0, r5
 80039d4:	f001 f83e 	bl	8004a54 <_fflush_r>
 80039d8:	2800      	cmp	r0, #0
 80039da:	d1ed      	bne.n	80039b8 <__swbuf_r+0x2a>
 80039dc:	68a3      	ldr	r3, [r4, #8]
 80039de:	3b01      	subs	r3, #1
 80039e0:	60a3      	str	r3, [r4, #8]
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	1c5a      	adds	r2, r3, #1
 80039e6:	6022      	str	r2, [r4, #0]
 80039e8:	701e      	strb	r6, [r3, #0]
 80039ea:	6962      	ldr	r2, [r4, #20]
 80039ec:	1c43      	adds	r3, r0, #1
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d004      	beq.n	80039fc <__swbuf_r+0x6e>
 80039f2:	89a3      	ldrh	r3, [r4, #12]
 80039f4:	07db      	lsls	r3, r3, #31
 80039f6:	d5e1      	bpl.n	80039bc <__swbuf_r+0x2e>
 80039f8:	2e0a      	cmp	r6, #10
 80039fa:	d1df      	bne.n	80039bc <__swbuf_r+0x2e>
 80039fc:	4621      	mov	r1, r4
 80039fe:	4628      	mov	r0, r5
 8003a00:	f001 f828 	bl	8004a54 <_fflush_r>
 8003a04:	2800      	cmp	r0, #0
 8003a06:	d0d9      	beq.n	80039bc <__swbuf_r+0x2e>
 8003a08:	e7d6      	b.n	80039b8 <__swbuf_r+0x2a>
	...

08003a0c <__swsetup_r>:
 8003a0c:	b538      	push	{r3, r4, r5, lr}
 8003a0e:	4b29      	ldr	r3, [pc, #164]	@ (8003ab4 <__swsetup_r+0xa8>)
 8003a10:	4605      	mov	r5, r0
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	460c      	mov	r4, r1
 8003a16:	b118      	cbz	r0, 8003a20 <__swsetup_r+0x14>
 8003a18:	6a03      	ldr	r3, [r0, #32]
 8003a1a:	b90b      	cbnz	r3, 8003a20 <__swsetup_r+0x14>
 8003a1c:	f7ff fe08 	bl	8003630 <__sinit>
 8003a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a24:	0719      	lsls	r1, r3, #28
 8003a26:	d422      	bmi.n	8003a6e <__swsetup_r+0x62>
 8003a28:	06da      	lsls	r2, r3, #27
 8003a2a:	d407      	bmi.n	8003a3c <__swsetup_r+0x30>
 8003a2c:	2209      	movs	r2, #9
 8003a2e:	602a      	str	r2, [r5, #0]
 8003a30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a34:	81a3      	strh	r3, [r4, #12]
 8003a36:	f04f 30ff 	mov.w	r0, #4294967295
 8003a3a:	e033      	b.n	8003aa4 <__swsetup_r+0x98>
 8003a3c:	0758      	lsls	r0, r3, #29
 8003a3e:	d512      	bpl.n	8003a66 <__swsetup_r+0x5a>
 8003a40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a42:	b141      	cbz	r1, 8003a56 <__swsetup_r+0x4a>
 8003a44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a48:	4299      	cmp	r1, r3
 8003a4a:	d002      	beq.n	8003a52 <__swsetup_r+0x46>
 8003a4c:	4628      	mov	r0, r5
 8003a4e:	f000 f8af 	bl	8003bb0 <_free_r>
 8003a52:	2300      	movs	r3, #0
 8003a54:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a56:	89a3      	ldrh	r3, [r4, #12]
 8003a58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003a5c:	81a3      	strh	r3, [r4, #12]
 8003a5e:	2300      	movs	r3, #0
 8003a60:	6063      	str	r3, [r4, #4]
 8003a62:	6923      	ldr	r3, [r4, #16]
 8003a64:	6023      	str	r3, [r4, #0]
 8003a66:	89a3      	ldrh	r3, [r4, #12]
 8003a68:	f043 0308 	orr.w	r3, r3, #8
 8003a6c:	81a3      	strh	r3, [r4, #12]
 8003a6e:	6923      	ldr	r3, [r4, #16]
 8003a70:	b94b      	cbnz	r3, 8003a86 <__swsetup_r+0x7a>
 8003a72:	89a3      	ldrh	r3, [r4, #12]
 8003a74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a7c:	d003      	beq.n	8003a86 <__swsetup_r+0x7a>
 8003a7e:	4621      	mov	r1, r4
 8003a80:	4628      	mov	r0, r5
 8003a82:	f001 f835 	bl	8004af0 <__smakebuf_r>
 8003a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a8a:	f013 0201 	ands.w	r2, r3, #1
 8003a8e:	d00a      	beq.n	8003aa6 <__swsetup_r+0x9a>
 8003a90:	2200      	movs	r2, #0
 8003a92:	60a2      	str	r2, [r4, #8]
 8003a94:	6962      	ldr	r2, [r4, #20]
 8003a96:	4252      	negs	r2, r2
 8003a98:	61a2      	str	r2, [r4, #24]
 8003a9a:	6922      	ldr	r2, [r4, #16]
 8003a9c:	b942      	cbnz	r2, 8003ab0 <__swsetup_r+0xa4>
 8003a9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003aa2:	d1c5      	bne.n	8003a30 <__swsetup_r+0x24>
 8003aa4:	bd38      	pop	{r3, r4, r5, pc}
 8003aa6:	0799      	lsls	r1, r3, #30
 8003aa8:	bf58      	it	pl
 8003aaa:	6962      	ldrpl	r2, [r4, #20]
 8003aac:	60a2      	str	r2, [r4, #8]
 8003aae:	e7f4      	b.n	8003a9a <__swsetup_r+0x8e>
 8003ab0:	2000      	movs	r0, #0
 8003ab2:	e7f7      	b.n	8003aa4 <__swsetup_r+0x98>
 8003ab4:	20000018 	.word	0x20000018

08003ab8 <memset>:
 8003ab8:	4402      	add	r2, r0
 8003aba:	4603      	mov	r3, r0
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d100      	bne.n	8003ac2 <memset+0xa>
 8003ac0:	4770      	bx	lr
 8003ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ac6:	e7f9      	b.n	8003abc <memset+0x4>

08003ac8 <_close_r>:
 8003ac8:	b538      	push	{r3, r4, r5, lr}
 8003aca:	4d06      	ldr	r5, [pc, #24]	@ (8003ae4 <_close_r+0x1c>)
 8003acc:	2300      	movs	r3, #0
 8003ace:	4604      	mov	r4, r0
 8003ad0:	4608      	mov	r0, r1
 8003ad2:	602b      	str	r3, [r5, #0]
 8003ad4:	f7fc fec6 	bl	8000864 <_close>
 8003ad8:	1c43      	adds	r3, r0, #1
 8003ada:	d102      	bne.n	8003ae2 <_close_r+0x1a>
 8003adc:	682b      	ldr	r3, [r5, #0]
 8003ade:	b103      	cbz	r3, 8003ae2 <_close_r+0x1a>
 8003ae0:	6023      	str	r3, [r4, #0]
 8003ae2:	bd38      	pop	{r3, r4, r5, pc}
 8003ae4:	20000254 	.word	0x20000254

08003ae8 <_lseek_r>:
 8003ae8:	b538      	push	{r3, r4, r5, lr}
 8003aea:	4d07      	ldr	r5, [pc, #28]	@ (8003b08 <_lseek_r+0x20>)
 8003aec:	4604      	mov	r4, r0
 8003aee:	4608      	mov	r0, r1
 8003af0:	4611      	mov	r1, r2
 8003af2:	2200      	movs	r2, #0
 8003af4:	602a      	str	r2, [r5, #0]
 8003af6:	461a      	mov	r2, r3
 8003af8:	f001 fb0c 	bl	8005114 <_lseek>
 8003afc:	1c43      	adds	r3, r0, #1
 8003afe:	d102      	bne.n	8003b06 <_lseek_r+0x1e>
 8003b00:	682b      	ldr	r3, [r5, #0]
 8003b02:	b103      	cbz	r3, 8003b06 <_lseek_r+0x1e>
 8003b04:	6023      	str	r3, [r4, #0]
 8003b06:	bd38      	pop	{r3, r4, r5, pc}
 8003b08:	20000254 	.word	0x20000254

08003b0c <_read_r>:
 8003b0c:	b538      	push	{r3, r4, r5, lr}
 8003b0e:	4d07      	ldr	r5, [pc, #28]	@ (8003b2c <_read_r+0x20>)
 8003b10:	4604      	mov	r4, r0
 8003b12:	4608      	mov	r0, r1
 8003b14:	4611      	mov	r1, r2
 8003b16:	2200      	movs	r2, #0
 8003b18:	602a      	str	r2, [r5, #0]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	f7fc feba 	bl	8000894 <_read>
 8003b20:	1c43      	adds	r3, r0, #1
 8003b22:	d102      	bne.n	8003b2a <_read_r+0x1e>
 8003b24:	682b      	ldr	r3, [r5, #0]
 8003b26:	b103      	cbz	r3, 8003b2a <_read_r+0x1e>
 8003b28:	6023      	str	r3, [r4, #0]
 8003b2a:	bd38      	pop	{r3, r4, r5, pc}
 8003b2c:	20000254 	.word	0x20000254

08003b30 <_write_r>:
 8003b30:	b538      	push	{r3, r4, r5, lr}
 8003b32:	4d07      	ldr	r5, [pc, #28]	@ (8003b50 <_write_r+0x20>)
 8003b34:	4604      	mov	r4, r0
 8003b36:	4608      	mov	r0, r1
 8003b38:	4611      	mov	r1, r2
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	602a      	str	r2, [r5, #0]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	f7fc fe64 	bl	800080c <_write>
 8003b44:	1c43      	adds	r3, r0, #1
 8003b46:	d102      	bne.n	8003b4e <_write_r+0x1e>
 8003b48:	682b      	ldr	r3, [r5, #0]
 8003b4a:	b103      	cbz	r3, 8003b4e <_write_r+0x1e>
 8003b4c:	6023      	str	r3, [r4, #0]
 8003b4e:	bd38      	pop	{r3, r4, r5, pc}
 8003b50:	20000254 	.word	0x20000254

08003b54 <__errno>:
 8003b54:	4b01      	ldr	r3, [pc, #4]	@ (8003b5c <__errno+0x8>)
 8003b56:	6818      	ldr	r0, [r3, #0]
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	20000018 	.word	0x20000018

08003b60 <__libc_init_array>:
 8003b60:	b570      	push	{r4, r5, r6, lr}
 8003b62:	4d0d      	ldr	r5, [pc, #52]	@ (8003b98 <__libc_init_array+0x38>)
 8003b64:	4c0d      	ldr	r4, [pc, #52]	@ (8003b9c <__libc_init_array+0x3c>)
 8003b66:	1b64      	subs	r4, r4, r5
 8003b68:	10a4      	asrs	r4, r4, #2
 8003b6a:	2600      	movs	r6, #0
 8003b6c:	42a6      	cmp	r6, r4
 8003b6e:	d109      	bne.n	8003b84 <__libc_init_array+0x24>
 8003b70:	4d0b      	ldr	r5, [pc, #44]	@ (8003ba0 <__libc_init_array+0x40>)
 8003b72:	4c0c      	ldr	r4, [pc, #48]	@ (8003ba4 <__libc_init_array+0x44>)
 8003b74:	f001 fad6 	bl	8005124 <_init>
 8003b78:	1b64      	subs	r4, r4, r5
 8003b7a:	10a4      	asrs	r4, r4, #2
 8003b7c:	2600      	movs	r6, #0
 8003b7e:	42a6      	cmp	r6, r4
 8003b80:	d105      	bne.n	8003b8e <__libc_init_array+0x2e>
 8003b82:	bd70      	pop	{r4, r5, r6, pc}
 8003b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b88:	4798      	blx	r3
 8003b8a:	3601      	adds	r6, #1
 8003b8c:	e7ee      	b.n	8003b6c <__libc_init_array+0xc>
 8003b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b92:	4798      	blx	r3
 8003b94:	3601      	adds	r6, #1
 8003b96:	e7f2      	b.n	8003b7e <__libc_init_array+0x1e>
 8003b98:	08005334 	.word	0x08005334
 8003b9c:	08005334 	.word	0x08005334
 8003ba0:	08005334 	.word	0x08005334
 8003ba4:	08005338 	.word	0x08005338

08003ba8 <__retarget_lock_init_recursive>:
 8003ba8:	4770      	bx	lr

08003baa <__retarget_lock_acquire_recursive>:
 8003baa:	4770      	bx	lr

08003bac <__retarget_lock_release_recursive>:
 8003bac:	4770      	bx	lr
	...

08003bb0 <_free_r>:
 8003bb0:	b538      	push	{r3, r4, r5, lr}
 8003bb2:	4605      	mov	r5, r0
 8003bb4:	2900      	cmp	r1, #0
 8003bb6:	d041      	beq.n	8003c3c <_free_r+0x8c>
 8003bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bbc:	1f0c      	subs	r4, r1, #4
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	bfb8      	it	lt
 8003bc2:	18e4      	addlt	r4, r4, r3
 8003bc4:	f000 f8e8 	bl	8003d98 <__malloc_lock>
 8003bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8003c40 <_free_r+0x90>)
 8003bca:	6813      	ldr	r3, [r2, #0]
 8003bcc:	b933      	cbnz	r3, 8003bdc <_free_r+0x2c>
 8003bce:	6063      	str	r3, [r4, #4]
 8003bd0:	6014      	str	r4, [r2, #0]
 8003bd2:	4628      	mov	r0, r5
 8003bd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bd8:	f000 b8e4 	b.w	8003da4 <__malloc_unlock>
 8003bdc:	42a3      	cmp	r3, r4
 8003bde:	d908      	bls.n	8003bf2 <_free_r+0x42>
 8003be0:	6820      	ldr	r0, [r4, #0]
 8003be2:	1821      	adds	r1, r4, r0
 8003be4:	428b      	cmp	r3, r1
 8003be6:	bf01      	itttt	eq
 8003be8:	6819      	ldreq	r1, [r3, #0]
 8003bea:	685b      	ldreq	r3, [r3, #4]
 8003bec:	1809      	addeq	r1, r1, r0
 8003bee:	6021      	streq	r1, [r4, #0]
 8003bf0:	e7ed      	b.n	8003bce <_free_r+0x1e>
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	b10b      	cbz	r3, 8003bfc <_free_r+0x4c>
 8003bf8:	42a3      	cmp	r3, r4
 8003bfa:	d9fa      	bls.n	8003bf2 <_free_r+0x42>
 8003bfc:	6811      	ldr	r1, [r2, #0]
 8003bfe:	1850      	adds	r0, r2, r1
 8003c00:	42a0      	cmp	r0, r4
 8003c02:	d10b      	bne.n	8003c1c <_free_r+0x6c>
 8003c04:	6820      	ldr	r0, [r4, #0]
 8003c06:	4401      	add	r1, r0
 8003c08:	1850      	adds	r0, r2, r1
 8003c0a:	4283      	cmp	r3, r0
 8003c0c:	6011      	str	r1, [r2, #0]
 8003c0e:	d1e0      	bne.n	8003bd2 <_free_r+0x22>
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	6053      	str	r3, [r2, #4]
 8003c16:	4408      	add	r0, r1
 8003c18:	6010      	str	r0, [r2, #0]
 8003c1a:	e7da      	b.n	8003bd2 <_free_r+0x22>
 8003c1c:	d902      	bls.n	8003c24 <_free_r+0x74>
 8003c1e:	230c      	movs	r3, #12
 8003c20:	602b      	str	r3, [r5, #0]
 8003c22:	e7d6      	b.n	8003bd2 <_free_r+0x22>
 8003c24:	6820      	ldr	r0, [r4, #0]
 8003c26:	1821      	adds	r1, r4, r0
 8003c28:	428b      	cmp	r3, r1
 8003c2a:	bf04      	itt	eq
 8003c2c:	6819      	ldreq	r1, [r3, #0]
 8003c2e:	685b      	ldreq	r3, [r3, #4]
 8003c30:	6063      	str	r3, [r4, #4]
 8003c32:	bf04      	itt	eq
 8003c34:	1809      	addeq	r1, r1, r0
 8003c36:	6021      	streq	r1, [r4, #0]
 8003c38:	6054      	str	r4, [r2, #4]
 8003c3a:	e7ca      	b.n	8003bd2 <_free_r+0x22>
 8003c3c:	bd38      	pop	{r3, r4, r5, pc}
 8003c3e:	bf00      	nop
 8003c40:	20000260 	.word	0x20000260

08003c44 <malloc>:
 8003c44:	4b02      	ldr	r3, [pc, #8]	@ (8003c50 <malloc+0xc>)
 8003c46:	4601      	mov	r1, r0
 8003c48:	6818      	ldr	r0, [r3, #0]
 8003c4a:	f000 b825 	b.w	8003c98 <_malloc_r>
 8003c4e:	bf00      	nop
 8003c50:	20000018 	.word	0x20000018

08003c54 <sbrk_aligned>:
 8003c54:	b570      	push	{r4, r5, r6, lr}
 8003c56:	4e0f      	ldr	r6, [pc, #60]	@ (8003c94 <sbrk_aligned+0x40>)
 8003c58:	460c      	mov	r4, r1
 8003c5a:	6831      	ldr	r1, [r6, #0]
 8003c5c:	4605      	mov	r5, r0
 8003c5e:	b911      	cbnz	r1, 8003c66 <sbrk_aligned+0x12>
 8003c60:	f001 f918 	bl	8004e94 <_sbrk_r>
 8003c64:	6030      	str	r0, [r6, #0]
 8003c66:	4621      	mov	r1, r4
 8003c68:	4628      	mov	r0, r5
 8003c6a:	f001 f913 	bl	8004e94 <_sbrk_r>
 8003c6e:	1c43      	adds	r3, r0, #1
 8003c70:	d103      	bne.n	8003c7a <sbrk_aligned+0x26>
 8003c72:	f04f 34ff 	mov.w	r4, #4294967295
 8003c76:	4620      	mov	r0, r4
 8003c78:	bd70      	pop	{r4, r5, r6, pc}
 8003c7a:	1cc4      	adds	r4, r0, #3
 8003c7c:	f024 0403 	bic.w	r4, r4, #3
 8003c80:	42a0      	cmp	r0, r4
 8003c82:	d0f8      	beq.n	8003c76 <sbrk_aligned+0x22>
 8003c84:	1a21      	subs	r1, r4, r0
 8003c86:	4628      	mov	r0, r5
 8003c88:	f001 f904 	bl	8004e94 <_sbrk_r>
 8003c8c:	3001      	adds	r0, #1
 8003c8e:	d1f2      	bne.n	8003c76 <sbrk_aligned+0x22>
 8003c90:	e7ef      	b.n	8003c72 <sbrk_aligned+0x1e>
 8003c92:	bf00      	nop
 8003c94:	2000025c 	.word	0x2000025c

08003c98 <_malloc_r>:
 8003c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c9c:	1ccd      	adds	r5, r1, #3
 8003c9e:	f025 0503 	bic.w	r5, r5, #3
 8003ca2:	3508      	adds	r5, #8
 8003ca4:	2d0c      	cmp	r5, #12
 8003ca6:	bf38      	it	cc
 8003ca8:	250c      	movcc	r5, #12
 8003caa:	2d00      	cmp	r5, #0
 8003cac:	4606      	mov	r6, r0
 8003cae:	db01      	blt.n	8003cb4 <_malloc_r+0x1c>
 8003cb0:	42a9      	cmp	r1, r5
 8003cb2:	d904      	bls.n	8003cbe <_malloc_r+0x26>
 8003cb4:	230c      	movs	r3, #12
 8003cb6:	6033      	str	r3, [r6, #0]
 8003cb8:	2000      	movs	r0, #0
 8003cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003d94 <_malloc_r+0xfc>
 8003cc2:	f000 f869 	bl	8003d98 <__malloc_lock>
 8003cc6:	f8d8 3000 	ldr.w	r3, [r8]
 8003cca:	461c      	mov	r4, r3
 8003ccc:	bb44      	cbnz	r4, 8003d20 <_malloc_r+0x88>
 8003cce:	4629      	mov	r1, r5
 8003cd0:	4630      	mov	r0, r6
 8003cd2:	f7ff ffbf 	bl	8003c54 <sbrk_aligned>
 8003cd6:	1c43      	adds	r3, r0, #1
 8003cd8:	4604      	mov	r4, r0
 8003cda:	d158      	bne.n	8003d8e <_malloc_r+0xf6>
 8003cdc:	f8d8 4000 	ldr.w	r4, [r8]
 8003ce0:	4627      	mov	r7, r4
 8003ce2:	2f00      	cmp	r7, #0
 8003ce4:	d143      	bne.n	8003d6e <_malloc_r+0xd6>
 8003ce6:	2c00      	cmp	r4, #0
 8003ce8:	d04b      	beq.n	8003d82 <_malloc_r+0xea>
 8003cea:	6823      	ldr	r3, [r4, #0]
 8003cec:	4639      	mov	r1, r7
 8003cee:	4630      	mov	r0, r6
 8003cf0:	eb04 0903 	add.w	r9, r4, r3
 8003cf4:	f001 f8ce 	bl	8004e94 <_sbrk_r>
 8003cf8:	4581      	cmp	r9, r0
 8003cfa:	d142      	bne.n	8003d82 <_malloc_r+0xea>
 8003cfc:	6821      	ldr	r1, [r4, #0]
 8003cfe:	1a6d      	subs	r5, r5, r1
 8003d00:	4629      	mov	r1, r5
 8003d02:	4630      	mov	r0, r6
 8003d04:	f7ff ffa6 	bl	8003c54 <sbrk_aligned>
 8003d08:	3001      	adds	r0, #1
 8003d0a:	d03a      	beq.n	8003d82 <_malloc_r+0xea>
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	442b      	add	r3, r5
 8003d10:	6023      	str	r3, [r4, #0]
 8003d12:	f8d8 3000 	ldr.w	r3, [r8]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	bb62      	cbnz	r2, 8003d74 <_malloc_r+0xdc>
 8003d1a:	f8c8 7000 	str.w	r7, [r8]
 8003d1e:	e00f      	b.n	8003d40 <_malloc_r+0xa8>
 8003d20:	6822      	ldr	r2, [r4, #0]
 8003d22:	1b52      	subs	r2, r2, r5
 8003d24:	d420      	bmi.n	8003d68 <_malloc_r+0xd0>
 8003d26:	2a0b      	cmp	r2, #11
 8003d28:	d917      	bls.n	8003d5a <_malloc_r+0xc2>
 8003d2a:	1961      	adds	r1, r4, r5
 8003d2c:	42a3      	cmp	r3, r4
 8003d2e:	6025      	str	r5, [r4, #0]
 8003d30:	bf18      	it	ne
 8003d32:	6059      	strne	r1, [r3, #4]
 8003d34:	6863      	ldr	r3, [r4, #4]
 8003d36:	bf08      	it	eq
 8003d38:	f8c8 1000 	streq.w	r1, [r8]
 8003d3c:	5162      	str	r2, [r4, r5]
 8003d3e:	604b      	str	r3, [r1, #4]
 8003d40:	4630      	mov	r0, r6
 8003d42:	f000 f82f 	bl	8003da4 <__malloc_unlock>
 8003d46:	f104 000b 	add.w	r0, r4, #11
 8003d4a:	1d23      	adds	r3, r4, #4
 8003d4c:	f020 0007 	bic.w	r0, r0, #7
 8003d50:	1ac2      	subs	r2, r0, r3
 8003d52:	bf1c      	itt	ne
 8003d54:	1a1b      	subne	r3, r3, r0
 8003d56:	50a3      	strne	r3, [r4, r2]
 8003d58:	e7af      	b.n	8003cba <_malloc_r+0x22>
 8003d5a:	6862      	ldr	r2, [r4, #4]
 8003d5c:	42a3      	cmp	r3, r4
 8003d5e:	bf0c      	ite	eq
 8003d60:	f8c8 2000 	streq.w	r2, [r8]
 8003d64:	605a      	strne	r2, [r3, #4]
 8003d66:	e7eb      	b.n	8003d40 <_malloc_r+0xa8>
 8003d68:	4623      	mov	r3, r4
 8003d6a:	6864      	ldr	r4, [r4, #4]
 8003d6c:	e7ae      	b.n	8003ccc <_malloc_r+0x34>
 8003d6e:	463c      	mov	r4, r7
 8003d70:	687f      	ldr	r7, [r7, #4]
 8003d72:	e7b6      	b.n	8003ce2 <_malloc_r+0x4a>
 8003d74:	461a      	mov	r2, r3
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	42a3      	cmp	r3, r4
 8003d7a:	d1fb      	bne.n	8003d74 <_malloc_r+0xdc>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	6053      	str	r3, [r2, #4]
 8003d80:	e7de      	b.n	8003d40 <_malloc_r+0xa8>
 8003d82:	230c      	movs	r3, #12
 8003d84:	6033      	str	r3, [r6, #0]
 8003d86:	4630      	mov	r0, r6
 8003d88:	f000 f80c 	bl	8003da4 <__malloc_unlock>
 8003d8c:	e794      	b.n	8003cb8 <_malloc_r+0x20>
 8003d8e:	6005      	str	r5, [r0, #0]
 8003d90:	e7d6      	b.n	8003d40 <_malloc_r+0xa8>
 8003d92:	bf00      	nop
 8003d94:	20000260 	.word	0x20000260

08003d98 <__malloc_lock>:
 8003d98:	4801      	ldr	r0, [pc, #4]	@ (8003da0 <__malloc_lock+0x8>)
 8003d9a:	f7ff bf06 	b.w	8003baa <__retarget_lock_acquire_recursive>
 8003d9e:	bf00      	nop
 8003da0:	20000258 	.word	0x20000258

08003da4 <__malloc_unlock>:
 8003da4:	4801      	ldr	r0, [pc, #4]	@ (8003dac <__malloc_unlock+0x8>)
 8003da6:	f7ff bf01 	b.w	8003bac <__retarget_lock_release_recursive>
 8003daa:	bf00      	nop
 8003dac:	20000258 	.word	0x20000258

08003db0 <__sfputc_r>:
 8003db0:	6893      	ldr	r3, [r2, #8]
 8003db2:	3b01      	subs	r3, #1
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	b410      	push	{r4}
 8003db8:	6093      	str	r3, [r2, #8]
 8003dba:	da08      	bge.n	8003dce <__sfputc_r+0x1e>
 8003dbc:	6994      	ldr	r4, [r2, #24]
 8003dbe:	42a3      	cmp	r3, r4
 8003dc0:	db01      	blt.n	8003dc6 <__sfputc_r+0x16>
 8003dc2:	290a      	cmp	r1, #10
 8003dc4:	d103      	bne.n	8003dce <__sfputc_r+0x1e>
 8003dc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003dca:	f7ff bde0 	b.w	800398e <__swbuf_r>
 8003dce:	6813      	ldr	r3, [r2, #0]
 8003dd0:	1c58      	adds	r0, r3, #1
 8003dd2:	6010      	str	r0, [r2, #0]
 8003dd4:	7019      	strb	r1, [r3, #0]
 8003dd6:	4608      	mov	r0, r1
 8003dd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <__sfputs_r>:
 8003dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de0:	4606      	mov	r6, r0
 8003de2:	460f      	mov	r7, r1
 8003de4:	4614      	mov	r4, r2
 8003de6:	18d5      	adds	r5, r2, r3
 8003de8:	42ac      	cmp	r4, r5
 8003dea:	d101      	bne.n	8003df0 <__sfputs_r+0x12>
 8003dec:	2000      	movs	r0, #0
 8003dee:	e007      	b.n	8003e00 <__sfputs_r+0x22>
 8003df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003df4:	463a      	mov	r2, r7
 8003df6:	4630      	mov	r0, r6
 8003df8:	f7ff ffda 	bl	8003db0 <__sfputc_r>
 8003dfc:	1c43      	adds	r3, r0, #1
 8003dfe:	d1f3      	bne.n	8003de8 <__sfputs_r+0xa>
 8003e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e04 <_vfiprintf_r>:
 8003e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e08:	460d      	mov	r5, r1
 8003e0a:	b09d      	sub	sp, #116	@ 0x74
 8003e0c:	4614      	mov	r4, r2
 8003e0e:	4698      	mov	r8, r3
 8003e10:	4606      	mov	r6, r0
 8003e12:	b118      	cbz	r0, 8003e1c <_vfiprintf_r+0x18>
 8003e14:	6a03      	ldr	r3, [r0, #32]
 8003e16:	b90b      	cbnz	r3, 8003e1c <_vfiprintf_r+0x18>
 8003e18:	f7ff fc0a 	bl	8003630 <__sinit>
 8003e1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e1e:	07d9      	lsls	r1, r3, #31
 8003e20:	d405      	bmi.n	8003e2e <_vfiprintf_r+0x2a>
 8003e22:	89ab      	ldrh	r3, [r5, #12]
 8003e24:	059a      	lsls	r2, r3, #22
 8003e26:	d402      	bmi.n	8003e2e <_vfiprintf_r+0x2a>
 8003e28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e2a:	f7ff febe 	bl	8003baa <__retarget_lock_acquire_recursive>
 8003e2e:	89ab      	ldrh	r3, [r5, #12]
 8003e30:	071b      	lsls	r3, r3, #28
 8003e32:	d501      	bpl.n	8003e38 <_vfiprintf_r+0x34>
 8003e34:	692b      	ldr	r3, [r5, #16]
 8003e36:	b99b      	cbnz	r3, 8003e60 <_vfiprintf_r+0x5c>
 8003e38:	4629      	mov	r1, r5
 8003e3a:	4630      	mov	r0, r6
 8003e3c:	f7ff fde6 	bl	8003a0c <__swsetup_r>
 8003e40:	b170      	cbz	r0, 8003e60 <_vfiprintf_r+0x5c>
 8003e42:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e44:	07dc      	lsls	r4, r3, #31
 8003e46:	d504      	bpl.n	8003e52 <_vfiprintf_r+0x4e>
 8003e48:	f04f 30ff 	mov.w	r0, #4294967295
 8003e4c:	b01d      	add	sp, #116	@ 0x74
 8003e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e52:	89ab      	ldrh	r3, [r5, #12]
 8003e54:	0598      	lsls	r0, r3, #22
 8003e56:	d4f7      	bmi.n	8003e48 <_vfiprintf_r+0x44>
 8003e58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e5a:	f7ff fea7 	bl	8003bac <__retarget_lock_release_recursive>
 8003e5e:	e7f3      	b.n	8003e48 <_vfiprintf_r+0x44>
 8003e60:	2300      	movs	r3, #0
 8003e62:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e64:	2320      	movs	r3, #32
 8003e66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003e6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e6e:	2330      	movs	r3, #48	@ 0x30
 8003e70:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004020 <_vfiprintf_r+0x21c>
 8003e74:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003e78:	f04f 0901 	mov.w	r9, #1
 8003e7c:	4623      	mov	r3, r4
 8003e7e:	469a      	mov	sl, r3
 8003e80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e84:	b10a      	cbz	r2, 8003e8a <_vfiprintf_r+0x86>
 8003e86:	2a25      	cmp	r2, #37	@ 0x25
 8003e88:	d1f9      	bne.n	8003e7e <_vfiprintf_r+0x7a>
 8003e8a:	ebba 0b04 	subs.w	fp, sl, r4
 8003e8e:	d00b      	beq.n	8003ea8 <_vfiprintf_r+0xa4>
 8003e90:	465b      	mov	r3, fp
 8003e92:	4622      	mov	r2, r4
 8003e94:	4629      	mov	r1, r5
 8003e96:	4630      	mov	r0, r6
 8003e98:	f7ff ffa1 	bl	8003dde <__sfputs_r>
 8003e9c:	3001      	adds	r0, #1
 8003e9e:	f000 80a7 	beq.w	8003ff0 <_vfiprintf_r+0x1ec>
 8003ea2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003ea4:	445a      	add	r2, fp
 8003ea6:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 809f 	beq.w	8003ff0 <_vfiprintf_r+0x1ec>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ebc:	f10a 0a01 	add.w	sl, sl, #1
 8003ec0:	9304      	str	r3, [sp, #16]
 8003ec2:	9307      	str	r3, [sp, #28]
 8003ec4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003ec8:	931a      	str	r3, [sp, #104]	@ 0x68
 8003eca:	4654      	mov	r4, sl
 8003ecc:	2205      	movs	r2, #5
 8003ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ed2:	4853      	ldr	r0, [pc, #332]	@ (8004020 <_vfiprintf_r+0x21c>)
 8003ed4:	f7fc f97c 	bl	80001d0 <memchr>
 8003ed8:	9a04      	ldr	r2, [sp, #16]
 8003eda:	b9d8      	cbnz	r0, 8003f14 <_vfiprintf_r+0x110>
 8003edc:	06d1      	lsls	r1, r2, #27
 8003ede:	bf44      	itt	mi
 8003ee0:	2320      	movmi	r3, #32
 8003ee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ee6:	0713      	lsls	r3, r2, #28
 8003ee8:	bf44      	itt	mi
 8003eea:	232b      	movmi	r3, #43	@ 0x2b
 8003eec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ef4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ef6:	d015      	beq.n	8003f24 <_vfiprintf_r+0x120>
 8003ef8:	9a07      	ldr	r2, [sp, #28]
 8003efa:	4654      	mov	r4, sl
 8003efc:	2000      	movs	r0, #0
 8003efe:	f04f 0c0a 	mov.w	ip, #10
 8003f02:	4621      	mov	r1, r4
 8003f04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f08:	3b30      	subs	r3, #48	@ 0x30
 8003f0a:	2b09      	cmp	r3, #9
 8003f0c:	d94b      	bls.n	8003fa6 <_vfiprintf_r+0x1a2>
 8003f0e:	b1b0      	cbz	r0, 8003f3e <_vfiprintf_r+0x13a>
 8003f10:	9207      	str	r2, [sp, #28]
 8003f12:	e014      	b.n	8003f3e <_vfiprintf_r+0x13a>
 8003f14:	eba0 0308 	sub.w	r3, r0, r8
 8003f18:	fa09 f303 	lsl.w	r3, r9, r3
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	9304      	str	r3, [sp, #16]
 8003f20:	46a2      	mov	sl, r4
 8003f22:	e7d2      	b.n	8003eca <_vfiprintf_r+0xc6>
 8003f24:	9b03      	ldr	r3, [sp, #12]
 8003f26:	1d19      	adds	r1, r3, #4
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	9103      	str	r1, [sp, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bfbb      	ittet	lt
 8003f30:	425b      	neglt	r3, r3
 8003f32:	f042 0202 	orrlt.w	r2, r2, #2
 8003f36:	9307      	strge	r3, [sp, #28]
 8003f38:	9307      	strlt	r3, [sp, #28]
 8003f3a:	bfb8      	it	lt
 8003f3c:	9204      	strlt	r2, [sp, #16]
 8003f3e:	7823      	ldrb	r3, [r4, #0]
 8003f40:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f42:	d10a      	bne.n	8003f5a <_vfiprintf_r+0x156>
 8003f44:	7863      	ldrb	r3, [r4, #1]
 8003f46:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f48:	d132      	bne.n	8003fb0 <_vfiprintf_r+0x1ac>
 8003f4a:	9b03      	ldr	r3, [sp, #12]
 8003f4c:	1d1a      	adds	r2, r3, #4
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	9203      	str	r2, [sp, #12]
 8003f52:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003f56:	3402      	adds	r4, #2
 8003f58:	9305      	str	r3, [sp, #20]
 8003f5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004030 <_vfiprintf_r+0x22c>
 8003f5e:	7821      	ldrb	r1, [r4, #0]
 8003f60:	2203      	movs	r2, #3
 8003f62:	4650      	mov	r0, sl
 8003f64:	f7fc f934 	bl	80001d0 <memchr>
 8003f68:	b138      	cbz	r0, 8003f7a <_vfiprintf_r+0x176>
 8003f6a:	9b04      	ldr	r3, [sp, #16]
 8003f6c:	eba0 000a 	sub.w	r0, r0, sl
 8003f70:	2240      	movs	r2, #64	@ 0x40
 8003f72:	4082      	lsls	r2, r0
 8003f74:	4313      	orrs	r3, r2
 8003f76:	3401      	adds	r4, #1
 8003f78:	9304      	str	r3, [sp, #16]
 8003f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f7e:	4829      	ldr	r0, [pc, #164]	@ (8004024 <_vfiprintf_r+0x220>)
 8003f80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003f84:	2206      	movs	r2, #6
 8003f86:	f7fc f923 	bl	80001d0 <memchr>
 8003f8a:	2800      	cmp	r0, #0
 8003f8c:	d03f      	beq.n	800400e <_vfiprintf_r+0x20a>
 8003f8e:	4b26      	ldr	r3, [pc, #152]	@ (8004028 <_vfiprintf_r+0x224>)
 8003f90:	bb1b      	cbnz	r3, 8003fda <_vfiprintf_r+0x1d6>
 8003f92:	9b03      	ldr	r3, [sp, #12]
 8003f94:	3307      	adds	r3, #7
 8003f96:	f023 0307 	bic.w	r3, r3, #7
 8003f9a:	3308      	adds	r3, #8
 8003f9c:	9303      	str	r3, [sp, #12]
 8003f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fa0:	443b      	add	r3, r7
 8003fa2:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fa4:	e76a      	b.n	8003e7c <_vfiprintf_r+0x78>
 8003fa6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003faa:	460c      	mov	r4, r1
 8003fac:	2001      	movs	r0, #1
 8003fae:	e7a8      	b.n	8003f02 <_vfiprintf_r+0xfe>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	3401      	adds	r4, #1
 8003fb4:	9305      	str	r3, [sp, #20]
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	f04f 0c0a 	mov.w	ip, #10
 8003fbc:	4620      	mov	r0, r4
 8003fbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fc2:	3a30      	subs	r2, #48	@ 0x30
 8003fc4:	2a09      	cmp	r2, #9
 8003fc6:	d903      	bls.n	8003fd0 <_vfiprintf_r+0x1cc>
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0c6      	beq.n	8003f5a <_vfiprintf_r+0x156>
 8003fcc:	9105      	str	r1, [sp, #20]
 8003fce:	e7c4      	b.n	8003f5a <_vfiprintf_r+0x156>
 8003fd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fd4:	4604      	mov	r4, r0
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e7f0      	b.n	8003fbc <_vfiprintf_r+0x1b8>
 8003fda:	ab03      	add	r3, sp, #12
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	462a      	mov	r2, r5
 8003fe0:	4b12      	ldr	r3, [pc, #72]	@ (800402c <_vfiprintf_r+0x228>)
 8003fe2:	a904      	add	r1, sp, #16
 8003fe4:	4630      	mov	r0, r6
 8003fe6:	f3af 8000 	nop.w
 8003fea:	4607      	mov	r7, r0
 8003fec:	1c78      	adds	r0, r7, #1
 8003fee:	d1d6      	bne.n	8003f9e <_vfiprintf_r+0x19a>
 8003ff0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ff2:	07d9      	lsls	r1, r3, #31
 8003ff4:	d405      	bmi.n	8004002 <_vfiprintf_r+0x1fe>
 8003ff6:	89ab      	ldrh	r3, [r5, #12]
 8003ff8:	059a      	lsls	r2, r3, #22
 8003ffa:	d402      	bmi.n	8004002 <_vfiprintf_r+0x1fe>
 8003ffc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ffe:	f7ff fdd5 	bl	8003bac <__retarget_lock_release_recursive>
 8004002:	89ab      	ldrh	r3, [r5, #12]
 8004004:	065b      	lsls	r3, r3, #25
 8004006:	f53f af1f 	bmi.w	8003e48 <_vfiprintf_r+0x44>
 800400a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800400c:	e71e      	b.n	8003e4c <_vfiprintf_r+0x48>
 800400e:	ab03      	add	r3, sp, #12
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	462a      	mov	r2, r5
 8004014:	4b05      	ldr	r3, [pc, #20]	@ (800402c <_vfiprintf_r+0x228>)
 8004016:	a904      	add	r1, sp, #16
 8004018:	4630      	mov	r0, r6
 800401a:	f000 f879 	bl	8004110 <_printf_i>
 800401e:	e7e4      	b.n	8003fea <_vfiprintf_r+0x1e6>
 8004020:	080051dc 	.word	0x080051dc
 8004024:	080051e6 	.word	0x080051e6
 8004028:	00000000 	.word	0x00000000
 800402c:	08003ddf 	.word	0x08003ddf
 8004030:	080051e2 	.word	0x080051e2

08004034 <_printf_common>:
 8004034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004038:	4616      	mov	r6, r2
 800403a:	4698      	mov	r8, r3
 800403c:	688a      	ldr	r2, [r1, #8]
 800403e:	690b      	ldr	r3, [r1, #16]
 8004040:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004044:	4293      	cmp	r3, r2
 8004046:	bfb8      	it	lt
 8004048:	4613      	movlt	r3, r2
 800404a:	6033      	str	r3, [r6, #0]
 800404c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004050:	4607      	mov	r7, r0
 8004052:	460c      	mov	r4, r1
 8004054:	b10a      	cbz	r2, 800405a <_printf_common+0x26>
 8004056:	3301      	adds	r3, #1
 8004058:	6033      	str	r3, [r6, #0]
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	0699      	lsls	r1, r3, #26
 800405e:	bf42      	ittt	mi
 8004060:	6833      	ldrmi	r3, [r6, #0]
 8004062:	3302      	addmi	r3, #2
 8004064:	6033      	strmi	r3, [r6, #0]
 8004066:	6825      	ldr	r5, [r4, #0]
 8004068:	f015 0506 	ands.w	r5, r5, #6
 800406c:	d106      	bne.n	800407c <_printf_common+0x48>
 800406e:	f104 0a19 	add.w	sl, r4, #25
 8004072:	68e3      	ldr	r3, [r4, #12]
 8004074:	6832      	ldr	r2, [r6, #0]
 8004076:	1a9b      	subs	r3, r3, r2
 8004078:	42ab      	cmp	r3, r5
 800407a:	dc26      	bgt.n	80040ca <_printf_common+0x96>
 800407c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004080:	6822      	ldr	r2, [r4, #0]
 8004082:	3b00      	subs	r3, #0
 8004084:	bf18      	it	ne
 8004086:	2301      	movne	r3, #1
 8004088:	0692      	lsls	r2, r2, #26
 800408a:	d42b      	bmi.n	80040e4 <_printf_common+0xb0>
 800408c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004090:	4641      	mov	r1, r8
 8004092:	4638      	mov	r0, r7
 8004094:	47c8      	blx	r9
 8004096:	3001      	adds	r0, #1
 8004098:	d01e      	beq.n	80040d8 <_printf_common+0xa4>
 800409a:	6823      	ldr	r3, [r4, #0]
 800409c:	6922      	ldr	r2, [r4, #16]
 800409e:	f003 0306 	and.w	r3, r3, #6
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	bf02      	ittt	eq
 80040a6:	68e5      	ldreq	r5, [r4, #12]
 80040a8:	6833      	ldreq	r3, [r6, #0]
 80040aa:	1aed      	subeq	r5, r5, r3
 80040ac:	68a3      	ldr	r3, [r4, #8]
 80040ae:	bf0c      	ite	eq
 80040b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040b4:	2500      	movne	r5, #0
 80040b6:	4293      	cmp	r3, r2
 80040b8:	bfc4      	itt	gt
 80040ba:	1a9b      	subgt	r3, r3, r2
 80040bc:	18ed      	addgt	r5, r5, r3
 80040be:	2600      	movs	r6, #0
 80040c0:	341a      	adds	r4, #26
 80040c2:	42b5      	cmp	r5, r6
 80040c4:	d11a      	bne.n	80040fc <_printf_common+0xc8>
 80040c6:	2000      	movs	r0, #0
 80040c8:	e008      	b.n	80040dc <_printf_common+0xa8>
 80040ca:	2301      	movs	r3, #1
 80040cc:	4652      	mov	r2, sl
 80040ce:	4641      	mov	r1, r8
 80040d0:	4638      	mov	r0, r7
 80040d2:	47c8      	blx	r9
 80040d4:	3001      	adds	r0, #1
 80040d6:	d103      	bne.n	80040e0 <_printf_common+0xac>
 80040d8:	f04f 30ff 	mov.w	r0, #4294967295
 80040dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040e0:	3501      	adds	r5, #1
 80040e2:	e7c6      	b.n	8004072 <_printf_common+0x3e>
 80040e4:	18e1      	adds	r1, r4, r3
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	2030      	movs	r0, #48	@ 0x30
 80040ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80040ee:	4422      	add	r2, r4
 80040f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80040f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80040f8:	3302      	adds	r3, #2
 80040fa:	e7c7      	b.n	800408c <_printf_common+0x58>
 80040fc:	2301      	movs	r3, #1
 80040fe:	4622      	mov	r2, r4
 8004100:	4641      	mov	r1, r8
 8004102:	4638      	mov	r0, r7
 8004104:	47c8      	blx	r9
 8004106:	3001      	adds	r0, #1
 8004108:	d0e6      	beq.n	80040d8 <_printf_common+0xa4>
 800410a:	3601      	adds	r6, #1
 800410c:	e7d9      	b.n	80040c2 <_printf_common+0x8e>
	...

08004110 <_printf_i>:
 8004110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004114:	7e0f      	ldrb	r7, [r1, #24]
 8004116:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004118:	2f78      	cmp	r7, #120	@ 0x78
 800411a:	4691      	mov	r9, r2
 800411c:	4680      	mov	r8, r0
 800411e:	460c      	mov	r4, r1
 8004120:	469a      	mov	sl, r3
 8004122:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004126:	d807      	bhi.n	8004138 <_printf_i+0x28>
 8004128:	2f62      	cmp	r7, #98	@ 0x62
 800412a:	d80a      	bhi.n	8004142 <_printf_i+0x32>
 800412c:	2f00      	cmp	r7, #0
 800412e:	f000 80d2 	beq.w	80042d6 <_printf_i+0x1c6>
 8004132:	2f58      	cmp	r7, #88	@ 0x58
 8004134:	f000 80b9 	beq.w	80042aa <_printf_i+0x19a>
 8004138:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800413c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004140:	e03a      	b.n	80041b8 <_printf_i+0xa8>
 8004142:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004146:	2b15      	cmp	r3, #21
 8004148:	d8f6      	bhi.n	8004138 <_printf_i+0x28>
 800414a:	a101      	add	r1, pc, #4	@ (adr r1, 8004150 <_printf_i+0x40>)
 800414c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004150:	080041a9 	.word	0x080041a9
 8004154:	080041bd 	.word	0x080041bd
 8004158:	08004139 	.word	0x08004139
 800415c:	08004139 	.word	0x08004139
 8004160:	08004139 	.word	0x08004139
 8004164:	08004139 	.word	0x08004139
 8004168:	080041bd 	.word	0x080041bd
 800416c:	08004139 	.word	0x08004139
 8004170:	08004139 	.word	0x08004139
 8004174:	08004139 	.word	0x08004139
 8004178:	08004139 	.word	0x08004139
 800417c:	080042bd 	.word	0x080042bd
 8004180:	080041e7 	.word	0x080041e7
 8004184:	08004277 	.word	0x08004277
 8004188:	08004139 	.word	0x08004139
 800418c:	08004139 	.word	0x08004139
 8004190:	080042df 	.word	0x080042df
 8004194:	08004139 	.word	0x08004139
 8004198:	080041e7 	.word	0x080041e7
 800419c:	08004139 	.word	0x08004139
 80041a0:	08004139 	.word	0x08004139
 80041a4:	0800427f 	.word	0x0800427f
 80041a8:	6833      	ldr	r3, [r6, #0]
 80041aa:	1d1a      	adds	r2, r3, #4
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6032      	str	r2, [r6, #0]
 80041b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80041b8:	2301      	movs	r3, #1
 80041ba:	e09d      	b.n	80042f8 <_printf_i+0x1e8>
 80041bc:	6833      	ldr	r3, [r6, #0]
 80041be:	6820      	ldr	r0, [r4, #0]
 80041c0:	1d19      	adds	r1, r3, #4
 80041c2:	6031      	str	r1, [r6, #0]
 80041c4:	0606      	lsls	r6, r0, #24
 80041c6:	d501      	bpl.n	80041cc <_printf_i+0xbc>
 80041c8:	681d      	ldr	r5, [r3, #0]
 80041ca:	e003      	b.n	80041d4 <_printf_i+0xc4>
 80041cc:	0645      	lsls	r5, r0, #25
 80041ce:	d5fb      	bpl.n	80041c8 <_printf_i+0xb8>
 80041d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80041d4:	2d00      	cmp	r5, #0
 80041d6:	da03      	bge.n	80041e0 <_printf_i+0xd0>
 80041d8:	232d      	movs	r3, #45	@ 0x2d
 80041da:	426d      	negs	r5, r5
 80041dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041e0:	4859      	ldr	r0, [pc, #356]	@ (8004348 <_printf_i+0x238>)
 80041e2:	230a      	movs	r3, #10
 80041e4:	e011      	b.n	800420a <_printf_i+0xfa>
 80041e6:	6821      	ldr	r1, [r4, #0]
 80041e8:	6833      	ldr	r3, [r6, #0]
 80041ea:	0608      	lsls	r0, r1, #24
 80041ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80041f0:	d402      	bmi.n	80041f8 <_printf_i+0xe8>
 80041f2:	0649      	lsls	r1, r1, #25
 80041f4:	bf48      	it	mi
 80041f6:	b2ad      	uxthmi	r5, r5
 80041f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80041fa:	4853      	ldr	r0, [pc, #332]	@ (8004348 <_printf_i+0x238>)
 80041fc:	6033      	str	r3, [r6, #0]
 80041fe:	bf14      	ite	ne
 8004200:	230a      	movne	r3, #10
 8004202:	2308      	moveq	r3, #8
 8004204:	2100      	movs	r1, #0
 8004206:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800420a:	6866      	ldr	r6, [r4, #4]
 800420c:	60a6      	str	r6, [r4, #8]
 800420e:	2e00      	cmp	r6, #0
 8004210:	bfa2      	ittt	ge
 8004212:	6821      	ldrge	r1, [r4, #0]
 8004214:	f021 0104 	bicge.w	r1, r1, #4
 8004218:	6021      	strge	r1, [r4, #0]
 800421a:	b90d      	cbnz	r5, 8004220 <_printf_i+0x110>
 800421c:	2e00      	cmp	r6, #0
 800421e:	d04b      	beq.n	80042b8 <_printf_i+0x1a8>
 8004220:	4616      	mov	r6, r2
 8004222:	fbb5 f1f3 	udiv	r1, r5, r3
 8004226:	fb03 5711 	mls	r7, r3, r1, r5
 800422a:	5dc7      	ldrb	r7, [r0, r7]
 800422c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004230:	462f      	mov	r7, r5
 8004232:	42bb      	cmp	r3, r7
 8004234:	460d      	mov	r5, r1
 8004236:	d9f4      	bls.n	8004222 <_printf_i+0x112>
 8004238:	2b08      	cmp	r3, #8
 800423a:	d10b      	bne.n	8004254 <_printf_i+0x144>
 800423c:	6823      	ldr	r3, [r4, #0]
 800423e:	07df      	lsls	r7, r3, #31
 8004240:	d508      	bpl.n	8004254 <_printf_i+0x144>
 8004242:	6923      	ldr	r3, [r4, #16]
 8004244:	6861      	ldr	r1, [r4, #4]
 8004246:	4299      	cmp	r1, r3
 8004248:	bfde      	ittt	le
 800424a:	2330      	movle	r3, #48	@ 0x30
 800424c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004250:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004254:	1b92      	subs	r2, r2, r6
 8004256:	6122      	str	r2, [r4, #16]
 8004258:	f8cd a000 	str.w	sl, [sp]
 800425c:	464b      	mov	r3, r9
 800425e:	aa03      	add	r2, sp, #12
 8004260:	4621      	mov	r1, r4
 8004262:	4640      	mov	r0, r8
 8004264:	f7ff fee6 	bl	8004034 <_printf_common>
 8004268:	3001      	adds	r0, #1
 800426a:	d14a      	bne.n	8004302 <_printf_i+0x1f2>
 800426c:	f04f 30ff 	mov.w	r0, #4294967295
 8004270:	b004      	add	sp, #16
 8004272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	f043 0320 	orr.w	r3, r3, #32
 800427c:	6023      	str	r3, [r4, #0]
 800427e:	4833      	ldr	r0, [pc, #204]	@ (800434c <_printf_i+0x23c>)
 8004280:	2778      	movs	r7, #120	@ 0x78
 8004282:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004286:	6823      	ldr	r3, [r4, #0]
 8004288:	6831      	ldr	r1, [r6, #0]
 800428a:	061f      	lsls	r7, r3, #24
 800428c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004290:	d402      	bmi.n	8004298 <_printf_i+0x188>
 8004292:	065f      	lsls	r7, r3, #25
 8004294:	bf48      	it	mi
 8004296:	b2ad      	uxthmi	r5, r5
 8004298:	6031      	str	r1, [r6, #0]
 800429a:	07d9      	lsls	r1, r3, #31
 800429c:	bf44      	itt	mi
 800429e:	f043 0320 	orrmi.w	r3, r3, #32
 80042a2:	6023      	strmi	r3, [r4, #0]
 80042a4:	b11d      	cbz	r5, 80042ae <_printf_i+0x19e>
 80042a6:	2310      	movs	r3, #16
 80042a8:	e7ac      	b.n	8004204 <_printf_i+0xf4>
 80042aa:	4827      	ldr	r0, [pc, #156]	@ (8004348 <_printf_i+0x238>)
 80042ac:	e7e9      	b.n	8004282 <_printf_i+0x172>
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	f023 0320 	bic.w	r3, r3, #32
 80042b4:	6023      	str	r3, [r4, #0]
 80042b6:	e7f6      	b.n	80042a6 <_printf_i+0x196>
 80042b8:	4616      	mov	r6, r2
 80042ba:	e7bd      	b.n	8004238 <_printf_i+0x128>
 80042bc:	6833      	ldr	r3, [r6, #0]
 80042be:	6825      	ldr	r5, [r4, #0]
 80042c0:	6961      	ldr	r1, [r4, #20]
 80042c2:	1d18      	adds	r0, r3, #4
 80042c4:	6030      	str	r0, [r6, #0]
 80042c6:	062e      	lsls	r6, r5, #24
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	d501      	bpl.n	80042d0 <_printf_i+0x1c0>
 80042cc:	6019      	str	r1, [r3, #0]
 80042ce:	e002      	b.n	80042d6 <_printf_i+0x1c6>
 80042d0:	0668      	lsls	r0, r5, #25
 80042d2:	d5fb      	bpl.n	80042cc <_printf_i+0x1bc>
 80042d4:	8019      	strh	r1, [r3, #0]
 80042d6:	2300      	movs	r3, #0
 80042d8:	6123      	str	r3, [r4, #16]
 80042da:	4616      	mov	r6, r2
 80042dc:	e7bc      	b.n	8004258 <_printf_i+0x148>
 80042de:	6833      	ldr	r3, [r6, #0]
 80042e0:	1d1a      	adds	r2, r3, #4
 80042e2:	6032      	str	r2, [r6, #0]
 80042e4:	681e      	ldr	r6, [r3, #0]
 80042e6:	6862      	ldr	r2, [r4, #4]
 80042e8:	2100      	movs	r1, #0
 80042ea:	4630      	mov	r0, r6
 80042ec:	f7fb ff70 	bl	80001d0 <memchr>
 80042f0:	b108      	cbz	r0, 80042f6 <_printf_i+0x1e6>
 80042f2:	1b80      	subs	r0, r0, r6
 80042f4:	6060      	str	r0, [r4, #4]
 80042f6:	6863      	ldr	r3, [r4, #4]
 80042f8:	6123      	str	r3, [r4, #16]
 80042fa:	2300      	movs	r3, #0
 80042fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004300:	e7aa      	b.n	8004258 <_printf_i+0x148>
 8004302:	6923      	ldr	r3, [r4, #16]
 8004304:	4632      	mov	r2, r6
 8004306:	4649      	mov	r1, r9
 8004308:	4640      	mov	r0, r8
 800430a:	47d0      	blx	sl
 800430c:	3001      	adds	r0, #1
 800430e:	d0ad      	beq.n	800426c <_printf_i+0x15c>
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	079b      	lsls	r3, r3, #30
 8004314:	d413      	bmi.n	800433e <_printf_i+0x22e>
 8004316:	68e0      	ldr	r0, [r4, #12]
 8004318:	9b03      	ldr	r3, [sp, #12]
 800431a:	4298      	cmp	r0, r3
 800431c:	bfb8      	it	lt
 800431e:	4618      	movlt	r0, r3
 8004320:	e7a6      	b.n	8004270 <_printf_i+0x160>
 8004322:	2301      	movs	r3, #1
 8004324:	4632      	mov	r2, r6
 8004326:	4649      	mov	r1, r9
 8004328:	4640      	mov	r0, r8
 800432a:	47d0      	blx	sl
 800432c:	3001      	adds	r0, #1
 800432e:	d09d      	beq.n	800426c <_printf_i+0x15c>
 8004330:	3501      	adds	r5, #1
 8004332:	68e3      	ldr	r3, [r4, #12]
 8004334:	9903      	ldr	r1, [sp, #12]
 8004336:	1a5b      	subs	r3, r3, r1
 8004338:	42ab      	cmp	r3, r5
 800433a:	dcf2      	bgt.n	8004322 <_printf_i+0x212>
 800433c:	e7eb      	b.n	8004316 <_printf_i+0x206>
 800433e:	2500      	movs	r5, #0
 8004340:	f104 0619 	add.w	r6, r4, #25
 8004344:	e7f5      	b.n	8004332 <_printf_i+0x222>
 8004346:	bf00      	nop
 8004348:	080051ed 	.word	0x080051ed
 800434c:	080051fe 	.word	0x080051fe

08004350 <__svfiscanf_r>:
 8004350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004354:	461d      	mov	r5, r3
 8004356:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8004358:	07df      	lsls	r7, r3, #31
 800435a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800435e:	4606      	mov	r6, r0
 8004360:	460c      	mov	r4, r1
 8004362:	4691      	mov	r9, r2
 8004364:	d405      	bmi.n	8004372 <__svfiscanf_r+0x22>
 8004366:	898b      	ldrh	r3, [r1, #12]
 8004368:	0598      	lsls	r0, r3, #22
 800436a:	d402      	bmi.n	8004372 <__svfiscanf_r+0x22>
 800436c:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 800436e:	f7ff fc1c 	bl	8003baa <__retarget_lock_acquire_recursive>
 8004372:	2300      	movs	r3, #0
 8004374:	e9cd 3344 	strd	r3, r3, [sp, #272]	@ 0x110
 8004378:	4ba7      	ldr	r3, [pc, #668]	@ (8004618 <__svfiscanf_r+0x2c8>)
 800437a:	93a0      	str	r3, [sp, #640]	@ 0x280
 800437c:	f10d 0804 	add.w	r8, sp, #4
 8004380:	4ba6      	ldr	r3, [pc, #664]	@ (800461c <__svfiscanf_r+0x2cc>)
 8004382:	4fa7      	ldr	r7, [pc, #668]	@ (8004620 <__svfiscanf_r+0x2d0>)
 8004384:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8004388:	93a1      	str	r3, [sp, #644]	@ 0x284
 800438a:	9500      	str	r5, [sp, #0]
 800438c:	f899 3000 	ldrb.w	r3, [r9]
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 816c 	beq.w	800466e <__svfiscanf_r+0x31e>
 8004396:	5cf9      	ldrb	r1, [r7, r3]
 8004398:	f011 0108 	ands.w	r1, r1, #8
 800439c:	f109 0501 	add.w	r5, r9, #1
 80043a0:	d019      	beq.n	80043d6 <__svfiscanf_r+0x86>
 80043a2:	6863      	ldr	r3, [r4, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	dd0f      	ble.n	80043c8 <__svfiscanf_r+0x78>
 80043a8:	6823      	ldr	r3, [r4, #0]
 80043aa:	781a      	ldrb	r2, [r3, #0]
 80043ac:	5cba      	ldrb	r2, [r7, r2]
 80043ae:	0711      	lsls	r1, r2, #28
 80043b0:	d401      	bmi.n	80043b6 <__svfiscanf_r+0x66>
 80043b2:	46a9      	mov	r9, r5
 80043b4:	e7ea      	b.n	800438c <__svfiscanf_r+0x3c>
 80043b6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80043b8:	3201      	adds	r2, #1
 80043ba:	9245      	str	r2, [sp, #276]	@ 0x114
 80043bc:	6862      	ldr	r2, [r4, #4]
 80043be:	3301      	adds	r3, #1
 80043c0:	3a01      	subs	r2, #1
 80043c2:	6062      	str	r2, [r4, #4]
 80043c4:	6023      	str	r3, [r4, #0]
 80043c6:	e7ec      	b.n	80043a2 <__svfiscanf_r+0x52>
 80043c8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80043ca:	4621      	mov	r1, r4
 80043cc:	4630      	mov	r0, r6
 80043ce:	4798      	blx	r3
 80043d0:	2800      	cmp	r0, #0
 80043d2:	d0e9      	beq.n	80043a8 <__svfiscanf_r+0x58>
 80043d4:	e7ed      	b.n	80043b2 <__svfiscanf_r+0x62>
 80043d6:	2b25      	cmp	r3, #37	@ 0x25
 80043d8:	d012      	beq.n	8004400 <__svfiscanf_r+0xb0>
 80043da:	4699      	mov	r9, r3
 80043dc:	6863      	ldr	r3, [r4, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f340 8095 	ble.w	800450e <__svfiscanf_r+0x1be>
 80043e4:	6822      	ldr	r2, [r4, #0]
 80043e6:	7813      	ldrb	r3, [r2, #0]
 80043e8:	454b      	cmp	r3, r9
 80043ea:	f040 8140 	bne.w	800466e <__svfiscanf_r+0x31e>
 80043ee:	6863      	ldr	r3, [r4, #4]
 80043f0:	3b01      	subs	r3, #1
 80043f2:	6063      	str	r3, [r4, #4]
 80043f4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80043f6:	3201      	adds	r2, #1
 80043f8:	3301      	adds	r3, #1
 80043fa:	6022      	str	r2, [r4, #0]
 80043fc:	9345      	str	r3, [sp, #276]	@ 0x114
 80043fe:	e7d8      	b.n	80043b2 <__svfiscanf_r+0x62>
 8004400:	9141      	str	r1, [sp, #260]	@ 0x104
 8004402:	9143      	str	r1, [sp, #268]	@ 0x10c
 8004404:	f899 3001 	ldrb.w	r3, [r9, #1]
 8004408:	2b2a      	cmp	r3, #42	@ 0x2a
 800440a:	bf02      	ittt	eq
 800440c:	2310      	moveq	r3, #16
 800440e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8004410:	f109 0502 	addeq.w	r5, r9, #2
 8004414:	220a      	movs	r2, #10
 8004416:	46a9      	mov	r9, r5
 8004418:	f819 1b01 	ldrb.w	r1, [r9], #1
 800441c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8004420:	2b09      	cmp	r3, #9
 8004422:	d91f      	bls.n	8004464 <__svfiscanf_r+0x114>
 8004424:	f8df a1fc 	ldr.w	sl, [pc, #508]	@ 8004624 <__svfiscanf_r+0x2d4>
 8004428:	2203      	movs	r2, #3
 800442a:	4650      	mov	r0, sl
 800442c:	f7fb fed0 	bl	80001d0 <memchr>
 8004430:	b138      	cbz	r0, 8004442 <__svfiscanf_r+0xf2>
 8004432:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004434:	eba0 000a 	sub.w	r0, r0, sl
 8004438:	2301      	movs	r3, #1
 800443a:	4083      	lsls	r3, r0
 800443c:	4313      	orrs	r3, r2
 800443e:	9341      	str	r3, [sp, #260]	@ 0x104
 8004440:	464d      	mov	r5, r9
 8004442:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004446:	2b78      	cmp	r3, #120	@ 0x78
 8004448:	d807      	bhi.n	800445a <__svfiscanf_r+0x10a>
 800444a:	2b57      	cmp	r3, #87	@ 0x57
 800444c:	d811      	bhi.n	8004472 <__svfiscanf_r+0x122>
 800444e:	2b25      	cmp	r3, #37	@ 0x25
 8004450:	d0c3      	beq.n	80043da <__svfiscanf_r+0x8a>
 8004452:	d857      	bhi.n	8004504 <__svfiscanf_r+0x1b4>
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 80c1 	beq.w	80045dc <__svfiscanf_r+0x28c>
 800445a:	2303      	movs	r3, #3
 800445c:	9347      	str	r3, [sp, #284]	@ 0x11c
 800445e:	230a      	movs	r3, #10
 8004460:	9342      	str	r3, [sp, #264]	@ 0x108
 8004462:	e07e      	b.n	8004562 <__svfiscanf_r+0x212>
 8004464:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8004466:	fb02 1103 	mla	r1, r2, r3, r1
 800446a:	3930      	subs	r1, #48	@ 0x30
 800446c:	9143      	str	r1, [sp, #268]	@ 0x10c
 800446e:	464d      	mov	r5, r9
 8004470:	e7d1      	b.n	8004416 <__svfiscanf_r+0xc6>
 8004472:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8004476:	2a20      	cmp	r2, #32
 8004478:	d8ef      	bhi.n	800445a <__svfiscanf_r+0x10a>
 800447a:	a101      	add	r1, pc, #4	@ (adr r1, 8004480 <__svfiscanf_r+0x130>)
 800447c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004480:	08004541 	.word	0x08004541
 8004484:	0800445b 	.word	0x0800445b
 8004488:	0800445b 	.word	0x0800445b
 800448c:	0800459b 	.word	0x0800459b
 8004490:	0800445b 	.word	0x0800445b
 8004494:	0800445b 	.word	0x0800445b
 8004498:	0800445b 	.word	0x0800445b
 800449c:	0800445b 	.word	0x0800445b
 80044a0:	0800445b 	.word	0x0800445b
 80044a4:	0800445b 	.word	0x0800445b
 80044a8:	0800445b 	.word	0x0800445b
 80044ac:	080045b1 	.word	0x080045b1
 80044b0:	08004597 	.word	0x08004597
 80044b4:	0800450b 	.word	0x0800450b
 80044b8:	0800450b 	.word	0x0800450b
 80044bc:	0800450b 	.word	0x0800450b
 80044c0:	0800445b 	.word	0x0800445b
 80044c4:	08004553 	.word	0x08004553
 80044c8:	0800445b 	.word	0x0800445b
 80044cc:	0800445b 	.word	0x0800445b
 80044d0:	0800445b 	.word	0x0800445b
 80044d4:	0800445b 	.word	0x0800445b
 80044d8:	080045c1 	.word	0x080045c1
 80044dc:	0800455b 	.word	0x0800455b
 80044e0:	08004539 	.word	0x08004539
 80044e4:	0800445b 	.word	0x0800445b
 80044e8:	0800445b 	.word	0x0800445b
 80044ec:	080045bd 	.word	0x080045bd
 80044f0:	0800445b 	.word	0x0800445b
 80044f4:	08004597 	.word	0x08004597
 80044f8:	0800445b 	.word	0x0800445b
 80044fc:	0800445b 	.word	0x0800445b
 8004500:	08004541 	.word	0x08004541
 8004504:	3b45      	subs	r3, #69	@ 0x45
 8004506:	2b02      	cmp	r3, #2
 8004508:	d8a7      	bhi.n	800445a <__svfiscanf_r+0x10a>
 800450a:	2305      	movs	r3, #5
 800450c:	e028      	b.n	8004560 <__svfiscanf_r+0x210>
 800450e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004510:	4621      	mov	r1, r4
 8004512:	4630      	mov	r0, r6
 8004514:	4798      	blx	r3
 8004516:	2800      	cmp	r0, #0
 8004518:	f43f af64 	beq.w	80043e4 <__svfiscanf_r+0x94>
 800451c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800451e:	07da      	lsls	r2, r3, #31
 8004520:	f140 809d 	bpl.w	800465e <__svfiscanf_r+0x30e>
 8004524:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004526:	2800      	cmp	r0, #0
 8004528:	d061      	beq.n	80045ee <__svfiscanf_r+0x29e>
 800452a:	89a3      	ldrh	r3, [r4, #12]
 800452c:	0659      	lsls	r1, r3, #25
 800452e:	d45e      	bmi.n	80045ee <__svfiscanf_r+0x29e>
 8004530:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8004534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004538:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800453a:	f042 0220 	orr.w	r2, r2, #32
 800453e:	9241      	str	r2, [sp, #260]	@ 0x104
 8004540:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004542:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004546:	9241      	str	r2, [sp, #260]	@ 0x104
 8004548:	2210      	movs	r2, #16
 800454a:	2b6e      	cmp	r3, #110	@ 0x6e
 800454c:	9242      	str	r2, [sp, #264]	@ 0x108
 800454e:	d902      	bls.n	8004556 <__svfiscanf_r+0x206>
 8004550:	e005      	b.n	800455e <__svfiscanf_r+0x20e>
 8004552:	2300      	movs	r3, #0
 8004554:	9342      	str	r3, [sp, #264]	@ 0x108
 8004556:	2303      	movs	r3, #3
 8004558:	e002      	b.n	8004560 <__svfiscanf_r+0x210>
 800455a:	2308      	movs	r3, #8
 800455c:	9342      	str	r3, [sp, #264]	@ 0x108
 800455e:	2304      	movs	r3, #4
 8004560:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004562:	6863      	ldr	r3, [r4, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	dd45      	ble.n	80045f4 <__svfiscanf_r+0x2a4>
 8004568:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800456a:	0659      	lsls	r1, r3, #25
 800456c:	d404      	bmi.n	8004578 <__svfiscanf_r+0x228>
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	781a      	ldrb	r2, [r3, #0]
 8004572:	5cba      	ldrb	r2, [r7, r2]
 8004574:	0712      	lsls	r2, r2, #28
 8004576:	d444      	bmi.n	8004602 <__svfiscanf_r+0x2b2>
 8004578:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800457a:	2b02      	cmp	r3, #2
 800457c:	dc5b      	bgt.n	8004636 <__svfiscanf_r+0x2e6>
 800457e:	466b      	mov	r3, sp
 8004580:	4622      	mov	r2, r4
 8004582:	a941      	add	r1, sp, #260	@ 0x104
 8004584:	4630      	mov	r0, r6
 8004586:	f000 f893 	bl	80046b0 <_scanf_chars>
 800458a:	2801      	cmp	r0, #1
 800458c:	d06f      	beq.n	800466e <__svfiscanf_r+0x31e>
 800458e:	2802      	cmp	r0, #2
 8004590:	f47f af0f 	bne.w	80043b2 <__svfiscanf_r+0x62>
 8004594:	e7c2      	b.n	800451c <__svfiscanf_r+0x1cc>
 8004596:	220a      	movs	r2, #10
 8004598:	e7d7      	b.n	800454a <__svfiscanf_r+0x1fa>
 800459a:	4629      	mov	r1, r5
 800459c:	4640      	mov	r0, r8
 800459e:	f000 fb65 	bl	8004c6c <__sccl>
 80045a2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80045a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045a8:	9341      	str	r3, [sp, #260]	@ 0x104
 80045aa:	4605      	mov	r5, r0
 80045ac:	2301      	movs	r3, #1
 80045ae:	e7d7      	b.n	8004560 <__svfiscanf_r+0x210>
 80045b0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80045b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045b6:	9341      	str	r3, [sp, #260]	@ 0x104
 80045b8:	2300      	movs	r3, #0
 80045ba:	e7d1      	b.n	8004560 <__svfiscanf_r+0x210>
 80045bc:	2302      	movs	r3, #2
 80045be:	e7cf      	b.n	8004560 <__svfiscanf_r+0x210>
 80045c0:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80045c2:	06c3      	lsls	r3, r0, #27
 80045c4:	f53f aef5 	bmi.w	80043b2 <__svfiscanf_r+0x62>
 80045c8:	9b00      	ldr	r3, [sp, #0]
 80045ca:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80045cc:	1d19      	adds	r1, r3, #4
 80045ce:	9100      	str	r1, [sp, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	07c0      	lsls	r0, r0, #31
 80045d4:	bf4c      	ite	mi
 80045d6:	801a      	strhmi	r2, [r3, #0]
 80045d8:	601a      	strpl	r2, [r3, #0]
 80045da:	e6ea      	b.n	80043b2 <__svfiscanf_r+0x62>
 80045dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045de:	07de      	lsls	r6, r3, #31
 80045e0:	d405      	bmi.n	80045ee <__svfiscanf_r+0x29e>
 80045e2:	89a3      	ldrh	r3, [r4, #12]
 80045e4:	059d      	lsls	r5, r3, #22
 80045e6:	d402      	bmi.n	80045ee <__svfiscanf_r+0x29e>
 80045e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045ea:	f7ff fadf 	bl	8003bac <__retarget_lock_release_recursive>
 80045ee:	f04f 30ff 	mov.w	r0, #4294967295
 80045f2:	e79d      	b.n	8004530 <__svfiscanf_r+0x1e0>
 80045f4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80045f6:	4621      	mov	r1, r4
 80045f8:	4630      	mov	r0, r6
 80045fa:	4798      	blx	r3
 80045fc:	2800      	cmp	r0, #0
 80045fe:	d0b3      	beq.n	8004568 <__svfiscanf_r+0x218>
 8004600:	e78c      	b.n	800451c <__svfiscanf_r+0x1cc>
 8004602:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004604:	3201      	adds	r2, #1
 8004606:	9245      	str	r2, [sp, #276]	@ 0x114
 8004608:	6862      	ldr	r2, [r4, #4]
 800460a:	3a01      	subs	r2, #1
 800460c:	2a00      	cmp	r2, #0
 800460e:	6062      	str	r2, [r4, #4]
 8004610:	dd0a      	ble.n	8004628 <__svfiscanf_r+0x2d8>
 8004612:	3301      	adds	r3, #1
 8004614:	6023      	str	r3, [r4, #0]
 8004616:	e7aa      	b.n	800456e <__svfiscanf_r+0x21e>
 8004618:	08004d53 	.word	0x08004d53
 800461c:	08004b85 	.word	0x08004b85
 8004620:	0800522b 	.word	0x0800522b
 8004624:	080051e2 	.word	0x080051e2
 8004628:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800462a:	4621      	mov	r1, r4
 800462c:	4630      	mov	r0, r6
 800462e:	4798      	blx	r3
 8004630:	2800      	cmp	r0, #0
 8004632:	d09c      	beq.n	800456e <__svfiscanf_r+0x21e>
 8004634:	e772      	b.n	800451c <__svfiscanf_r+0x1cc>
 8004636:	2b04      	cmp	r3, #4
 8004638:	dc06      	bgt.n	8004648 <__svfiscanf_r+0x2f8>
 800463a:	466b      	mov	r3, sp
 800463c:	4622      	mov	r2, r4
 800463e:	a941      	add	r1, sp, #260	@ 0x104
 8004640:	4630      	mov	r0, r6
 8004642:	f000 f88f 	bl	8004764 <_scanf_i>
 8004646:	e7a0      	b.n	800458a <__svfiscanf_r+0x23a>
 8004648:	4b0e      	ldr	r3, [pc, #56]	@ (8004684 <__svfiscanf_r+0x334>)
 800464a:	2b00      	cmp	r3, #0
 800464c:	f43f aeb1 	beq.w	80043b2 <__svfiscanf_r+0x62>
 8004650:	466b      	mov	r3, sp
 8004652:	4622      	mov	r2, r4
 8004654:	a941      	add	r1, sp, #260	@ 0x104
 8004656:	4630      	mov	r0, r6
 8004658:	f3af 8000 	nop.w
 800465c:	e795      	b.n	800458a <__svfiscanf_r+0x23a>
 800465e:	89a3      	ldrh	r3, [r4, #12]
 8004660:	0598      	lsls	r0, r3, #22
 8004662:	f53f af5f 	bmi.w	8004524 <__svfiscanf_r+0x1d4>
 8004666:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004668:	f7ff faa0 	bl	8003bac <__retarget_lock_release_recursive>
 800466c:	e75a      	b.n	8004524 <__svfiscanf_r+0x1d4>
 800466e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004670:	07da      	lsls	r2, r3, #31
 8004672:	d405      	bmi.n	8004680 <__svfiscanf_r+0x330>
 8004674:	89a3      	ldrh	r3, [r4, #12]
 8004676:	059b      	lsls	r3, r3, #22
 8004678:	d402      	bmi.n	8004680 <__svfiscanf_r+0x330>
 800467a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800467c:	f7ff fa96 	bl	8003bac <__retarget_lock_release_recursive>
 8004680:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004682:	e755      	b.n	8004530 <__svfiscanf_r+0x1e0>
 8004684:	00000000 	.word	0x00000000

08004688 <_vfiscanf_r>:
 8004688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800468c:	460d      	mov	r5, r1
 800468e:	4616      	mov	r6, r2
 8004690:	461f      	mov	r7, r3
 8004692:	4604      	mov	r4, r0
 8004694:	b118      	cbz	r0, 800469e <_vfiscanf_r+0x16>
 8004696:	6a03      	ldr	r3, [r0, #32]
 8004698:	b90b      	cbnz	r3, 800469e <_vfiscanf_r+0x16>
 800469a:	f7fe ffc9 	bl	8003630 <__sinit>
 800469e:	463b      	mov	r3, r7
 80046a0:	4632      	mov	r2, r6
 80046a2:	4629      	mov	r1, r5
 80046a4:	4620      	mov	r0, r4
 80046a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046aa:	f7ff be51 	b.w	8004350 <__svfiscanf_r>
	...

080046b0 <_scanf_chars>:
 80046b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046b4:	4615      	mov	r5, r2
 80046b6:	688a      	ldr	r2, [r1, #8]
 80046b8:	4680      	mov	r8, r0
 80046ba:	460c      	mov	r4, r1
 80046bc:	b932      	cbnz	r2, 80046cc <_scanf_chars+0x1c>
 80046be:	698a      	ldr	r2, [r1, #24]
 80046c0:	2a00      	cmp	r2, #0
 80046c2:	bf14      	ite	ne
 80046c4:	f04f 32ff 	movne.w	r2, #4294967295
 80046c8:	2201      	moveq	r2, #1
 80046ca:	608a      	str	r2, [r1, #8]
 80046cc:	6822      	ldr	r2, [r4, #0]
 80046ce:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8004760 <_scanf_chars+0xb0>
 80046d2:	06d1      	lsls	r1, r2, #27
 80046d4:	bf5f      	itttt	pl
 80046d6:	681a      	ldrpl	r2, [r3, #0]
 80046d8:	1d11      	addpl	r1, r2, #4
 80046da:	6019      	strpl	r1, [r3, #0]
 80046dc:	6816      	ldrpl	r6, [r2, #0]
 80046de:	2700      	movs	r7, #0
 80046e0:	69a0      	ldr	r0, [r4, #24]
 80046e2:	b188      	cbz	r0, 8004708 <_scanf_chars+0x58>
 80046e4:	2801      	cmp	r0, #1
 80046e6:	d107      	bne.n	80046f8 <_scanf_chars+0x48>
 80046e8:	682b      	ldr	r3, [r5, #0]
 80046ea:	781a      	ldrb	r2, [r3, #0]
 80046ec:	6963      	ldr	r3, [r4, #20]
 80046ee:	5c9b      	ldrb	r3, [r3, r2]
 80046f0:	b953      	cbnz	r3, 8004708 <_scanf_chars+0x58>
 80046f2:	2f00      	cmp	r7, #0
 80046f4:	d031      	beq.n	800475a <_scanf_chars+0xaa>
 80046f6:	e022      	b.n	800473e <_scanf_chars+0x8e>
 80046f8:	2802      	cmp	r0, #2
 80046fa:	d120      	bne.n	800473e <_scanf_chars+0x8e>
 80046fc:	682b      	ldr	r3, [r5, #0]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	f819 3003 	ldrb.w	r3, [r9, r3]
 8004704:	071b      	lsls	r3, r3, #28
 8004706:	d41a      	bmi.n	800473e <_scanf_chars+0x8e>
 8004708:	6823      	ldr	r3, [r4, #0]
 800470a:	06da      	lsls	r2, r3, #27
 800470c:	bf5e      	ittt	pl
 800470e:	682b      	ldrpl	r3, [r5, #0]
 8004710:	781b      	ldrbpl	r3, [r3, #0]
 8004712:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004716:	682a      	ldr	r2, [r5, #0]
 8004718:	686b      	ldr	r3, [r5, #4]
 800471a:	3201      	adds	r2, #1
 800471c:	602a      	str	r2, [r5, #0]
 800471e:	68a2      	ldr	r2, [r4, #8]
 8004720:	3b01      	subs	r3, #1
 8004722:	3a01      	subs	r2, #1
 8004724:	606b      	str	r3, [r5, #4]
 8004726:	3701      	adds	r7, #1
 8004728:	60a2      	str	r2, [r4, #8]
 800472a:	b142      	cbz	r2, 800473e <_scanf_chars+0x8e>
 800472c:	2b00      	cmp	r3, #0
 800472e:	dcd7      	bgt.n	80046e0 <_scanf_chars+0x30>
 8004730:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004734:	4629      	mov	r1, r5
 8004736:	4640      	mov	r0, r8
 8004738:	4798      	blx	r3
 800473a:	2800      	cmp	r0, #0
 800473c:	d0d0      	beq.n	80046e0 <_scanf_chars+0x30>
 800473e:	6823      	ldr	r3, [r4, #0]
 8004740:	f013 0310 	ands.w	r3, r3, #16
 8004744:	d105      	bne.n	8004752 <_scanf_chars+0xa2>
 8004746:	68e2      	ldr	r2, [r4, #12]
 8004748:	3201      	adds	r2, #1
 800474a:	60e2      	str	r2, [r4, #12]
 800474c:	69a2      	ldr	r2, [r4, #24]
 800474e:	b102      	cbz	r2, 8004752 <_scanf_chars+0xa2>
 8004750:	7033      	strb	r3, [r6, #0]
 8004752:	6923      	ldr	r3, [r4, #16]
 8004754:	443b      	add	r3, r7
 8004756:	6123      	str	r3, [r4, #16]
 8004758:	2000      	movs	r0, #0
 800475a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800475e:	bf00      	nop
 8004760:	0800522b 	.word	0x0800522b

08004764 <_scanf_i>:
 8004764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004768:	4698      	mov	r8, r3
 800476a:	4b74      	ldr	r3, [pc, #464]	@ (800493c <_scanf_i+0x1d8>)
 800476c:	460c      	mov	r4, r1
 800476e:	4682      	mov	sl, r0
 8004770:	4616      	mov	r6, r2
 8004772:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004776:	b087      	sub	sp, #28
 8004778:	ab03      	add	r3, sp, #12
 800477a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800477e:	4b70      	ldr	r3, [pc, #448]	@ (8004940 <_scanf_i+0x1dc>)
 8004780:	69a1      	ldr	r1, [r4, #24]
 8004782:	4a70      	ldr	r2, [pc, #448]	@ (8004944 <_scanf_i+0x1e0>)
 8004784:	2903      	cmp	r1, #3
 8004786:	bf08      	it	eq
 8004788:	461a      	moveq	r2, r3
 800478a:	68a3      	ldr	r3, [r4, #8]
 800478c:	9201      	str	r2, [sp, #4]
 800478e:	1e5a      	subs	r2, r3, #1
 8004790:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004794:	bf88      	it	hi
 8004796:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800479a:	4627      	mov	r7, r4
 800479c:	bf82      	ittt	hi
 800479e:	eb03 0905 	addhi.w	r9, r3, r5
 80047a2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80047a6:	60a3      	strhi	r3, [r4, #8]
 80047a8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80047ac:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80047b0:	bf98      	it	ls
 80047b2:	f04f 0900 	movls.w	r9, #0
 80047b6:	6023      	str	r3, [r4, #0]
 80047b8:	463d      	mov	r5, r7
 80047ba:	f04f 0b00 	mov.w	fp, #0
 80047be:	6831      	ldr	r1, [r6, #0]
 80047c0:	ab03      	add	r3, sp, #12
 80047c2:	7809      	ldrb	r1, [r1, #0]
 80047c4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80047c8:	2202      	movs	r2, #2
 80047ca:	f7fb fd01 	bl	80001d0 <memchr>
 80047ce:	b328      	cbz	r0, 800481c <_scanf_i+0xb8>
 80047d0:	f1bb 0f01 	cmp.w	fp, #1
 80047d4:	d159      	bne.n	800488a <_scanf_i+0x126>
 80047d6:	6862      	ldr	r2, [r4, #4]
 80047d8:	b92a      	cbnz	r2, 80047e6 <_scanf_i+0x82>
 80047da:	6822      	ldr	r2, [r4, #0]
 80047dc:	2108      	movs	r1, #8
 80047de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047e2:	6061      	str	r1, [r4, #4]
 80047e4:	6022      	str	r2, [r4, #0]
 80047e6:	6822      	ldr	r2, [r4, #0]
 80047e8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80047ec:	6022      	str	r2, [r4, #0]
 80047ee:	68a2      	ldr	r2, [r4, #8]
 80047f0:	1e51      	subs	r1, r2, #1
 80047f2:	60a1      	str	r1, [r4, #8]
 80047f4:	b192      	cbz	r2, 800481c <_scanf_i+0xb8>
 80047f6:	6832      	ldr	r2, [r6, #0]
 80047f8:	1c51      	adds	r1, r2, #1
 80047fa:	6031      	str	r1, [r6, #0]
 80047fc:	7812      	ldrb	r2, [r2, #0]
 80047fe:	f805 2b01 	strb.w	r2, [r5], #1
 8004802:	6872      	ldr	r2, [r6, #4]
 8004804:	3a01      	subs	r2, #1
 8004806:	2a00      	cmp	r2, #0
 8004808:	6072      	str	r2, [r6, #4]
 800480a:	dc07      	bgt.n	800481c <_scanf_i+0xb8>
 800480c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8004810:	4631      	mov	r1, r6
 8004812:	4650      	mov	r0, sl
 8004814:	4790      	blx	r2
 8004816:	2800      	cmp	r0, #0
 8004818:	f040 8085 	bne.w	8004926 <_scanf_i+0x1c2>
 800481c:	f10b 0b01 	add.w	fp, fp, #1
 8004820:	f1bb 0f03 	cmp.w	fp, #3
 8004824:	d1cb      	bne.n	80047be <_scanf_i+0x5a>
 8004826:	6863      	ldr	r3, [r4, #4]
 8004828:	b90b      	cbnz	r3, 800482e <_scanf_i+0xca>
 800482a:	230a      	movs	r3, #10
 800482c:	6063      	str	r3, [r4, #4]
 800482e:	6863      	ldr	r3, [r4, #4]
 8004830:	4945      	ldr	r1, [pc, #276]	@ (8004948 <_scanf_i+0x1e4>)
 8004832:	6960      	ldr	r0, [r4, #20]
 8004834:	1ac9      	subs	r1, r1, r3
 8004836:	f000 fa19 	bl	8004c6c <__sccl>
 800483a:	f04f 0b00 	mov.w	fp, #0
 800483e:	68a3      	ldr	r3, [r4, #8]
 8004840:	6822      	ldr	r2, [r4, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d03d      	beq.n	80048c2 <_scanf_i+0x15e>
 8004846:	6831      	ldr	r1, [r6, #0]
 8004848:	6960      	ldr	r0, [r4, #20]
 800484a:	f891 c000 	ldrb.w	ip, [r1]
 800484e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004852:	2800      	cmp	r0, #0
 8004854:	d035      	beq.n	80048c2 <_scanf_i+0x15e>
 8004856:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800485a:	d124      	bne.n	80048a6 <_scanf_i+0x142>
 800485c:	0510      	lsls	r0, r2, #20
 800485e:	d522      	bpl.n	80048a6 <_scanf_i+0x142>
 8004860:	f10b 0b01 	add.w	fp, fp, #1
 8004864:	f1b9 0f00 	cmp.w	r9, #0
 8004868:	d003      	beq.n	8004872 <_scanf_i+0x10e>
 800486a:	3301      	adds	r3, #1
 800486c:	f109 39ff 	add.w	r9, r9, #4294967295
 8004870:	60a3      	str	r3, [r4, #8]
 8004872:	6873      	ldr	r3, [r6, #4]
 8004874:	3b01      	subs	r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	6073      	str	r3, [r6, #4]
 800487a:	dd1b      	ble.n	80048b4 <_scanf_i+0x150>
 800487c:	6833      	ldr	r3, [r6, #0]
 800487e:	3301      	adds	r3, #1
 8004880:	6033      	str	r3, [r6, #0]
 8004882:	68a3      	ldr	r3, [r4, #8]
 8004884:	3b01      	subs	r3, #1
 8004886:	60a3      	str	r3, [r4, #8]
 8004888:	e7d9      	b.n	800483e <_scanf_i+0xda>
 800488a:	f1bb 0f02 	cmp.w	fp, #2
 800488e:	d1ae      	bne.n	80047ee <_scanf_i+0x8a>
 8004890:	6822      	ldr	r2, [r4, #0]
 8004892:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8004896:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800489a:	d1bf      	bne.n	800481c <_scanf_i+0xb8>
 800489c:	2110      	movs	r1, #16
 800489e:	6061      	str	r1, [r4, #4]
 80048a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048a4:	e7a2      	b.n	80047ec <_scanf_i+0x88>
 80048a6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80048aa:	6022      	str	r2, [r4, #0]
 80048ac:	780b      	ldrb	r3, [r1, #0]
 80048ae:	f805 3b01 	strb.w	r3, [r5], #1
 80048b2:	e7de      	b.n	8004872 <_scanf_i+0x10e>
 80048b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80048b8:	4631      	mov	r1, r6
 80048ba:	4650      	mov	r0, sl
 80048bc:	4798      	blx	r3
 80048be:	2800      	cmp	r0, #0
 80048c0:	d0df      	beq.n	8004882 <_scanf_i+0x11e>
 80048c2:	6823      	ldr	r3, [r4, #0]
 80048c4:	05d9      	lsls	r1, r3, #23
 80048c6:	d50d      	bpl.n	80048e4 <_scanf_i+0x180>
 80048c8:	42bd      	cmp	r5, r7
 80048ca:	d909      	bls.n	80048e0 <_scanf_i+0x17c>
 80048cc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80048d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80048d4:	4632      	mov	r2, r6
 80048d6:	4650      	mov	r0, sl
 80048d8:	4798      	blx	r3
 80048da:	f105 39ff 	add.w	r9, r5, #4294967295
 80048de:	464d      	mov	r5, r9
 80048e0:	42bd      	cmp	r5, r7
 80048e2:	d028      	beq.n	8004936 <_scanf_i+0x1d2>
 80048e4:	6822      	ldr	r2, [r4, #0]
 80048e6:	f012 0210 	ands.w	r2, r2, #16
 80048ea:	d113      	bne.n	8004914 <_scanf_i+0x1b0>
 80048ec:	702a      	strb	r2, [r5, #0]
 80048ee:	6863      	ldr	r3, [r4, #4]
 80048f0:	9e01      	ldr	r6, [sp, #4]
 80048f2:	4639      	mov	r1, r7
 80048f4:	4650      	mov	r0, sl
 80048f6:	47b0      	blx	r6
 80048f8:	f8d8 3000 	ldr.w	r3, [r8]
 80048fc:	6821      	ldr	r1, [r4, #0]
 80048fe:	1d1a      	adds	r2, r3, #4
 8004900:	f8c8 2000 	str.w	r2, [r8]
 8004904:	f011 0f20 	tst.w	r1, #32
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	d00f      	beq.n	800492c <_scanf_i+0x1c8>
 800490c:	6018      	str	r0, [r3, #0]
 800490e:	68e3      	ldr	r3, [r4, #12]
 8004910:	3301      	adds	r3, #1
 8004912:	60e3      	str	r3, [r4, #12]
 8004914:	6923      	ldr	r3, [r4, #16]
 8004916:	1bed      	subs	r5, r5, r7
 8004918:	445d      	add	r5, fp
 800491a:	442b      	add	r3, r5
 800491c:	6123      	str	r3, [r4, #16]
 800491e:	2000      	movs	r0, #0
 8004920:	b007      	add	sp, #28
 8004922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004926:	f04f 0b00 	mov.w	fp, #0
 800492a:	e7ca      	b.n	80048c2 <_scanf_i+0x15e>
 800492c:	07ca      	lsls	r2, r1, #31
 800492e:	bf4c      	ite	mi
 8004930:	8018      	strhmi	r0, [r3, #0]
 8004932:	6018      	strpl	r0, [r3, #0]
 8004934:	e7eb      	b.n	800490e <_scanf_i+0x1aa>
 8004936:	2001      	movs	r0, #1
 8004938:	e7f2      	b.n	8004920 <_scanf_i+0x1bc>
 800493a:	bf00      	nop
 800493c:	08005188 	.word	0x08005188
 8004940:	08005021 	.word	0x08005021
 8004944:	08005101 	.word	0x08005101
 8004948:	0800521f 	.word	0x0800521f

0800494c <__sflush_r>:
 800494c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004954:	0716      	lsls	r6, r2, #28
 8004956:	4605      	mov	r5, r0
 8004958:	460c      	mov	r4, r1
 800495a:	d454      	bmi.n	8004a06 <__sflush_r+0xba>
 800495c:	684b      	ldr	r3, [r1, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	dc02      	bgt.n	8004968 <__sflush_r+0x1c>
 8004962:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004964:	2b00      	cmp	r3, #0
 8004966:	dd48      	ble.n	80049fa <__sflush_r+0xae>
 8004968:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800496a:	2e00      	cmp	r6, #0
 800496c:	d045      	beq.n	80049fa <__sflush_r+0xae>
 800496e:	2300      	movs	r3, #0
 8004970:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004974:	682f      	ldr	r7, [r5, #0]
 8004976:	6a21      	ldr	r1, [r4, #32]
 8004978:	602b      	str	r3, [r5, #0]
 800497a:	d030      	beq.n	80049de <__sflush_r+0x92>
 800497c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800497e:	89a3      	ldrh	r3, [r4, #12]
 8004980:	0759      	lsls	r1, r3, #29
 8004982:	d505      	bpl.n	8004990 <__sflush_r+0x44>
 8004984:	6863      	ldr	r3, [r4, #4]
 8004986:	1ad2      	subs	r2, r2, r3
 8004988:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800498a:	b10b      	cbz	r3, 8004990 <__sflush_r+0x44>
 800498c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800498e:	1ad2      	subs	r2, r2, r3
 8004990:	2300      	movs	r3, #0
 8004992:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004994:	6a21      	ldr	r1, [r4, #32]
 8004996:	4628      	mov	r0, r5
 8004998:	47b0      	blx	r6
 800499a:	1c43      	adds	r3, r0, #1
 800499c:	89a3      	ldrh	r3, [r4, #12]
 800499e:	d106      	bne.n	80049ae <__sflush_r+0x62>
 80049a0:	6829      	ldr	r1, [r5, #0]
 80049a2:	291d      	cmp	r1, #29
 80049a4:	d82b      	bhi.n	80049fe <__sflush_r+0xb2>
 80049a6:	4a2a      	ldr	r2, [pc, #168]	@ (8004a50 <__sflush_r+0x104>)
 80049a8:	410a      	asrs	r2, r1
 80049aa:	07d6      	lsls	r6, r2, #31
 80049ac:	d427      	bmi.n	80049fe <__sflush_r+0xb2>
 80049ae:	2200      	movs	r2, #0
 80049b0:	6062      	str	r2, [r4, #4]
 80049b2:	04d9      	lsls	r1, r3, #19
 80049b4:	6922      	ldr	r2, [r4, #16]
 80049b6:	6022      	str	r2, [r4, #0]
 80049b8:	d504      	bpl.n	80049c4 <__sflush_r+0x78>
 80049ba:	1c42      	adds	r2, r0, #1
 80049bc:	d101      	bne.n	80049c2 <__sflush_r+0x76>
 80049be:	682b      	ldr	r3, [r5, #0]
 80049c0:	b903      	cbnz	r3, 80049c4 <__sflush_r+0x78>
 80049c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80049c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049c6:	602f      	str	r7, [r5, #0]
 80049c8:	b1b9      	cbz	r1, 80049fa <__sflush_r+0xae>
 80049ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049ce:	4299      	cmp	r1, r3
 80049d0:	d002      	beq.n	80049d8 <__sflush_r+0x8c>
 80049d2:	4628      	mov	r0, r5
 80049d4:	f7ff f8ec 	bl	8003bb0 <_free_r>
 80049d8:	2300      	movs	r3, #0
 80049da:	6363      	str	r3, [r4, #52]	@ 0x34
 80049dc:	e00d      	b.n	80049fa <__sflush_r+0xae>
 80049de:	2301      	movs	r3, #1
 80049e0:	4628      	mov	r0, r5
 80049e2:	47b0      	blx	r6
 80049e4:	4602      	mov	r2, r0
 80049e6:	1c50      	adds	r0, r2, #1
 80049e8:	d1c9      	bne.n	800497e <__sflush_r+0x32>
 80049ea:	682b      	ldr	r3, [r5, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0c6      	beq.n	800497e <__sflush_r+0x32>
 80049f0:	2b1d      	cmp	r3, #29
 80049f2:	d001      	beq.n	80049f8 <__sflush_r+0xac>
 80049f4:	2b16      	cmp	r3, #22
 80049f6:	d11e      	bne.n	8004a36 <__sflush_r+0xea>
 80049f8:	602f      	str	r7, [r5, #0]
 80049fa:	2000      	movs	r0, #0
 80049fc:	e022      	b.n	8004a44 <__sflush_r+0xf8>
 80049fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a02:	b21b      	sxth	r3, r3
 8004a04:	e01b      	b.n	8004a3e <__sflush_r+0xf2>
 8004a06:	690f      	ldr	r7, [r1, #16]
 8004a08:	2f00      	cmp	r7, #0
 8004a0a:	d0f6      	beq.n	80049fa <__sflush_r+0xae>
 8004a0c:	0793      	lsls	r3, r2, #30
 8004a0e:	680e      	ldr	r6, [r1, #0]
 8004a10:	bf08      	it	eq
 8004a12:	694b      	ldreq	r3, [r1, #20]
 8004a14:	600f      	str	r7, [r1, #0]
 8004a16:	bf18      	it	ne
 8004a18:	2300      	movne	r3, #0
 8004a1a:	eba6 0807 	sub.w	r8, r6, r7
 8004a1e:	608b      	str	r3, [r1, #8]
 8004a20:	f1b8 0f00 	cmp.w	r8, #0
 8004a24:	dde9      	ble.n	80049fa <__sflush_r+0xae>
 8004a26:	6a21      	ldr	r1, [r4, #32]
 8004a28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004a2a:	4643      	mov	r3, r8
 8004a2c:	463a      	mov	r2, r7
 8004a2e:	4628      	mov	r0, r5
 8004a30:	47b0      	blx	r6
 8004a32:	2800      	cmp	r0, #0
 8004a34:	dc08      	bgt.n	8004a48 <__sflush_r+0xfc>
 8004a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a3e:	81a3      	strh	r3, [r4, #12]
 8004a40:	f04f 30ff 	mov.w	r0, #4294967295
 8004a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a48:	4407      	add	r7, r0
 8004a4a:	eba8 0800 	sub.w	r8, r8, r0
 8004a4e:	e7e7      	b.n	8004a20 <__sflush_r+0xd4>
 8004a50:	dfbffffe 	.word	0xdfbffffe

08004a54 <_fflush_r>:
 8004a54:	b538      	push	{r3, r4, r5, lr}
 8004a56:	690b      	ldr	r3, [r1, #16]
 8004a58:	4605      	mov	r5, r0
 8004a5a:	460c      	mov	r4, r1
 8004a5c:	b913      	cbnz	r3, 8004a64 <_fflush_r+0x10>
 8004a5e:	2500      	movs	r5, #0
 8004a60:	4628      	mov	r0, r5
 8004a62:	bd38      	pop	{r3, r4, r5, pc}
 8004a64:	b118      	cbz	r0, 8004a6e <_fflush_r+0x1a>
 8004a66:	6a03      	ldr	r3, [r0, #32]
 8004a68:	b90b      	cbnz	r3, 8004a6e <_fflush_r+0x1a>
 8004a6a:	f7fe fde1 	bl	8003630 <__sinit>
 8004a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d0f3      	beq.n	8004a5e <_fflush_r+0xa>
 8004a76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a78:	07d0      	lsls	r0, r2, #31
 8004a7a:	d404      	bmi.n	8004a86 <_fflush_r+0x32>
 8004a7c:	0599      	lsls	r1, r3, #22
 8004a7e:	d402      	bmi.n	8004a86 <_fflush_r+0x32>
 8004a80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a82:	f7ff f892 	bl	8003baa <__retarget_lock_acquire_recursive>
 8004a86:	4628      	mov	r0, r5
 8004a88:	4621      	mov	r1, r4
 8004a8a:	f7ff ff5f 	bl	800494c <__sflush_r>
 8004a8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a90:	07da      	lsls	r2, r3, #31
 8004a92:	4605      	mov	r5, r0
 8004a94:	d4e4      	bmi.n	8004a60 <_fflush_r+0xc>
 8004a96:	89a3      	ldrh	r3, [r4, #12]
 8004a98:	059b      	lsls	r3, r3, #22
 8004a9a:	d4e1      	bmi.n	8004a60 <_fflush_r+0xc>
 8004a9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a9e:	f7ff f885 	bl	8003bac <__retarget_lock_release_recursive>
 8004aa2:	e7dd      	b.n	8004a60 <_fflush_r+0xc>

08004aa4 <__swhatbuf_r>:
 8004aa4:	b570      	push	{r4, r5, r6, lr}
 8004aa6:	460c      	mov	r4, r1
 8004aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aac:	2900      	cmp	r1, #0
 8004aae:	b096      	sub	sp, #88	@ 0x58
 8004ab0:	4615      	mov	r5, r2
 8004ab2:	461e      	mov	r6, r3
 8004ab4:	da0d      	bge.n	8004ad2 <__swhatbuf_r+0x2e>
 8004ab6:	89a3      	ldrh	r3, [r4, #12]
 8004ab8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004abc:	f04f 0100 	mov.w	r1, #0
 8004ac0:	bf14      	ite	ne
 8004ac2:	2340      	movne	r3, #64	@ 0x40
 8004ac4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004ac8:	2000      	movs	r0, #0
 8004aca:	6031      	str	r1, [r6, #0]
 8004acc:	602b      	str	r3, [r5, #0]
 8004ace:	b016      	add	sp, #88	@ 0x58
 8004ad0:	bd70      	pop	{r4, r5, r6, pc}
 8004ad2:	466a      	mov	r2, sp
 8004ad4:	f000 f9bc 	bl	8004e50 <_fstat_r>
 8004ad8:	2800      	cmp	r0, #0
 8004ada:	dbec      	blt.n	8004ab6 <__swhatbuf_r+0x12>
 8004adc:	9901      	ldr	r1, [sp, #4]
 8004ade:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004ae2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004ae6:	4259      	negs	r1, r3
 8004ae8:	4159      	adcs	r1, r3
 8004aea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004aee:	e7eb      	b.n	8004ac8 <__swhatbuf_r+0x24>

08004af0 <__smakebuf_r>:
 8004af0:	898b      	ldrh	r3, [r1, #12]
 8004af2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004af4:	079d      	lsls	r5, r3, #30
 8004af6:	4606      	mov	r6, r0
 8004af8:	460c      	mov	r4, r1
 8004afa:	d507      	bpl.n	8004b0c <__smakebuf_r+0x1c>
 8004afc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004b00:	6023      	str	r3, [r4, #0]
 8004b02:	6123      	str	r3, [r4, #16]
 8004b04:	2301      	movs	r3, #1
 8004b06:	6163      	str	r3, [r4, #20]
 8004b08:	b003      	add	sp, #12
 8004b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b0c:	ab01      	add	r3, sp, #4
 8004b0e:	466a      	mov	r2, sp
 8004b10:	f7ff ffc8 	bl	8004aa4 <__swhatbuf_r>
 8004b14:	9f00      	ldr	r7, [sp, #0]
 8004b16:	4605      	mov	r5, r0
 8004b18:	4639      	mov	r1, r7
 8004b1a:	4630      	mov	r0, r6
 8004b1c:	f7ff f8bc 	bl	8003c98 <_malloc_r>
 8004b20:	b948      	cbnz	r0, 8004b36 <__smakebuf_r+0x46>
 8004b22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b26:	059a      	lsls	r2, r3, #22
 8004b28:	d4ee      	bmi.n	8004b08 <__smakebuf_r+0x18>
 8004b2a:	f023 0303 	bic.w	r3, r3, #3
 8004b2e:	f043 0302 	orr.w	r3, r3, #2
 8004b32:	81a3      	strh	r3, [r4, #12]
 8004b34:	e7e2      	b.n	8004afc <__smakebuf_r+0xc>
 8004b36:	89a3      	ldrh	r3, [r4, #12]
 8004b38:	6020      	str	r0, [r4, #0]
 8004b3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b3e:	81a3      	strh	r3, [r4, #12]
 8004b40:	9b01      	ldr	r3, [sp, #4]
 8004b42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004b46:	b15b      	cbz	r3, 8004b60 <__smakebuf_r+0x70>
 8004b48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b4c:	4630      	mov	r0, r6
 8004b4e:	f000 f991 	bl	8004e74 <_isatty_r>
 8004b52:	b128      	cbz	r0, 8004b60 <__smakebuf_r+0x70>
 8004b54:	89a3      	ldrh	r3, [r4, #12]
 8004b56:	f023 0303 	bic.w	r3, r3, #3
 8004b5a:	f043 0301 	orr.w	r3, r3, #1
 8004b5e:	81a3      	strh	r3, [r4, #12]
 8004b60:	89a3      	ldrh	r3, [r4, #12]
 8004b62:	431d      	orrs	r5, r3
 8004b64:	81a5      	strh	r5, [r4, #12]
 8004b66:	e7cf      	b.n	8004b08 <__smakebuf_r+0x18>

08004b68 <lflush>:
 8004b68:	898b      	ldrh	r3, [r1, #12]
 8004b6a:	f003 0309 	and.w	r3, r3, #9
 8004b6e:	2b09      	cmp	r3, #9
 8004b70:	d103      	bne.n	8004b7a <lflush+0x12>
 8004b72:	4b03      	ldr	r3, [pc, #12]	@ (8004b80 <lflush+0x18>)
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	f7ff bf6d 	b.w	8004a54 <_fflush_r>
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	20000018 	.word	0x20000018

08004b84 <__srefill_r>:
 8004b84:	b570      	push	{r4, r5, r6, lr}
 8004b86:	460c      	mov	r4, r1
 8004b88:	4605      	mov	r5, r0
 8004b8a:	b118      	cbz	r0, 8004b94 <__srefill_r+0x10>
 8004b8c:	6a03      	ldr	r3, [r0, #32]
 8004b8e:	b90b      	cbnz	r3, 8004b94 <__srefill_r+0x10>
 8004b90:	f7fe fd4e 	bl	8003630 <__sinit>
 8004b94:	2300      	movs	r3, #0
 8004b96:	6063      	str	r3, [r4, #4]
 8004b98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b9c:	069e      	lsls	r6, r3, #26
 8004b9e:	d408      	bmi.n	8004bb2 <__srefill_r+0x2e>
 8004ba0:	0758      	lsls	r0, r3, #29
 8004ba2:	d445      	bmi.n	8004c30 <__srefill_r+0xac>
 8004ba4:	06d9      	lsls	r1, r3, #27
 8004ba6:	d407      	bmi.n	8004bb8 <__srefill_r+0x34>
 8004ba8:	2209      	movs	r2, #9
 8004baa:	602a      	str	r2, [r5, #0]
 8004bac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bb0:	81a3      	strh	r3, [r4, #12]
 8004bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb6:	bd70      	pop	{r4, r5, r6, pc}
 8004bb8:	071a      	lsls	r2, r3, #28
 8004bba:	d50b      	bpl.n	8004bd4 <__srefill_r+0x50>
 8004bbc:	4621      	mov	r1, r4
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	f7ff ff48 	bl	8004a54 <_fflush_r>
 8004bc4:	2800      	cmp	r0, #0
 8004bc6:	d1f4      	bne.n	8004bb2 <__srefill_r+0x2e>
 8004bc8:	89a3      	ldrh	r3, [r4, #12]
 8004bca:	60a0      	str	r0, [r4, #8]
 8004bcc:	f023 0308 	bic.w	r3, r3, #8
 8004bd0:	81a3      	strh	r3, [r4, #12]
 8004bd2:	61a0      	str	r0, [r4, #24]
 8004bd4:	89a3      	ldrh	r3, [r4, #12]
 8004bd6:	f043 0304 	orr.w	r3, r3, #4
 8004bda:	81a3      	strh	r3, [r4, #12]
 8004bdc:	6923      	ldr	r3, [r4, #16]
 8004bde:	b91b      	cbnz	r3, 8004be8 <__srefill_r+0x64>
 8004be0:	4621      	mov	r1, r4
 8004be2:	4628      	mov	r0, r5
 8004be4:	f7ff ff84 	bl	8004af0 <__smakebuf_r>
 8004be8:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8004bec:	07b3      	lsls	r3, r6, #30
 8004bee:	d00f      	beq.n	8004c10 <__srefill_r+0x8c>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	4a1b      	ldr	r2, [pc, #108]	@ (8004c60 <__srefill_r+0xdc>)
 8004bf4:	491b      	ldr	r1, [pc, #108]	@ (8004c64 <__srefill_r+0xe0>)
 8004bf6:	481c      	ldr	r0, [pc, #112]	@ (8004c68 <__srefill_r+0xe4>)
 8004bf8:	81a3      	strh	r3, [r4, #12]
 8004bfa:	f7fe fd31 	bl	8003660 <_fwalk_sglue>
 8004bfe:	81a6      	strh	r6, [r4, #12]
 8004c00:	f006 0609 	and.w	r6, r6, #9
 8004c04:	2e09      	cmp	r6, #9
 8004c06:	d103      	bne.n	8004c10 <__srefill_r+0x8c>
 8004c08:	4621      	mov	r1, r4
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	f7ff fe9e 	bl	800494c <__sflush_r>
 8004c10:	6922      	ldr	r2, [r4, #16]
 8004c12:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8004c14:	6963      	ldr	r3, [r4, #20]
 8004c16:	6a21      	ldr	r1, [r4, #32]
 8004c18:	6022      	str	r2, [r4, #0]
 8004c1a:	4628      	mov	r0, r5
 8004c1c:	47b0      	blx	r6
 8004c1e:	2800      	cmp	r0, #0
 8004c20:	6060      	str	r0, [r4, #4]
 8004c22:	dc17      	bgt.n	8004c54 <__srefill_r+0xd0>
 8004c24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c28:	d116      	bne.n	8004c58 <__srefill_r+0xd4>
 8004c2a:	f043 0320 	orr.w	r3, r3, #32
 8004c2e:	e7bf      	b.n	8004bb0 <__srefill_r+0x2c>
 8004c30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c32:	2900      	cmp	r1, #0
 8004c34:	d0d2      	beq.n	8004bdc <__srefill_r+0x58>
 8004c36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c3a:	4299      	cmp	r1, r3
 8004c3c:	d002      	beq.n	8004c44 <__srefill_r+0xc0>
 8004c3e:	4628      	mov	r0, r5
 8004c40:	f7fe ffb6 	bl	8003bb0 <_free_r>
 8004c44:	2300      	movs	r3, #0
 8004c46:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c4a:	6063      	str	r3, [r4, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d0c5      	beq.n	8004bdc <__srefill_r+0x58>
 8004c50:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004c52:	6023      	str	r3, [r4, #0]
 8004c54:	2000      	movs	r0, #0
 8004c56:	e7ae      	b.n	8004bb6 <__srefill_r+0x32>
 8004c58:	2200      	movs	r2, #0
 8004c5a:	6062      	str	r2, [r4, #4]
 8004c5c:	e7a6      	b.n	8004bac <__srefill_r+0x28>
 8004c5e:	bf00      	nop
 8004c60:	2000000c 	.word	0x2000000c
 8004c64:	08004b69 	.word	0x08004b69
 8004c68:	2000001c 	.word	0x2000001c

08004c6c <__sccl>:
 8004c6c:	b570      	push	{r4, r5, r6, lr}
 8004c6e:	780b      	ldrb	r3, [r1, #0]
 8004c70:	4604      	mov	r4, r0
 8004c72:	2b5e      	cmp	r3, #94	@ 0x5e
 8004c74:	bf0b      	itete	eq
 8004c76:	784b      	ldrbeq	r3, [r1, #1]
 8004c78:	1c4a      	addne	r2, r1, #1
 8004c7a:	1c8a      	addeq	r2, r1, #2
 8004c7c:	2100      	movne	r1, #0
 8004c7e:	bf08      	it	eq
 8004c80:	2101      	moveq	r1, #1
 8004c82:	3801      	subs	r0, #1
 8004c84:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8004c88:	f800 1f01 	strb.w	r1, [r0, #1]!
 8004c8c:	42a8      	cmp	r0, r5
 8004c8e:	d1fb      	bne.n	8004c88 <__sccl+0x1c>
 8004c90:	b90b      	cbnz	r3, 8004c96 <__sccl+0x2a>
 8004c92:	1e50      	subs	r0, r2, #1
 8004c94:	bd70      	pop	{r4, r5, r6, pc}
 8004c96:	f081 0101 	eor.w	r1, r1, #1
 8004c9a:	54e1      	strb	r1, [r4, r3]
 8004c9c:	4610      	mov	r0, r2
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004ca4:	2d2d      	cmp	r5, #45	@ 0x2d
 8004ca6:	d005      	beq.n	8004cb4 <__sccl+0x48>
 8004ca8:	2d5d      	cmp	r5, #93	@ 0x5d
 8004caa:	d016      	beq.n	8004cda <__sccl+0x6e>
 8004cac:	2d00      	cmp	r5, #0
 8004cae:	d0f1      	beq.n	8004c94 <__sccl+0x28>
 8004cb0:	462b      	mov	r3, r5
 8004cb2:	e7f2      	b.n	8004c9a <__sccl+0x2e>
 8004cb4:	7846      	ldrb	r6, [r0, #1]
 8004cb6:	2e5d      	cmp	r6, #93	@ 0x5d
 8004cb8:	d0fa      	beq.n	8004cb0 <__sccl+0x44>
 8004cba:	42b3      	cmp	r3, r6
 8004cbc:	dcf8      	bgt.n	8004cb0 <__sccl+0x44>
 8004cbe:	3002      	adds	r0, #2
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	3201      	adds	r2, #1
 8004cc4:	4296      	cmp	r6, r2
 8004cc6:	54a1      	strb	r1, [r4, r2]
 8004cc8:	dcfb      	bgt.n	8004cc2 <__sccl+0x56>
 8004cca:	1af2      	subs	r2, r6, r3
 8004ccc:	3a01      	subs	r2, #1
 8004cce:	1c5d      	adds	r5, r3, #1
 8004cd0:	42b3      	cmp	r3, r6
 8004cd2:	bfa8      	it	ge
 8004cd4:	2200      	movge	r2, #0
 8004cd6:	18ab      	adds	r3, r5, r2
 8004cd8:	e7e1      	b.n	8004c9e <__sccl+0x32>
 8004cda:	4610      	mov	r0, r2
 8004cdc:	e7da      	b.n	8004c94 <__sccl+0x28>

08004cde <__submore>:
 8004cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce2:	460c      	mov	r4, r1
 8004ce4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8004ce6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004cea:	4299      	cmp	r1, r3
 8004cec:	d11d      	bne.n	8004d2a <__submore+0x4c>
 8004cee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004cf2:	f7fe ffd1 	bl	8003c98 <_malloc_r>
 8004cf6:	b918      	cbnz	r0, 8004d00 <__submore+0x22>
 8004cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d04:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004d06:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8004d0a:	6360      	str	r0, [r4, #52]	@ 0x34
 8004d0c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8004d10:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8004d14:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8004d18:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8004d1c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8004d20:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8004d24:	6020      	str	r0, [r4, #0]
 8004d26:	2000      	movs	r0, #0
 8004d28:	e7e8      	b.n	8004cfc <__submore+0x1e>
 8004d2a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8004d2c:	0077      	lsls	r7, r6, #1
 8004d2e:	463a      	mov	r2, r7
 8004d30:	f000 f8ce 	bl	8004ed0 <_realloc_r>
 8004d34:	4605      	mov	r5, r0
 8004d36:	2800      	cmp	r0, #0
 8004d38:	d0de      	beq.n	8004cf8 <__submore+0x1a>
 8004d3a:	eb00 0806 	add.w	r8, r0, r6
 8004d3e:	4601      	mov	r1, r0
 8004d40:	4632      	mov	r2, r6
 8004d42:	4640      	mov	r0, r8
 8004d44:	f000 f8b6 	bl	8004eb4 <memcpy>
 8004d48:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8004d4c:	f8c4 8000 	str.w	r8, [r4]
 8004d50:	e7e9      	b.n	8004d26 <__submore+0x48>

08004d52 <_ungetc_r>:
 8004d52:	b570      	push	{r4, r5, r6, lr}
 8004d54:	460d      	mov	r5, r1
 8004d56:	1c69      	adds	r1, r5, #1
 8004d58:	4606      	mov	r6, r0
 8004d5a:	4614      	mov	r4, r2
 8004d5c:	d01e      	beq.n	8004d9c <_ungetc_r+0x4a>
 8004d5e:	b118      	cbz	r0, 8004d68 <_ungetc_r+0x16>
 8004d60:	6a03      	ldr	r3, [r0, #32]
 8004d62:	b90b      	cbnz	r3, 8004d68 <_ungetc_r+0x16>
 8004d64:	f7fe fc64 	bl	8003630 <__sinit>
 8004d68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d6a:	07da      	lsls	r2, r3, #31
 8004d6c:	d405      	bmi.n	8004d7a <_ungetc_r+0x28>
 8004d6e:	89a3      	ldrh	r3, [r4, #12]
 8004d70:	059b      	lsls	r3, r3, #22
 8004d72:	d402      	bmi.n	8004d7a <_ungetc_r+0x28>
 8004d74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d76:	f7fe ff18 	bl	8003baa <__retarget_lock_acquire_recursive>
 8004d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d7e:	f023 0220 	bic.w	r2, r3, #32
 8004d82:	0758      	lsls	r0, r3, #29
 8004d84:	81a2      	strh	r2, [r4, #12]
 8004d86:	d422      	bmi.n	8004dce <_ungetc_r+0x7c>
 8004d88:	06d9      	lsls	r1, r3, #27
 8004d8a:	d40a      	bmi.n	8004da2 <_ungetc_r+0x50>
 8004d8c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004d8e:	07d2      	lsls	r2, r2, #31
 8004d90:	d404      	bmi.n	8004d9c <_ungetc_r+0x4a>
 8004d92:	0599      	lsls	r1, r3, #22
 8004d94:	d402      	bmi.n	8004d9c <_ungetc_r+0x4a>
 8004d96:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d98:	f7fe ff08 	bl	8003bac <__retarget_lock_release_recursive>
 8004d9c:	f04f 35ff 	mov.w	r5, #4294967295
 8004da0:	e046      	b.n	8004e30 <_ungetc_r+0xde>
 8004da2:	071b      	lsls	r3, r3, #28
 8004da4:	d50f      	bpl.n	8004dc6 <_ungetc_r+0x74>
 8004da6:	4621      	mov	r1, r4
 8004da8:	4630      	mov	r0, r6
 8004daa:	f7ff fe53 	bl	8004a54 <_fflush_r>
 8004dae:	b120      	cbz	r0, 8004dba <_ungetc_r+0x68>
 8004db0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004db2:	07d8      	lsls	r0, r3, #31
 8004db4:	d4f2      	bmi.n	8004d9c <_ungetc_r+0x4a>
 8004db6:	89a3      	ldrh	r3, [r4, #12]
 8004db8:	e7eb      	b.n	8004d92 <_ungetc_r+0x40>
 8004dba:	89a3      	ldrh	r3, [r4, #12]
 8004dbc:	60a0      	str	r0, [r4, #8]
 8004dbe:	f023 0308 	bic.w	r3, r3, #8
 8004dc2:	81a3      	strh	r3, [r4, #12]
 8004dc4:	61a0      	str	r0, [r4, #24]
 8004dc6:	89a3      	ldrh	r3, [r4, #12]
 8004dc8:	f043 0304 	orr.w	r3, r3, #4
 8004dcc:	81a3      	strh	r3, [r4, #12]
 8004dce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004dd0:	6862      	ldr	r2, [r4, #4]
 8004dd2:	b2ed      	uxtb	r5, r5
 8004dd4:	b1d3      	cbz	r3, 8004e0c <_ungetc_r+0xba>
 8004dd6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	dc05      	bgt.n	8004de8 <_ungetc_r+0x96>
 8004ddc:	4621      	mov	r1, r4
 8004dde:	4630      	mov	r0, r6
 8004de0:	f7ff ff7d 	bl	8004cde <__submore>
 8004de4:	2800      	cmp	r0, #0
 8004de6:	d1e3      	bne.n	8004db0 <_ungetc_r+0x5e>
 8004de8:	6823      	ldr	r3, [r4, #0]
 8004dea:	1e5a      	subs	r2, r3, #1
 8004dec:	6022      	str	r2, [r4, #0]
 8004dee:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004df2:	6863      	ldr	r3, [r4, #4]
 8004df4:	3301      	adds	r3, #1
 8004df6:	6063      	str	r3, [r4, #4]
 8004df8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004dfa:	07da      	lsls	r2, r3, #31
 8004dfc:	d418      	bmi.n	8004e30 <_ungetc_r+0xde>
 8004dfe:	89a3      	ldrh	r3, [r4, #12]
 8004e00:	059b      	lsls	r3, r3, #22
 8004e02:	d415      	bmi.n	8004e30 <_ungetc_r+0xde>
 8004e04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e06:	f7fe fed1 	bl	8003bac <__retarget_lock_release_recursive>
 8004e0a:	e011      	b.n	8004e30 <_ungetc_r+0xde>
 8004e0c:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8004e0e:	6920      	ldr	r0, [r4, #16]
 8004e10:	6823      	ldr	r3, [r4, #0]
 8004e12:	f001 0101 	and.w	r1, r1, #1
 8004e16:	b168      	cbz	r0, 8004e34 <_ungetc_r+0xe2>
 8004e18:	4298      	cmp	r0, r3
 8004e1a:	d20b      	bcs.n	8004e34 <_ungetc_r+0xe2>
 8004e1c:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8004e20:	42a8      	cmp	r0, r5
 8004e22:	d107      	bne.n	8004e34 <_ungetc_r+0xe2>
 8004e24:	3b01      	subs	r3, #1
 8004e26:	3201      	adds	r2, #1
 8004e28:	6023      	str	r3, [r4, #0]
 8004e2a:	6062      	str	r2, [r4, #4]
 8004e2c:	2900      	cmp	r1, #0
 8004e2e:	d0e6      	beq.n	8004dfe <_ungetc_r+0xac>
 8004e30:	4628      	mov	r0, r5
 8004e32:	bd70      	pop	{r4, r5, r6, pc}
 8004e34:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8004e38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e3e:	2303      	movs	r3, #3
 8004e40:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004e42:	4623      	mov	r3, r4
 8004e44:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004e48:	6023      	str	r3, [r4, #0]
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	6063      	str	r3, [r4, #4]
 8004e4e:	e7ed      	b.n	8004e2c <_ungetc_r+0xda>

08004e50 <_fstat_r>:
 8004e50:	b538      	push	{r3, r4, r5, lr}
 8004e52:	4d07      	ldr	r5, [pc, #28]	@ (8004e70 <_fstat_r+0x20>)
 8004e54:	2300      	movs	r3, #0
 8004e56:	4604      	mov	r4, r0
 8004e58:	4608      	mov	r0, r1
 8004e5a:	4611      	mov	r1, r2
 8004e5c:	602b      	str	r3, [r5, #0]
 8004e5e:	f7fb fd41 	bl	80008e4 <_fstat>
 8004e62:	1c43      	adds	r3, r0, #1
 8004e64:	d102      	bne.n	8004e6c <_fstat_r+0x1c>
 8004e66:	682b      	ldr	r3, [r5, #0]
 8004e68:	b103      	cbz	r3, 8004e6c <_fstat_r+0x1c>
 8004e6a:	6023      	str	r3, [r4, #0]
 8004e6c:	bd38      	pop	{r3, r4, r5, pc}
 8004e6e:	bf00      	nop
 8004e70:	20000254 	.word	0x20000254

08004e74 <_isatty_r>:
 8004e74:	b538      	push	{r3, r4, r5, lr}
 8004e76:	4d06      	ldr	r5, [pc, #24]	@ (8004e90 <_isatty_r+0x1c>)
 8004e78:	2300      	movs	r3, #0
 8004e7a:	4604      	mov	r4, r0
 8004e7c:	4608      	mov	r0, r1
 8004e7e:	602b      	str	r3, [r5, #0]
 8004e80:	f7fb fcae 	bl	80007e0 <_isatty>
 8004e84:	1c43      	adds	r3, r0, #1
 8004e86:	d102      	bne.n	8004e8e <_isatty_r+0x1a>
 8004e88:	682b      	ldr	r3, [r5, #0]
 8004e8a:	b103      	cbz	r3, 8004e8e <_isatty_r+0x1a>
 8004e8c:	6023      	str	r3, [r4, #0]
 8004e8e:	bd38      	pop	{r3, r4, r5, pc}
 8004e90:	20000254 	.word	0x20000254

08004e94 <_sbrk_r>:
 8004e94:	b538      	push	{r3, r4, r5, lr}
 8004e96:	4d06      	ldr	r5, [pc, #24]	@ (8004eb0 <_sbrk_r+0x1c>)
 8004e98:	2300      	movs	r3, #0
 8004e9a:	4604      	mov	r4, r0
 8004e9c:	4608      	mov	r0, r1
 8004e9e:	602b      	str	r3, [r5, #0]
 8004ea0:	f7fb fdec 	bl	8000a7c <_sbrk>
 8004ea4:	1c43      	adds	r3, r0, #1
 8004ea6:	d102      	bne.n	8004eae <_sbrk_r+0x1a>
 8004ea8:	682b      	ldr	r3, [r5, #0]
 8004eaa:	b103      	cbz	r3, 8004eae <_sbrk_r+0x1a>
 8004eac:	6023      	str	r3, [r4, #0]
 8004eae:	bd38      	pop	{r3, r4, r5, pc}
 8004eb0:	20000254 	.word	0x20000254

08004eb4 <memcpy>:
 8004eb4:	440a      	add	r2, r1
 8004eb6:	4291      	cmp	r1, r2
 8004eb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ebc:	d100      	bne.n	8004ec0 <memcpy+0xc>
 8004ebe:	4770      	bx	lr
 8004ec0:	b510      	push	{r4, lr}
 8004ec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ec6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004eca:	4291      	cmp	r1, r2
 8004ecc:	d1f9      	bne.n	8004ec2 <memcpy+0xe>
 8004ece:	bd10      	pop	{r4, pc}

08004ed0 <_realloc_r>:
 8004ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ed4:	4680      	mov	r8, r0
 8004ed6:	4615      	mov	r5, r2
 8004ed8:	460c      	mov	r4, r1
 8004eda:	b921      	cbnz	r1, 8004ee6 <_realloc_r+0x16>
 8004edc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ee0:	4611      	mov	r1, r2
 8004ee2:	f7fe bed9 	b.w	8003c98 <_malloc_r>
 8004ee6:	b92a      	cbnz	r2, 8004ef4 <_realloc_r+0x24>
 8004ee8:	f7fe fe62 	bl	8003bb0 <_free_r>
 8004eec:	2400      	movs	r4, #0
 8004eee:	4620      	mov	r0, r4
 8004ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ef4:	f000 f906 	bl	8005104 <_malloc_usable_size_r>
 8004ef8:	4285      	cmp	r5, r0
 8004efa:	4606      	mov	r6, r0
 8004efc:	d802      	bhi.n	8004f04 <_realloc_r+0x34>
 8004efe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004f02:	d8f4      	bhi.n	8004eee <_realloc_r+0x1e>
 8004f04:	4629      	mov	r1, r5
 8004f06:	4640      	mov	r0, r8
 8004f08:	f7fe fec6 	bl	8003c98 <_malloc_r>
 8004f0c:	4607      	mov	r7, r0
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	d0ec      	beq.n	8004eec <_realloc_r+0x1c>
 8004f12:	42b5      	cmp	r5, r6
 8004f14:	462a      	mov	r2, r5
 8004f16:	4621      	mov	r1, r4
 8004f18:	bf28      	it	cs
 8004f1a:	4632      	movcs	r2, r6
 8004f1c:	f7ff ffca 	bl	8004eb4 <memcpy>
 8004f20:	4621      	mov	r1, r4
 8004f22:	4640      	mov	r0, r8
 8004f24:	f7fe fe44 	bl	8003bb0 <_free_r>
 8004f28:	463c      	mov	r4, r7
 8004f2a:	e7e0      	b.n	8004eee <_realloc_r+0x1e>

08004f2c <_strtol_l.constprop.0>:
 8004f2c:	2b24      	cmp	r3, #36	@ 0x24
 8004f2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f32:	4686      	mov	lr, r0
 8004f34:	4690      	mov	r8, r2
 8004f36:	d801      	bhi.n	8004f3c <_strtol_l.constprop.0+0x10>
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d106      	bne.n	8004f4a <_strtol_l.constprop.0+0x1e>
 8004f3c:	f7fe fe0a 	bl	8003b54 <__errno>
 8004f40:	2316      	movs	r3, #22
 8004f42:	6003      	str	r3, [r0, #0]
 8004f44:	2000      	movs	r0, #0
 8004f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f4a:	4834      	ldr	r0, [pc, #208]	@ (800501c <_strtol_l.constprop.0+0xf0>)
 8004f4c:	460d      	mov	r5, r1
 8004f4e:	462a      	mov	r2, r5
 8004f50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004f54:	5d06      	ldrb	r6, [r0, r4]
 8004f56:	f016 0608 	ands.w	r6, r6, #8
 8004f5a:	d1f8      	bne.n	8004f4e <_strtol_l.constprop.0+0x22>
 8004f5c:	2c2d      	cmp	r4, #45	@ 0x2d
 8004f5e:	d12d      	bne.n	8004fbc <_strtol_l.constprop.0+0x90>
 8004f60:	782c      	ldrb	r4, [r5, #0]
 8004f62:	2601      	movs	r6, #1
 8004f64:	1c95      	adds	r5, r2, #2
 8004f66:	f033 0210 	bics.w	r2, r3, #16
 8004f6a:	d109      	bne.n	8004f80 <_strtol_l.constprop.0+0x54>
 8004f6c:	2c30      	cmp	r4, #48	@ 0x30
 8004f6e:	d12a      	bne.n	8004fc6 <_strtol_l.constprop.0+0x9a>
 8004f70:	782a      	ldrb	r2, [r5, #0]
 8004f72:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004f76:	2a58      	cmp	r2, #88	@ 0x58
 8004f78:	d125      	bne.n	8004fc6 <_strtol_l.constprop.0+0x9a>
 8004f7a:	786c      	ldrb	r4, [r5, #1]
 8004f7c:	2310      	movs	r3, #16
 8004f7e:	3502      	adds	r5, #2
 8004f80:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004f84:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004f88:	2200      	movs	r2, #0
 8004f8a:	fbbc f9f3 	udiv	r9, ip, r3
 8004f8e:	4610      	mov	r0, r2
 8004f90:	fb03 ca19 	mls	sl, r3, r9, ip
 8004f94:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004f98:	2f09      	cmp	r7, #9
 8004f9a:	d81b      	bhi.n	8004fd4 <_strtol_l.constprop.0+0xa8>
 8004f9c:	463c      	mov	r4, r7
 8004f9e:	42a3      	cmp	r3, r4
 8004fa0:	dd27      	ble.n	8004ff2 <_strtol_l.constprop.0+0xc6>
 8004fa2:	1c57      	adds	r7, r2, #1
 8004fa4:	d007      	beq.n	8004fb6 <_strtol_l.constprop.0+0x8a>
 8004fa6:	4581      	cmp	r9, r0
 8004fa8:	d320      	bcc.n	8004fec <_strtol_l.constprop.0+0xc0>
 8004faa:	d101      	bne.n	8004fb0 <_strtol_l.constprop.0+0x84>
 8004fac:	45a2      	cmp	sl, r4
 8004fae:	db1d      	blt.n	8004fec <_strtol_l.constprop.0+0xc0>
 8004fb0:	fb00 4003 	mla	r0, r0, r3, r4
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004fba:	e7eb      	b.n	8004f94 <_strtol_l.constprop.0+0x68>
 8004fbc:	2c2b      	cmp	r4, #43	@ 0x2b
 8004fbe:	bf04      	itt	eq
 8004fc0:	782c      	ldrbeq	r4, [r5, #0]
 8004fc2:	1c95      	addeq	r5, r2, #2
 8004fc4:	e7cf      	b.n	8004f66 <_strtol_l.constprop.0+0x3a>
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1da      	bne.n	8004f80 <_strtol_l.constprop.0+0x54>
 8004fca:	2c30      	cmp	r4, #48	@ 0x30
 8004fcc:	bf0c      	ite	eq
 8004fce:	2308      	moveq	r3, #8
 8004fd0:	230a      	movne	r3, #10
 8004fd2:	e7d5      	b.n	8004f80 <_strtol_l.constprop.0+0x54>
 8004fd4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004fd8:	2f19      	cmp	r7, #25
 8004fda:	d801      	bhi.n	8004fe0 <_strtol_l.constprop.0+0xb4>
 8004fdc:	3c37      	subs	r4, #55	@ 0x37
 8004fde:	e7de      	b.n	8004f9e <_strtol_l.constprop.0+0x72>
 8004fe0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004fe4:	2f19      	cmp	r7, #25
 8004fe6:	d804      	bhi.n	8004ff2 <_strtol_l.constprop.0+0xc6>
 8004fe8:	3c57      	subs	r4, #87	@ 0x57
 8004fea:	e7d8      	b.n	8004f9e <_strtol_l.constprop.0+0x72>
 8004fec:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff0:	e7e1      	b.n	8004fb6 <_strtol_l.constprop.0+0x8a>
 8004ff2:	1c53      	adds	r3, r2, #1
 8004ff4:	d108      	bne.n	8005008 <_strtol_l.constprop.0+0xdc>
 8004ff6:	2322      	movs	r3, #34	@ 0x22
 8004ff8:	f8ce 3000 	str.w	r3, [lr]
 8004ffc:	4660      	mov	r0, ip
 8004ffe:	f1b8 0f00 	cmp.w	r8, #0
 8005002:	d0a0      	beq.n	8004f46 <_strtol_l.constprop.0+0x1a>
 8005004:	1e69      	subs	r1, r5, #1
 8005006:	e006      	b.n	8005016 <_strtol_l.constprop.0+0xea>
 8005008:	b106      	cbz	r6, 800500c <_strtol_l.constprop.0+0xe0>
 800500a:	4240      	negs	r0, r0
 800500c:	f1b8 0f00 	cmp.w	r8, #0
 8005010:	d099      	beq.n	8004f46 <_strtol_l.constprop.0+0x1a>
 8005012:	2a00      	cmp	r2, #0
 8005014:	d1f6      	bne.n	8005004 <_strtol_l.constprop.0+0xd8>
 8005016:	f8c8 1000 	str.w	r1, [r8]
 800501a:	e794      	b.n	8004f46 <_strtol_l.constprop.0+0x1a>
 800501c:	0800522b 	.word	0x0800522b

08005020 <_strtol_r>:
 8005020:	f7ff bf84 	b.w	8004f2c <_strtol_l.constprop.0>

08005024 <_strtoul_l.constprop.0>:
 8005024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005028:	4e34      	ldr	r6, [pc, #208]	@ (80050fc <_strtoul_l.constprop.0+0xd8>)
 800502a:	4686      	mov	lr, r0
 800502c:	460d      	mov	r5, r1
 800502e:	4628      	mov	r0, r5
 8005030:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005034:	5d37      	ldrb	r7, [r6, r4]
 8005036:	f017 0708 	ands.w	r7, r7, #8
 800503a:	d1f8      	bne.n	800502e <_strtoul_l.constprop.0+0xa>
 800503c:	2c2d      	cmp	r4, #45	@ 0x2d
 800503e:	d12f      	bne.n	80050a0 <_strtoul_l.constprop.0+0x7c>
 8005040:	782c      	ldrb	r4, [r5, #0]
 8005042:	2701      	movs	r7, #1
 8005044:	1c85      	adds	r5, r0, #2
 8005046:	f033 0010 	bics.w	r0, r3, #16
 800504a:	d109      	bne.n	8005060 <_strtoul_l.constprop.0+0x3c>
 800504c:	2c30      	cmp	r4, #48	@ 0x30
 800504e:	d12c      	bne.n	80050aa <_strtoul_l.constprop.0+0x86>
 8005050:	7828      	ldrb	r0, [r5, #0]
 8005052:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8005056:	2858      	cmp	r0, #88	@ 0x58
 8005058:	d127      	bne.n	80050aa <_strtoul_l.constprop.0+0x86>
 800505a:	786c      	ldrb	r4, [r5, #1]
 800505c:	2310      	movs	r3, #16
 800505e:	3502      	adds	r5, #2
 8005060:	f04f 38ff 	mov.w	r8, #4294967295
 8005064:	2600      	movs	r6, #0
 8005066:	fbb8 f8f3 	udiv	r8, r8, r3
 800506a:	fb03 f908 	mul.w	r9, r3, r8
 800506e:	ea6f 0909 	mvn.w	r9, r9
 8005072:	4630      	mov	r0, r6
 8005074:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8005078:	f1bc 0f09 	cmp.w	ip, #9
 800507c:	d81c      	bhi.n	80050b8 <_strtoul_l.constprop.0+0x94>
 800507e:	4664      	mov	r4, ip
 8005080:	42a3      	cmp	r3, r4
 8005082:	dd2a      	ble.n	80050da <_strtoul_l.constprop.0+0xb6>
 8005084:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005088:	d007      	beq.n	800509a <_strtoul_l.constprop.0+0x76>
 800508a:	4580      	cmp	r8, r0
 800508c:	d322      	bcc.n	80050d4 <_strtoul_l.constprop.0+0xb0>
 800508e:	d101      	bne.n	8005094 <_strtoul_l.constprop.0+0x70>
 8005090:	45a1      	cmp	r9, r4
 8005092:	db1f      	blt.n	80050d4 <_strtoul_l.constprop.0+0xb0>
 8005094:	fb00 4003 	mla	r0, r0, r3, r4
 8005098:	2601      	movs	r6, #1
 800509a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800509e:	e7e9      	b.n	8005074 <_strtoul_l.constprop.0+0x50>
 80050a0:	2c2b      	cmp	r4, #43	@ 0x2b
 80050a2:	bf04      	itt	eq
 80050a4:	782c      	ldrbeq	r4, [r5, #0]
 80050a6:	1c85      	addeq	r5, r0, #2
 80050a8:	e7cd      	b.n	8005046 <_strtoul_l.constprop.0+0x22>
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1d8      	bne.n	8005060 <_strtoul_l.constprop.0+0x3c>
 80050ae:	2c30      	cmp	r4, #48	@ 0x30
 80050b0:	bf0c      	ite	eq
 80050b2:	2308      	moveq	r3, #8
 80050b4:	230a      	movne	r3, #10
 80050b6:	e7d3      	b.n	8005060 <_strtoul_l.constprop.0+0x3c>
 80050b8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80050bc:	f1bc 0f19 	cmp.w	ip, #25
 80050c0:	d801      	bhi.n	80050c6 <_strtoul_l.constprop.0+0xa2>
 80050c2:	3c37      	subs	r4, #55	@ 0x37
 80050c4:	e7dc      	b.n	8005080 <_strtoul_l.constprop.0+0x5c>
 80050c6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80050ca:	f1bc 0f19 	cmp.w	ip, #25
 80050ce:	d804      	bhi.n	80050da <_strtoul_l.constprop.0+0xb6>
 80050d0:	3c57      	subs	r4, #87	@ 0x57
 80050d2:	e7d5      	b.n	8005080 <_strtoul_l.constprop.0+0x5c>
 80050d4:	f04f 36ff 	mov.w	r6, #4294967295
 80050d8:	e7df      	b.n	800509a <_strtoul_l.constprop.0+0x76>
 80050da:	1c73      	adds	r3, r6, #1
 80050dc:	d106      	bne.n	80050ec <_strtoul_l.constprop.0+0xc8>
 80050de:	2322      	movs	r3, #34	@ 0x22
 80050e0:	f8ce 3000 	str.w	r3, [lr]
 80050e4:	4630      	mov	r0, r6
 80050e6:	b932      	cbnz	r2, 80050f6 <_strtoul_l.constprop.0+0xd2>
 80050e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050ec:	b107      	cbz	r7, 80050f0 <_strtoul_l.constprop.0+0xcc>
 80050ee:	4240      	negs	r0, r0
 80050f0:	2a00      	cmp	r2, #0
 80050f2:	d0f9      	beq.n	80050e8 <_strtoul_l.constprop.0+0xc4>
 80050f4:	b106      	cbz	r6, 80050f8 <_strtoul_l.constprop.0+0xd4>
 80050f6:	1e69      	subs	r1, r5, #1
 80050f8:	6011      	str	r1, [r2, #0]
 80050fa:	e7f5      	b.n	80050e8 <_strtoul_l.constprop.0+0xc4>
 80050fc:	0800522b 	.word	0x0800522b

08005100 <_strtoul_r>:
 8005100:	f7ff bf90 	b.w	8005024 <_strtoul_l.constprop.0>

08005104 <_malloc_usable_size_r>:
 8005104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005108:	1f18      	subs	r0, r3, #4
 800510a:	2b00      	cmp	r3, #0
 800510c:	bfbc      	itt	lt
 800510e:	580b      	ldrlt	r3, [r1, r0]
 8005110:	18c0      	addlt	r0, r0, r3
 8005112:	4770      	bx	lr

08005114 <_lseek>:
 8005114:	4b02      	ldr	r3, [pc, #8]	@ (8005120 <_lseek+0xc>)
 8005116:	2258      	movs	r2, #88	@ 0x58
 8005118:	601a      	str	r2, [r3, #0]
 800511a:	f04f 30ff 	mov.w	r0, #4294967295
 800511e:	4770      	bx	lr
 8005120:	20000254 	.word	0x20000254

08005124 <_init>:
 8005124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005126:	bf00      	nop
 8005128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800512a:	bc08      	pop	{r3}
 800512c:	469e      	mov	lr, r3
 800512e:	4770      	bx	lr

08005130 <_fini>:
 8005130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005132:	bf00      	nop
 8005134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005136:	bc08      	pop	{r3}
 8005138:	469e      	mov	lr, r3
 800513a:	4770      	bx	lr
